<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zsh | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/zsh/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2021-06-15T02:37:55-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starter Zsh Setup]]></title>
    <link href="https://blog.jez.io/starter-zsh-setup/"/>
    <updated>2016-01-02T23:14:16-06:00</updated>
    <id>https://blog.jez.io/starter-zsh-setup</id>
    <content type="html"><![CDATA[<p>Zsh has given me so much mileage with respect to efficiency at the command line.
Looking back I&rsquo;m a little sad I didn&rsquo;t switch to it sooner. One of the reasons
why it took so long was that I didn&rsquo;t know where to start; with this in mind,
I&rsquo;ve collected some of the zsh-specific bits of my dotfiles into one place to
help people hit the ground running.</p>

<!-- more -->


<p>To cut to the chase, you can find my <a href="https://github.com/jez/starter-zshrc">starter zshrc</a> on GitHub. It
contains usage information as well as loads of inline comments to give you a
line-by-line summary.</p>

<p>Note: it&rsquo;s an <em>starter</em> zshrc. What I mean by this is that it&rsquo;s more of
a skeleton. It&rsquo;s been crafted with the assumption that you&rsquo;re coming from bash
and you already have some bash config that you&rsquo;re weary to part with. The
content here aims to be minimally invasive, and since zsh is largely compatible
with bash, the rest of your config should fit right in.</p>

<h2>Going Further</h2>

<p>I have even more zsh-specific and general configuration nuggets in my personal
dotfiles, which are <a href="https://github.com/jez/dotfiles">also on GitHub</a>. I add to them nearly every day,
and I&rsquo;m pretty fond of them if I do say so myself. You might want to read
<a href="http://blog.jez.io/2015/03/10/noteworthy-dotfile-hacks/">Noteworthy Dotfile Hacks</a> if you&rsquo;re looking for a quick overview of some
snippets and features I&rsquo;ve collected into my dotfiles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why zsh?]]></title>
    <link href="https://blog.jez.io/why-zsh/"/>
    <updated>2015-03-10T11:58:37-05:00</updated>
    <id>https://blog.jez.io/why-zsh</id>
    <content type="html"><![CDATA[<p>People often ask me why I switched to zsh. Back when I had first switched, I was
hesitant to answer because I was still finding my way around. Now that I&rsquo;ve been
using it, I&rsquo;ve managed to distill down a few things zsh does well that sets it
apart as my shell of choice.</p>

<!-- more -->


<h2>Syntax Highlighting</h2>

<p>In zsh, there&rsquo;s a <a href="https://github.com/zsh-users/zsh-syntax-highlighting">plugin that syntax highlights</a> the
current command line as you type. It&rsquo;s incredibly useful to receive instant
feedback about whether a command you&rsquo;re typing is valid. Turns running commands
at the command line into nearly the same experience as typing code into your
favorite text editor.</p>

<p><a class="image-link" href="/images/zsh-syntax-highlighting.png"><img src="/images/zsh-syntax-highlighting.png"></a></p>

<p>The screenshot above features some of the syntax elements it highlights by
default:</p>

<ul>
<li>commands that exist (also aliases, functions, etc.) are changed to green</li>
<li>those that don&rsquo;t are changed to red</li>
<li>text corresponding to files and folders that exist are underlined</li>
<li>text that looks like a file was misspelled is changed to yellow</li>
<li>text that doesn&rsquo;t correspond to the name of a file nor that looks like a
misspelling for an existing file is left unchanged</li>
</ul>


<p>It also highlights strings, globs, and environment variables (if they&rsquo;re typed
within strings).</p>

<p>There&rsquo;s probably no technical limitation for why this couldn&rsquo;t be done in bash, but
as of yet no one has done it.</p>

<h2>Better Tab Completion</h2>

<p>In zsh when you tab complete, the matches are listed below the current line,
whereas in bash they&rsquo;re listed above it. For an example, check out the
screenshot. I perform the same keystrokes in bash and zsh:</p>

<pre><code class="bash">$ cd D&lt;TAB&gt;
</code></pre>

<p><a class="image-link" href="/images/zsh-tab-completion.png"><img src="/images/zsh-tab-completion.png"></a></p>

<p>In bash, pressing TAB prints out the completions followed by a new line. In zsh,
they&rsquo;re simply listed conveniently below the current line. If I continued to
complete many things in that line or ran the command, zsh would overwrite the
old completions, but bash would keep on printing additional lines, taking up
precious screen space.</p>

<h2>Better Completion Support</h2>

<p>When I used bash, I managed to have pretty wide support for tab completion in
programs. I&rsquo;m talking much more than just completing filenames. As such, I was
pretty skeptical that there&rsquo;d be much more that zsh could offer.</p>

<p>While zsh&rsquo;s edge wasn&rsquo;t immediately apparent in this aspect, I&rsquo;d like to declare
it a winner now. I had to fight pretty hard to get my bash completions where
they were. By comparison, zsh comes with so many more completions built in, and
if you decide to use oh-my-zsh (a collection of zsh plugins) on top of zsh,
adding new functionality is one line away.</p>

<p>I now have things like environment variable completion, tmux completion, deep
git command completion, and much more.</p>

<h2>Great, how do I start?</h2>

<p>The first step is to change your shell to zsh: <code>chsh -s $(which zsh)</code>. Once
you&rsquo;ve done that, you&rsquo;ll need a <code>.zshrc</code> and <code>.zshenv</code>. If you&rsquo;re looking for a
reference, you can see my <a href="https://github.com/jez/dotfiles/blob/master/util/misc.zsh"><code>misc.zsh</code></a> file in my <a href="https://github.com/jez/dotfiles">dotfiles</a>
repo on GitHub, a file which eventually gets sourced in my <a href="https://github.com/jez/dotfiles/blob/master/zshrc"><code>.zshrc</code></a>. It
contains most of everything that you need to get started using zsh on OS X. Keep
in mind that it&rsquo;s somewhat opinionated (it heavily favors vim keybindings and
uses oh-my-zsh among other things). You might also want to check out my
<a href="/2015/03/10/noteworthy-dotfile-hacks/">Noteworthy Dotfile Hacks</a> post, where I talked about what I
think are the most notable features I have in my dotfiles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noteworthy Dotfile Hacks]]></title>
    <link href="https://blog.jez.io/noteworthy-dotfile-hacks/"/>
    <updated>2015-03-10T00:22:33-05:00</updated>
    <id>https://blog.jez.io/noteworthy-dotfile-hacks</id>
    <content type="html"><![CDATA[<p>I have hundreds of files and folders in my dotfiles repo, and nearly 1000
commits&mdash;there are quite a few hidden gems buried in there that generally don&rsquo;t
get to see the light of day. Rather than wander aimlessly through them, let me
give you the guided tour.</p>

<!-- more -->


<p>I often tell people &ldquo;oh, and you can also go check out my dotfiles repository
for more cool configurations&rdquo; when I&rsquo;m giving out dotfiles advice. If someone
gave me this advice, I know I wouldn&rsquo;t follow up, even if I had the utmost awe
for the recommender. Drudging through config files isn&rsquo;t all that fun, even
though they can do fun things. Why not get rid of the drudgery?</p>

<p>This post is designed to bring the coolest parts of my dotfiles to the top. It&rsquo;s
organized by topic, so feel free to skip around.</p>

<p><strong>Note</strong>: throughout this post, I&rsquo;ll be linking to my dotfiles <em>at a specific
commit</em> on GitHub. While this solves the problem of line-level links breaking on
updates, it means that you&rsquo;ll almost certainly be looking at out-dated code.
Make sure to check out the corresponding file on the <code>master</code> branch for the
most up-to-date version.</p>

<p>Also, I <a href="/2015/03/09/getting-started-with-rcm/">just wrote</a> about one of my biggest dotfile hacks: using rcm
to keep my dotfiles in sync across machines. Be sure to give it a read if you&rsquo;re
running into that problem.</p>

<h2><code>tmux</code></h2>

<p>I have a lot of cool stuff going on in my <code>.tmux.conf</code></p>

<ul>
<li>I <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L1-L4">bind the prefix key to <code>C-f</code></a>, something which I haven&rsquo;t seen
many people do.  I&rsquo;ve never had a problem with it conflicting with commonly
used shortcuts, and it&rsquo;s incredibly easy to press (compared with the common
options of <code>C-a</code> and <code>C-b</code>)</li>
<li>I integrate with two Vim plugins:

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L18-L27">vim-tmux-navigator</a>, which lets you jump between vim
splits and tmux splits as if they were the same thing</li>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L48-L49">tmuxline</a>, which makes my tmux status bar look just like Vim with
vim-airline (it even pulls down the colors from your Vim configuration!).</li>
</ul>
</li>
</ul>


<h2><code>dircolors</code></h2>

<p>I use the GNU <code>dircolors</code> command to change the colors output by the <code>ls</code>
program. After running <code>brew install coreutils</code> on OS X, I&rsquo;m able to see the
colors thanks to <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/dircolors">this file</a> and <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/host-Jacobs-MacBook-Air/util/host.sh#L19-L21">this snippet</a> in my zshrc.</p>

<p><a class="image-link" href="href="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png">https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png</a>&#8221;><img class="<a" src="href="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png">https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png</a>&#8221;></a></p>

<p>(image from the <a href="https://github.com/seebi/dircolors-solarized">dircolors-solarized</a> repository on GitHub)</p>

<h2><code>gitconfig</code></h2>

<p>I talked about this <a href="/2015/01/16/mastering-git-log-for-collaboration/">in a previous post</a>, but I have some <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/gitconfig#L20-L24">special
settings</a> in my global gitconfig for adding colored decoration to git
log commands. Here&rsquo;s a screenshot from that post:</p>

<p><a class="image-link" href="/images/glla-tartanhacks.png"><img src="/images/glla-tartanhacks.png"></a></p>

<h2><code>aklog cs.cmu.edu</code></h2>

<p>For my friends at CMU, I have <code>aklog cs.cmu.edu</code> in <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-andrew/util/host.zshenv#L1">my ~/.zshenv</a>,
which gets run even when you log in interactively (like what happens when you
<code>scp</code> something), so that I can copy files from my local machine to the SCS AFS
space, which is useful for doing things like making handins. Note that the file
linked to above is a host-specific file that only &ldquo;exists&rdquo; for me on Andrew
machines. You can read more about my setup <a href="/2015/03/09/getting-started-with-rcm/">in my
previous post</a>.</p>

<h2>zsh-syntax-highlighting</h2>

<p>I use a <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/misc.zsh#L79-L80">zsh plugin</a> to syntax highlight my commands as I type them
on the command line, similar to how the fish shell does it. It does various
things, like coloring the command red or green based on whether it exists,
underlines filenames that exist, highlights filenames that might be misspelled
in yellow, highlights built-ins like <code>if</code> and <code>for</code> in orange, etc.</p>

<p>Here are some examples from my setup:</p>

<p><a class="image-link" href="/images/zsh-syntax-highlighting-for-loop.png"><img src="/images/zsh-syntax-highlighting-for-loop.png"></a></p>

<p><a class="image-link" href="/images/zsh-syntax-highlighting.png"><img src="/images/zsh-syntax-highlighting.png"></a></p>

<h2>Automatic Dotfile Updates</h2>

<p>I wrote a pretty robust script that reminds me to update my dotfiles and my
system regularly. All it does is remind me to check for system updates once
every 24 hours, but it works so well that I had updated my system <code>bash</code> version
before I even read about Shell Shock!</p>

<p>The relevant links are <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/auto-update.sh">here</a> for the core script that I <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/zshrc#L44-L45">source in
my zshrc</a>, and then the following host specific links:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/util/host.sh#L69-L86">here</a> for my MacBook</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-ghost.zimmerman.io/util/host.sh#L24-L31">here</a> for my Ubuntu VPS</li>
</ul>


<h2>Shell aliases</h2>

<p>I&rsquo;d like to think that my whole <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh"><code>aliases.sh</code></a> file is golden, but if
you&rsquo;re looking for some specific things I like about it, check out my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L75-L86"><code>git log</code></a>
aliases, which I wrote about <a href="/2015/01/16/mastering-git-log-for-collaboration/">here</a>, and my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L44-L45"><code>chromemem</code></a> alias, which I wrote about <a href="/2014/12/29/google-chrome-a-memory-hog/">here</a>.</p>

<h2>Ruby Virtualenvs</h2>

<p>I wrote about how I use <a href="/2014/12/22/ruby-virtualenvs/">Python Virtualenvs to sandbox Ruby
gems</a>, a post in which I dropped some snippets that you can
use to configure virtualenvwrapper to work with Ruby projects. I actually went
ahead and <a href="https://github.com/jez/dotfiles/tree/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/virtualenvs">fed those files right into rcm</a>, so they&rsquo;ll always be available if I
ever get a new laptop.</p>

<h2><code>ssh</code></h2>

<p>My username on every machine I ssh to for school is <code>jezimmer</code>, but there are
countless servers I can ssh into (7 for <code>unix.andrew.cmu.edu</code>, 99+ for
<code>ghc*.ghc.andrew.cmu.edu</code>, 10 for 15-213, the list goes on). <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/ssh/config#L7-L19">These
lines</a> enable me to ssh to any of those machines with just a
hostname, and the username is assumed to be <code>jezimmer</code>.</p>

<h2>iTerm2</h2>

<p>There&rsquo;s not much to show for this one, but in Preferences > General of iTerm2,
you can opt to load your iTerm2 preferences from a specific location. I&rsquo;ve set
this to <code>/Users/jake/.dotfiles</code>, which means that my iTerm2 settings are always
written to my <code>.dotfiles/</code> directory. If I ever make changes to iTerm2, they get
propagated as changes that Git picks up on and which I subsequently check into
Git history.</p>

<h2>Vim</h2>

<p>I&rsquo;m in love with my Vim setup. If you&rsquo;re looking for help getting started
configuring Vim, you should checkout the <a href="https://github.com/jez/vim-as-an-ide">Vim plugins workshop I put
together</a>, which gets you started with a &ldquo;fully-configured&rdquo; Vim
setup. Once you think you&rsquo;ve &ldquo;mastered&rdquo; that and you&rsquo;re ready for more, here are
a list of things I&rsquo;m proud of in my <code>.vimrc</code>:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L65-L67"><code>set breakindent</code></a> A feature new in Vim 7.4, this allows you to
align wrapped text at the same indentation level as the preceding text.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L100-L106">these mappings</a>, which let me move around (move up and down in
particular) in long lines just as if they were short.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L90-L91">this mapping</a>, which lets me open Vim help pages in new tabs</li>
</ul>


<h2>Other</h2>

<p>I&rsquo;ve only highlighted a fraction of my configuration files, but I think I&rsquo;ve
managed to capture a good portion of them. If you thought that one of these
snippets was useful, are having trouble getting something to work, or have
something interesting to share, leave a comment below!</p>
]]></content>
  </entry>
  
</feed>
