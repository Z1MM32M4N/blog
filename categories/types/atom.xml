<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: types | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/types/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2019-09-02T17:34:49-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on Continuations]]></title>
    <link href="https://blog.jez.io/continuations-notes/"/>
    <updated>2019-06-18T18:03:13-07:00</updated>
    <id>https://blog.jez.io/continuations-notes</id>
    <content type="html"><![CDATA[<p>These are some notes I gave out at one of my weekly recitations when I
was teaching <a href="http://www.cs.cmu.edu/~rwh/courses/ppl/">15-312 Principles of Programming Languages</a> at CMU in
April 2017. Continuations have a <em>fascinating</em> analogy with proofs by
contradiction that I might flesh out into a proper post in the future,
but for now here are some rough recitation notes.</p>

<p>They&rsquo;re best understood with Chapter 30 of <a href="http://www.cs.cmu.edu/~rwh/pfpl/">Practical Foundations for
Programming Languages</a> open. (Unfortunately this chapter isn&rsquo;t
available in the online preview of the 2nd edition. I&rsquo;m happy to lend
you my hard copy if I know you IRL.)</p>

<h3>â†’ <a href="/notes/continuations.pdf">Continuations</a></h3>

<p><strong>Abstract</strong>:</p>

<blockquote><p>Continuations allow for lots of things. Intuitively, we can think of
continuations as &ldquo;functions that never come back.&rdquo; That is,
continuations transfer control to some other part of your program. In
a way, continuations are like a much nicer version of <code>goto</code>. But
they&rsquo;re way more than thisâ€”specifically, they reify the concept of a
&ldquo;proof by contradiction&rdquo; into the type system.</p></blockquote>

<!-- vim:tw=72
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Union Types in Flow & Reason]]></title>
    <link href="https://blog.jez.io/union-types-flow-reason/"/>
    <updated>2018-04-18T22:43:26-07:00</updated>
    <id>https://blog.jez.io/union-types-flow-reason</id>
    <content type="html"><![CDATA[<p>Union types are powerful yet often overlooked. At work, I&rsquo;ve been using
Flow which <a href="https://flow.org/en/docs/types/unions/">thankfully supports union types</a>. But as I&rsquo;ve
refactored more of our code to use union types, I&rsquo;ve noticed that our
bundle size has been steadily increasing!</p>

<!-- more -->


<p>In this post, we&rsquo;re going to explore why that&rsquo;s the case. We&rsquo;ll start
with a problem which union types can solve, flesh out the problem to
motivate why union types are definitely the solution, then examine the
resulting cost of introducing them. In the end, we&rsquo;ll compare Flow to
other compile-to-JS languages on the basis of how they represent union
types in the compiled output. I&rsquo;m especially excited about <a href="https://reasonml.github.io/">Reason</a>, so
we&rsquo;ll talk about it the most.</p>

<h2>Setup: Union Types in a React Component</h2>

<p>Let&rsquo;s consider we&rsquo;re writing a simple React 2FA<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> modal.
We&rsquo;ll be using Flow, but you can pretend it&rsquo;s TypeScript if you want.
The mockup we were given looks like this:</p>

<p><a href="/images/2fa-mockup.jpeg"><img src="/images/2fa-mockup.jpeg" alt="A sample mockup for a two-factor authenticaion modal" /></a></p>

<p>In this mockup:</p>

<ul>
<li>There&rsquo;s a loading state while we send the text message.</li>
<li>We&rsquo;ll show an input for the code after the message is sent.</li>
<li>There&rsquo;s no failure screen (it hasn&rsquo;t been drawn up yet).</li>
</ul>


<p>We&rsquo;ll need some way for our component to know which of the three screens
is visible. Let&rsquo;s use a <a href="https://flow.org/en/docs/types/unions/">union type</a> in Flow:</p>

<pre><code class="js">type Screen =
  | 'LoadingScreen'
  | 'CodeEntryScreen'
  | 'SuccessScreen';
</code></pre>

<p>Union types are a perfect fit! ðŸŽ‰  Union types document intent and can
help guard against mistakes. Fellow developers and our compiler can
know &ldquo;these are all the cases.&rdquo; In particular, Flow can warn us when
we&rsquo;ve <a href="/flow-exhaustiveness/">forgotten a case</a>.</p>

<p>Our initial implementation is working great. After sharing it with the
team, someone suggests adding a &ldquo;cancel&rdquo; button in the top corner. It
doesn&rsquo;t make sense to cancel when the flow has already succeeded, so
we&rsquo;ll exclude it from the last screen:</p>

<p><a href="/images/2fa-close-btn.jpeg"><img src="/images/2fa-close-btn.jpeg" alt="Adding a close button to our modal" /></a></p>

<p>No problem: let&rsquo;s write a function called <code>needsCancelButton</code> to
determine if we need to put a cancel button in the header of a
particular screen:</p>

<pre><code class="js">const needsCancelButton = (screen: Screen): boolean =&gt; {
  // Recall: 'SuccessScreen' is the last screen,
  // so it shouldn't have a cancel button.
  return screen !== 'SuccessScreen';
};
</code></pre>

<p>Short and sweet. ðŸ‘Œ Everything seems to be working great, until&hellip;</p>

<h2><code>switch</code>: Optimizing for Exhaustiveness</h2>

<p>The next day, we get some updated mocks from the design team. This time,
they&rsquo;ve also drawn up a &ldquo;failure&rdquo; screen for when the customer has
entered the wrong code too many times:</p>

<p><a href="/images/2fa-failure-screen.jpeg"><img src="/images/2fa-failure-screen.jpeg" alt="The failure screen for our modal" /></a></p>

<p>We can handle this&mdash;we&rsquo;ll just add a case to our <code>Screen</code> type:</p>

<pre><code class="js">type Screen =
  | 'LoadingScreen'
  | 'CodeEntryScreen'
  | 'SuccessScreen'
  // New case to handle too many wrong attempts:
  | 'FailureScreen';
</code></pre>

<p>But now <strong>there&rsquo;s a bug</strong> in our <code>needsCancelButton</code> function. ðŸ˜§ We
should only show a close button on screens where it makes sense, and
<code>'FailureScreen'</code> is not one of those screens. Our first reaction after
discovering the bug would be to just blacklist <code>'FailureScreen'</code> too:</p>

<pre><code class="js">const needsCancelButton = (screen: Screen): boolean =&gt; {
  return (
    screen !== 'SuccessScreen' ||
    screen !== 'FailureScreen'
  );
};
</code></pre>

<p>But we can do better than just fixing the <strong>current</strong> bug. We should
write code so that when we add a new case to a union type, our type
checker alerts us before a <strong>future</strong> bug even happens. What if instead
of a silent bug, we got this cheery message from our type checker?</p>

<blockquote><p>Hey, you forgot to add a case to <code>needsCancelButton</code> for the new
screen you added. <em>ðŸ™‚</em></p>

<p>&mdash; your friendly, neighborhood type checker</p></blockquote>

<p>Let&rsquo;s go back and rewrite <code>needsCancelButton</code> so that it <strong>will</strong> tell
us this when adding new cases. We&rsquo;ll use a <code>switch</code> statement with
<a href="/flow-exhaustiveness/">something special in the <code>default</code> case</a>:</p>

<pre><code class="js">const impossible = &lt;T&gt;(x: empty): T =&gt; {
  throw new Error('This case is impossible.');
}

const needsCancelButton = (screen: Screen): boolean =&gt; {
  switch (screen) {
    case 'LoadingScreen':
      return true;
    case 'CodeEntryScreen':
      return true;
    case 'SuccessScreen':
      return false;
    default:
      // (I named this function 'absurd' in my earlier post:
      // https://blog.jez.io/flow-exhaustiveness/)
      // This function asks Flow to check for exhaustiveness.
      //
      // [flow]: Error: Cannot call `impossible` with `screen` bound to `x` because string literal `FailureScreen` [1] is incompatible with empty [2].
      return impossible(screen);
  }
}
</code></pre>

<p><a href="https://flow.org/try/#0PTAEAEDMBsHsHcBQiAuBPADgU1AZQMYBOWWAdqALyKigA+oA5ADKwCGAJgJakDmBxZBtTqMAwrHZYAoqRSE0-EqSE16DXAFd8+LAGddiwcLUAxVp2gbih5QG5k+WKV0pQnALYZY+zgCNoOBSgADwAKgB8ABQAHgBcoFie6ACU8aGU4aAA3sIoABaECKCkWPCgUoSFhJEMoXmcuqD4rLo4DW6e3rp+AQB0DMn2AL4OTi7FJOy6oqykOtAAQhooKE6UoJG6RErxNqmgvrCwAbMZ2cK68Jwo+HkbWwKkyec0NM2tjCwc3HzbgrHCV6gYgoKzkOQaLD2IHvHAMcSSGRyBR-ZQAoE0EFg0AQqGApotOGabR6AyohjojFYwjkSCsaCtaGvECgACqc1g7ncZFcq1AkE40RxeRwJjgZSwlVghHxLNhjDMFisWBsFNlYGBWFBNP59MZ+MkdI00BQlKB1PIHi8Pn8WE2qMGwhGQyAA"><strong>(Play with it on Try Flow â†’)</strong></a></p>

<p>Now Flow is smart enough to give us an error! Making our code safer, one
<code>switch</code> statement at a time. ðŸ˜… Union types in Flow are a powerful way
to use types to guarantee correctness. But to get the most out of union
types, <strong>always<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> access them</strong> through a <code>switch</code> statement.
Every time we use a union type without an exhaustive switch statement,
we make it harder for Flow to tell us where we&rsquo;ve missed something.</p>

<h2>Correctness, but at what cost?</h2>

<p>You might not have noticed, but we paid a subtle cost in rewriting
our <code>needsCancelButton</code> function. Let&rsquo;s compare our two functions:</p>

<pre><code class="js">// ----- before: 62 bytes (minified) -----

const needsCancelButton = (screen) =&gt; {
  return screen !== 'SuccessScreen';
};

// ----- after: 240 bytes (minified) -----

const impossible = (x) =&gt; {
  throw new Error('This case is impossible.');
};

const needsCancelButton = (screen) =&gt; {
  switch (screen) {
    case 'LoadingScreen':
      return true;
    case 'CodeEntryScreen':
      return true;
    case 'SuccessScreen':
      return false;
    default:
      return impossible(screen);
  }
};
</code></pre>

<p>With just an equality check, our function was small: 62 bytes minified.
But when we refactored to use a <code>switch</code> statement, its size shot up to
240 bytes! That&rsquo;s a 4x increase, just to get exhaustiveness. Admittedly,
<code>needsCancelButton</code> is a bit of a pathological case. But in general: as
we make our code bases <strong>more safe</strong> using Flow&rsquo;s union types of string
literals, our <strong>bundle size bloats</strong>!</p>

<h2>Types and Optimizing Compilers</h2>

<p>One of the many overlooked promises of types is the claim that by
writing our code with <strong>higher-level abstractions</strong>, we give more
information to the compiler. The compiler can then generate code that
captures our original intent, but as efficiently as possible.</p>

<p>Flow is decidedly <strong>not</strong> a compiler: it&rsquo;s only a type checker. To run
JavaScript annotated with Flow types, we first strip the types (with
something like Babel). All information about the types vanishes when we
run the code.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> What can we achieve if we were to <strong>keep the
types around</strong> all the way through compilation?</p>

<p><a href="https://reasonml.github.io/">Reason</a> (i.e., ReasonML) is an exciting effort to bring all the
benefits of the OCaml tool chain to the web. In particular, Reason
works using OCaml&rsquo;s mature optimizing compiler alongside BuckleScript
(which turns OCaml to JavaScript) to emit great code.</p>

<p>To see what I mean, let&rsquo;s re-implement our <code>Screen</code> type and
<code>needsCancelButton</code> function, this time in Reason:</p>

<pre><code class="js">type screen =
  | LoadingScreen
  | CodeEntryScreen
  | SuccessScreen;

let needsCancelButton = (screen: screen): bool =&gt; {
  switch (screen) {
  | LoadingScreen =&gt; true;
  | CodeEntryScreen =&gt; true;
  | SuccessScreen =&gt; false;
  }
};
</code></pre>

<p>Looks pretty close to JavaScript with Flow types, doesn&rsquo;t it? The
biggest difference is that the <code>case</code> keyword was replaced with the <code>|</code>
character. Making the way we define and use union types look the same is
a subtle reminder to always pair union types with <code>switch</code> statements!
<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> Another difference: Reason handles exhaustiveness checking
out of the box. ðŸ™‚</p>

<p>What does the Reason output look like?</p>

<pre><code class="js">// Generated by BUCKLESCRIPT VERSION 3.0.1, PLEASE EDIT WITH CARE
'use strict';

function needsCancelButton(screen) {
  if (screen &gt;= 2) {
    return false;
  } else {
    return true;
  }
}
</code></pre>

<p><a href="https://reasonml.github.io/en/try.html?rrjsx=true&amp;reason=C4TwDgpgBAzgxgJwhAdlAvAKClAPlAGQHsBDAEwEsUBzAZUWRWzygGEiyIBRFYBEeklTN8tAK5w4EGDEGMA3JkwAbCMCgpkZGKxIopygEJjgwImnRQAFPCEoAXLAaoAlI4BGRIsowA+KADezDAA7hTAcAAW1raMLoEihKSUNHKoflB8YhCKOPjsnDx8As4W-lk5ieKS0rKlGQBmJMowlTgAvpjtikA"><strong>(Play with it on Try Reason â†’)</strong></a></p>

<p>Not bad! Telling Reason that our function was exhaustive let it optimize
the entire <code>switch</code> statement back down to a single <code>if</code> statement. In
fact, it gets even better: when we run this through <code>uglifyjs</code>, it
removes the redundant <code>true</code> / <code>false</code>:</p>

<pre><code class="js">"use strict";
function needsCancelButton(n){
  return !(n&gt;=2)
}
</code></pre>

<p>Wow! This is actually <strong>better</strong> than our initial, hand-written <code>if</code>
statement. Reason compiled what used to be a string literal
<code>'SuccessScreen'</code> to just the number <code>2</code>. Reason can do this safely
because custom-defined types in Reason <strong>aren&rsquo;t</strong> strings, so it doesn&rsquo;t
matter if the names get mangled.</p>

<p>Taking a step back, Reason&rsquo;s type system delivered on the promise of
types in a way Flow couldn&rsquo;t:</p>

<ul>
<li>We wrote high-level, expressive code.</li>
<li>The type checker gave us strong guarantees about our code&rsquo;s
correctness via exhaustiveness.</li>
<li>The compiler translated that all to tiny, performant output.</li>
</ul>


<p>I&rsquo;m really excited about Reason. ðŸ˜„ It has a delightful type system and
is backed by a decades-old optimizing compiler tool chain. I&rsquo;d love to
see more people take advantage of improvements in type systems to write
better code!</p>

<hr />

<h2>Appendix: Other Compile-to-JS Runtimes</h2>

<p>The above analysis only considered Flow + Babel and Reason. But then I
got curious about how other typed languages that compile to JavaScript
compare on the optimizations front:</p>

<h3>TypeScript</h3>

<p>Despite being a language <strong>and</strong> compiler, TypeScript maintains a
goal of compiling to JavaScript that closely resembles the source
TypesScript code. TypeScript has three language constructs for working
with exhaustiveness:</p>

<ol>
<li>union types (identical to the Flow unions that we&rsquo;ve been talking
about),</li>
<li><code>enum</code>s, which are sort of like definition a group of variable
constants all at once, and</li>
<li><code>const enum</code>s which are like <code>enum</code>s except that they&rsquo;re represented
more succinctly in the compiled output.</li>
</ol>


<p>TypeScript&rsquo;s union type over string literals are represented the same
way as Flow, so I&rsquo;m going to skip (1) and focus instead on (2) and (3).</p>

<p>TypeScript&rsquo;s <code>enum</code> and <code>const enum</code> are subtly different. Not having
used the language much, I&rsquo;ll refer you to <a href="https://www.typescriptlang.org/docs/handbook/enums.html">the TypeScript
documentation</a> to learn more about the differences. But for
sure, <code>const enum</code>s compile much better than normal <code>enum</code>s.</p>

<p>Here&rsquo;s what normal <code>enum</code>s look like in TypeScript&mdash;they&rsquo;re <strong>even
worse</strong> than unions of string literals:</p>

<pre><code class="js">var Screen_;
(function (Screen_) {
    Screen_[Screen_["LoadingScreen"] = 0] = "LoadingScreen";
    Screen_[Screen_["CodeEntryScreen"] = 1] = "CodeEntryScreen";
    Screen_[Screen_["SuccessScreen"] = 2] = "SuccessScreen";
})(Screen_ || (Screen_ = {}));
var impossible = function (x) {
    throw new Error('This case is impossible.');
};
var needsCancelButton = function (screen) {
    switch (screen) {
        case Screen_.LoadingScreen:
            return true;
        case Screen_.CodeEntryScreen:
            return true;
        case Screen_.SuccessScreen:
            return false;
        default:
            return impossible(screen);
    }
};
</code></pre>

<p><a href="https://www.typescriptlang.org/play/#src=enum%20Screen_%20%7B%0D%0A%20%20%20%20LoadingScreen%2C%0D%0A%20%20%20%20CodeEntryScreen%2C%0D%0A%20%20%20%20SuccessScreen%2C%0D%0A%7D%0D%0A%0D%0Aconst%20impossible%20%3D%20%3CT%3E(x%3A%20never)%3A%20T%20%3D%3E%20%7B%0D%0A%20%20throw%20new%20Error('This%20case%20is%20impossible.')%3B%0D%0A%7D%0D%0A%0D%0Aconst%20needsCancelButton%20%3D%20(screen%3A%20Screen_)%3A%20boolean%20%3D%3E%20%7B%0D%0A%20%20switch%20(screen)%20%7B%0D%0A%20%20%20%20case%20Screen_.LoadingScreen%3A%0D%0A%20%20%20%20%20%20return%20true%3B%0D%0A%20%20%20%20case%20Screen_.CodeEntryScreen%3A%0D%0A%20%20%20%20%20%20return%20true%3B%0D%0A%20%20%20%20case%20Screen_.SuccessScreen%3A%0D%0A%20%20%20%20%20%20return%20false%3B%0D%0A%20%20%20%20default%3A%0D%0A%20%20%20%20%20%20return%20impossible(screen)%3B%0D%0A%20%20%7D%0D%0A%7D"><strong>TypeScript Playground â†’</strong></a></p>

<p>So for normal <code>enum</code>s:</p>

<ul>
<li>It&rsquo;s not smart enough to optimize away the <code>impossible</code> call.</li>
<li>It keeps around a JavaScript object representing the collection of
enum values at run time, in a format that doesn&rsquo;t minify well.</li>
</ul>


<p>And then here&rsquo;s what <code>const enum</code>s look like&mdash;you can see that
TypeScript represents them under the hood without any sort of <code>Screen_</code>
object:</p>

<pre><code class="js">var impossible = function (x) {
    throw new Error('This case is impossible.');
};
var needsCancelButton = function (screen) {
    switch (screen) {
        case 0 /* LoadingScreen */:
            return true;
        case 1 /* CodeEntryScreen */:
            return true;
        case 2 /* SuccessScreen */:
            return false;
        default:
            return impossible(screen);
    }
};
</code></pre>

<p><a href="https://www.typescriptlang.org/play/#src=const%20enum%20Screen_%20%7B%0D%0A%20%20%20%20LoadingScreen%2C%0D%0A%20%20%20%20CodeEntryScreen%2C%0D%0A%20%20%20%20SuccessScreen%2C%0D%0A%7D%0D%0A%0D%0Aconst%20impossible%20%3D%20%3CT%3E(x%3A%20never)%3A%20T%20%3D%3E%20%7B%0D%0A%20%20throw%20new%20Error('This%20case%20is%20impossible.')%3B%0D%0A%7D%0D%0A%0D%0Aconst%20needsCancelButton%20%3D%20(screen%3A%20Screen_)%3A%20boolean%20%3D%3E%20%7B%0D%0A%20%20switch%20(screen)%20%7B%0D%0A%20%20%20%20case%20Screen_.LoadingScreen%3A%0D%0A%20%20%20%20%20%20return%20true%3B%0D%0A%20%20%20%20case%20Screen_.CodeEntryScreen%3A%0D%0A%20%20%20%20%20%20return%20true%3B%0D%0A%20%20%20%20case%20Screen_.SuccessScreen%3A%0D%0A%20%20%20%20%20%20return%20false%3B%0D%0A%20%20%20%20default%3A%0D%0A%20%20%20%20%20%20return%20impossible(screen)%3B%0D%0A%20%20%7D%0D%0A%7D"><strong>TypeScript Playground â†’</strong></a></p>

<ul>
<li>It uses numbers instead of strings.</li>
<li>It still uses a switch statement, instead of reducing to just an <code>if</code>
statement.</li>
</ul>


<h2>PureScript</h2>

<p>PureScript is another high-level language like Reason. Both Reason and
PureScript have data types where we can define unions with custom
constructor names. Despite that, PureScript&rsquo;s generated code is
significantly worse than Reason&rsquo;s.</p>

<pre><code class="js">"use strict";
var LoadingScreen = (function () {
    function LoadingScreen() {};
    LoadingScreen.value = new LoadingScreen();
    return LoadingScreen;
})();
var CodeEntryScreen = (function () {
    function CodeEntryScreen() {};
    CodeEntryScreen.value = new CodeEntryScreen();
    return CodeEntryScreen;
})();
var SuccessScreen = (function () {
    function SuccessScreen() {};
    SuccessScreen.value = new SuccessScreen();
    return SuccessScreen;
})();
var needsCancelButton = function (v) {
    if (v instanceof LoadingScreen) {
        return true;
    };
    if (v instanceof CodeEntryScreen) {
        return true;
    };
    if (v instanceof SuccessScreen) {
        return false;
    };
    throw new Error("Failed pattern match at Main line 10, column 1 - line 10, column 39: " + [ v.constructor.name ]);
};
</code></pre>

<ul>
<li>It&rsquo;s generating ES5 classes for each data constructor.</li>
<li>It compiles pattern matching to a series of <code>instanceof</code> checks.</li>
<li>Even though it <strong>knows</strong> the match is exhaustive, it still emits a
<code>throw</code> statement in case the pattern match fails!</li>
</ul>


<p>Admittedly, I didn&rsquo;t try that hard to turn on optimizations in the
compiler. Maybe there&rsquo;s a flag I can pass to get this <code>Error</code> to go
away. But that&rsquo;s pretty disappointing, compared to how small Reason&rsquo;s
generated code was!</p>

<h2>Elm</h2>

<p>I list Elm in the same class as Reason and PureScript. Like the other
two, it lets us define custom data types, and will automatically warn
when us pattern matches aren&rsquo;t exhaustive. Here&rsquo;s the code Elm
generates:</p>

<pre><code class="js">var _user$project$Main$needsCancelButton = function (page) {
  var _p0 = page;
  switch (_p0.ctor) {
    case 'LoadingScreen':
      return true;
    case 'CodeEntryScreen':
      return true;
    default:
      return false;
  }
};
var _user$project$Main$SuccessScreen = {ctor: 'SuccessScreen'};
var _user$project$Main$CodeEntryScreen = {ctor: 'CodeEntryScreen'};
var _user$project$Main$LoadingScreen = {ctor: 'LoadingScreen'};
</code></pre>

<ul>
<li>It&rsquo;s using string literals, much like Flow and TypeScript.</li>
<li>It&rsquo;s smart enough to collapse the last case to just use <code>default</code>
(at least it doesn&rsquo;t <code>throw</code> in the <code>default</code> case!)</li>
<li>The variable names are long, but these would still minify well.</li>
</ul>


<p>It&rsquo;s interesting to see that even though Reason, PureScript, and Elm all
have ML-style datatypes, Reason is the only one that uses an integer
representation for the constructor tags.</p>

<!-- vim:tw=72
-->

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>2FA: two-factor authentication<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>&ldquo;Always&rdquo; is a very strong statement. Please use your best judgement. But know that if you&rsquo;re not using a <code>switch</code>, you&rsquo;re trading off the burden of exhaustiveness &amp; correctness from the type checker to the programmer!<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Even though TypeScript defines both a language <strong>and</strong> a compiler for that language, in practice it&rsquo;s not much different from Flow here. A goal of the TypeScript compiler is to generate JavaScript that closely resembles the original TypeScript, so it doesn&rsquo;t do compile-time optimizations based on the types.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>More than being a nice reminder, it makes it easy to copy / paste our type definition as boilerplate to start writing a new function!<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Exhaustiveness in Flow]]></title>
    <link href="https://blog.jez.io/flow-exhaustiveness/"/>
    <updated>2018-04-15T20:02:26-07:00</updated>
    <id>https://blog.jez.io/flow-exhaustiveness</id>
    <content type="html"><![CDATA[<p>Compared to some other languages, <a href="https://flow.org/">Flow</a>&rsquo;s story around exhaustiveness
checking within <code>if / else</code> and <code>switch</code> statements leaves something to
be desired. By default, Flow doesn&rsquo;t do any exhaustiveness checks! But
we <strong>can</strong> opt-in to exhaustiveness checking one statement at a time.</p>

<!-- more -->


<p>In this post, we&rsquo;ll discover from the ground up how Flow&rsquo;s
exhaustiveness checking behaves. But if you&rsquo;re just looking for the
result, here&rsquo;s a snippet:</p>

<h2>TL;DR</h2>

<pre><code class="js">type A = {tag: "A"};
type B = {tag: "B"};
type AorB = A | B;

const absurd = &lt;T&gt;(x: empty): T =&gt; {
  throw new Error('This function will never run!');
}

const allGood = (x: AorB): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else if (x.tag === "B") {
    return "In branch B";
  } else {
    return absurd(x);
  }
}

const forgotTagB = (x: AorB): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else {
    // B. This type is incompatible with the expected param type of empty.
    return absurd(x);
  }
}
</code></pre>

<h2>How Exhaustiveness Behaves in Flow</h2>

<p><a href="https://flow.org/try/#0PTAEAEDMBsHsHcBQiQrACQKYCdOnngBYCGAbnsaAC4CeADngOQCCs2AQo-gJZWHXxYoUsWzdiAOyoBnNIloNQzUAF5QAbyrEA5gC5QAImYGAvgG559PO1Uatew+1MWFeVh1vKAPqHYXEAMawEtJUoJASAIy2ABQAHvru7ACU+qFiEtqqAHwaiKCg3JDxAHT2qipqRgbJ6vkFoLhUAK7YEoYAku0ARtiSAfzGFgUmoJjQ0nh1DY2YLW2dPX0SA74Gw6AmiFtyIErQ0Pjjh5IAJqDasLCnADSg3c1h8CRhRUegxKfnlBKY8KABYiTAD8aFAADE2GM4sQALZ0aCYO4EWaQYgBKhQvgUbqwcjhbiI0AAPWoQmx93GCF0cksigAwrZNDp9AZ6c46W42Ow2Iy1N5fKAfPT-EEQmEIgAmWIJJTc3mpUDpbiZHJ5ApFUrlSpVYzJdUNJqtdoGLr3ZarIb1UbjSYGgpGhampb9fhODZbHaoPYAdWIvA+SswYtuhTCrgBhGDAGtpABCMEAFRejGklMBzTtKMzmG+AOIVAGAFpiAdQIxbZguL1XSVdmAfS9CpB3rDiNG8Jh0fwayt+Jg4gjuAFeKDUGCAKIAJSnAHkp-oZkvl6BADCkgABSQBtpIA4P6VVAy2hKoGT3DTEdPhRWsHhBe43SJ8F4-EkhXh0GHvGgNCLjt+52aEinJgkAqrmdZiqE4QSAAzDKiTytg9KKsqqoqLk0zNlqOgVLqNT2rM8wmmavaWus1pjBMeBvFhWQ6o4eEYQ6czGos5qumsHrbMg3pgAAClG8B3NIQi8KmsywiqpwqlkmbUE2BCMLgoASLAYRBOQB4fGWFKApM0h1nsAAycxiZ85wUr8-yMPSXC6ZgNLjns05zguK5uQUG47nuB5HieZ5WIUaYqkEN5UHeD5Ph87TcG+H5UF+P7MW0uagABQEgX+4HBJBEQACxwXKHAKmk+7SWqGGanEZTYXR1T6oxBEsc6bF9koZEjBRdrUVV2qVPR9X1ExhGsSRbrtZsnVUS2NE4YY7IDTMv4jRa-DspxXrAGCfoBpQkwhiUB1hnuhKHHwKqxnJBattw2iEGES1pcBoGnAmezsI8RyMPi6Uqrw4w0ACeI4ClpanVG+Z6UeuhnRI0bSQA+miAT2fWoCNldKL0swAByoCnCJaZmYG6XEM00BqUCSL3B9QLRhCcD-JioC8XOABqE6XU8eCAhIjBhNocxycDDmbYE2UShIACsBVJMV3llWhBqVdVtF9XV+FLc1o1tR6k3NqAM21U4C2GklREuq17rkZW+uG2r80a2by3sWt1uUfh8T6Jg8K0MkGwFHw2AIMpfygBO2BB9gMSMMQ3TSK0pyMH71pcajyZMIHweWWHEdsFw76-B8uL4o+Za-BpjQAXc3TBqTkxgqJaYqWEdCwNI0jhXgTMQfuzQYoGIjQM0eCwC2EYVj7NCMGCMQGOnSmiHgKnCKWw9Be0FLe3QtBBlQNSox0LYop8sDb3JF50AWVA4O0mAaTQzzA8iVbnJMXeEBeOCR6AsKYO3OiYAbkfPAkA2CXHDEIImFlQ52XCFCekItkA9yggANhlghJCJVNKKwqsUHqNU1Z6kdsNLWK0dZuy6tNfBqsqjG2IU1YiZCrYdRtg1PY9JfIf38ooC8wVryXzCvePAj4+BjEnnWGYnsxHbxoMnGYmd-jZ3DpHaOsd47YETnIzYqceL02DtfA4aZZIGCwDQO4HQ4FpUDPSOMoAADKQgLFBDJqcXmLcg74j4FdM6aZpAiNWPAIE0ISCZjCuQEoBhUbvXDFw0AAjr4LAvNId8t14oA0kCpGgZUmY5mrrXHMYc7GGRVGpfh0B-QhBFqAXIKkiwARzKcIsA46C4HbtwbK+gJyDmDNfb47QgQd20BIX+UhQBQkgABDE7T2iAjLGcS8oQuyv2IP8F8zTWkd2CAZTavpuYvhAnEc+aZugAyRpiTSFJ4k30vEzSgUZoAMGwOESZYVgiILBDHOOCcuAXgsnCbm15YTBC-KlSY5xKyPyUqAp5PjnkrFeRII8kInkDjhAiFGew7pUDoNIXQIASABGjAAkoJBpAdgOCUMBwBL6EoAcAUgsBuCNIAAwlAAOwlEiMAfGARpDAAACIFmIEWVmjLTgkqoLCaAABiUgug1EJzFuKIu6jzhqAADyJmyFIrevt9CJnKvUBRId-jKLYKor5Gik4WHMEg8WUE2XoKKohZCpVULoXqMrXquETZDQYRbUiusbbdRVrNAwdCGqa0YexZhE1g1UNDbVB2kanakJduNG07sU3DQVRo+IWjPSDSXEqnKEgAAcTqeQuqwQrD1Go8GJsIQxItUaA2DAzXrEN3r+r0KdNGy2HbWFFvYZw35AVeFXlCp3HgojN7dIxClS+fRYTUACqPaRtAJGmxzZa04+b1pAA"><strong>Read on flow.org/try/</strong></a></p>

<p>Here we have a type <code>AorB</code> with two variants;</p>

<pre><code class="js">type A = {tag: "A"};
type B = {tag: "B"};
type AorB = A | B;

const fn1 = (x: AorB): string =&gt; {
  if(x.tag === "A"){
    return "In branch A";
  } else {
    return "In branch B";
  }
}
</code></pre>

<p>All well and good, but what if we add a new case?
For example, what if we take the snippet above and add this:</p>

<pre><code class="js">type C = {tag: "C"};
type AorBorC = A | B | C;

const fn2 = (x: AorBorC): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else {
    return "In branch B";
  }
}
</code></pre>

<p>Wait a second, it type checks!</p>

<p>That&rsquo;s because we used a catch-all <code>else</code> branch. What if we make each
branch explicit?</p>

<pre><code class="js">// ERROR:                 â”Œâ”€â–¶ï¸Ž string. This type is incompatible with an implicitly-returned undefined.
const fn3 = (x: AorBorC): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else if (x.tag === "B") {
    return "In branch B";
  }
}
</code></pre>

<p>Phew, so it&rsquo;s reminding us that we&rsquo;re not covering all the cases.
Let&rsquo;s add the new <code>C</code> case:</p>

<pre><code class="js">// ERROR:                 â”Œâ”€â–¶ï¸Ž string. This type is incompatible with an implicitly-returned undefined.
const fn4 = (x: AorBorC): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else if (x.tag === "B") {
    return "In branch B";
  } else if (x.tag === "C") {
    return "In branch C";
  }
}
</code></pre>

<p>Hmm: it still thinks that we might return <code>undefined</code>, even though we&rsquo;ve
definitely covered all the cases&hellip; ðŸ¤”</p>

<p>What we <strong>can</strong> do is add a default case, but ask Flow to <strong>prove</strong> that
we can&rsquo;t get there, using Flow&rsquo;s <code>empty</code> type:</p>

<pre><code class="js">const fn5 = (x: AorBorC): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else if (x.tag === "B") {
    return "In branch B";
  } else if (x.tag === "C") {
    return "In branch C";
  } else {
    (x: empty);
    throw new Error('This will never run!');
  }
}
</code></pre>

<p>The <code>throw new Error</code> line above will never run, because it&rsquo;s not
possible to construct a value of type <code>empty</code>.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> (&ldquo;There are no
values in the empty set.&rdquo;)</p>

<p>If we adopt this pattern everywhere, we&rsquo;d see this error message if we
forgot to add the new case for <code>C</code>:</p>

<pre><code class="js">const fn6 = (x: AorBorC): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else if (x.tag === "B") {
    return "In branch B";
  } else {
    // C. This type is incompatible with empty.
    (x: empty);
    throw new Error('absurd');
  }
}
</code></pre>

<p>Flow tells us &ldquo;Hey, I found a C! So I couldn&rsquo;t prove that this switch
was exhaustive.&rdquo;</p>

<p>But this pattern is slightly annoying to use, because ESLint complains:</p>

<pre><code>no-unused-expressions: Expected an assignment or function call and instead saw an expression.
</code></pre>

<p>We can fix this by factoring that <code>empty ... throw</code> pattern into a
helper function:</p>

<pre><code class="js">// 'absurd' is the name commonly used elsewhere for this function. For example:
// https://hackage.haskell.org/package/void-0.7.1/docs/Data-Void.html#v:absurd
const absurd = &lt;T&gt;(x: empty): T =&gt; {
  throw new Error('absurd');
};

const fn7 = (x: AorBorC): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else if (x.tag === "B") {
    return "In branch B";
  } else if (x.tag === "C") {
    return "In branch C";
  } else {
    return absurd(x);
  }
}

const fn8 = (x: AorBorC): string =&gt; {
  if(x.tag === "A") {
    return "In branch A";
  } else if (x.tag === "B") {
    return "In branch B";
  } else {
    // C. This type is incompatible with the expected param type of empty.
    return absurd(x);
  }
}
</code></pre>

<p>So there you have it! You can put that helper function (<code>absurd</code>) in a
file somewhere and import it anywhere. You could even give it a
different name if you want! I&rsquo;ve been using this pattern in all the Flow
code I write these days and it&rsquo;s been nice to rely on it when doing
refactors.</p>

<!-- vim:tw=72
-->

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Of course, this presumes that Flow&rsquo;s type system is sound, which it isn&rsquo;t. It&rsquo;s possible to accidentally inhabit <code>empty</code> if you use <code>any</code>! Moral of the story: be <em>very</em> diligent about eradicating <code>any</code>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lenses & Composition]]></title>
    <link href="https://blog.jez.io/lens-composition/"/>
    <updated>2018-02-05T23:07:37-08:00</updated>
    <id>https://blog.jez.io/lens-composition</id>
    <content type="html"><![CDATA[<p></p>




<!-- more -->


<p>A lens is really just a function <code>a -&gt; b</code> that we represent
backwards<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> and with an extra <code>Functor f</code> parameter lying
around:</p>

<pre><code>type Lens' a b = Functor f =&gt; (b -&gt; f b) -&gt; (a -&gt; f a)
</code></pre>

<p><strong>What does this mean for function composition?</strong></p>

<!-- more -->


<p>Normal function composition looks like this:</p>

<pre><code class="haskell">(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; c)

f :: a -&gt; b
g :: b -&gt; c

g . f :: (a -&gt; c)
</code></pre>

<p>We often have to read code that looks like this:</p>

<pre><code class="haskell">g . f $ x
</code></pre>

<p>This means &ldquo;start with <code>x</code>, then run <code>f</code> on it, and run <code>g</code> after that.&rdquo;
This sentence reads opposite from how the code reads!</p>

<p>What about for lenses? Here we have <code>f'</code> and <code>g'</code> which behave similarly
in some sense to <code>f</code> and <code>g</code> from before:</p>

<pre><code class="haskell">f' :: Functor f =&gt; (b -&gt; f b) -&gt; (a -&gt; f a)
--  â‰ˆ a -&gt; b
g' :: Functor f =&gt; (c -&gt; f c) -&gt; (b -&gt; f b)
--  â‰ˆ b -&gt; c

f' . g' :: Functor f =&gt; (c -&gt; f c) -&gt; (a -&gt; f a)
--       â‰ˆ a -&gt; c
</code></pre>

<p>In the lens world, <code>^.</code> behaves kind of like a flipped <code>$</code> that turns
lenses into getters, which lets us write code like this:</p>

<pre><code class="haskell">x ^. f' . g'
</code></pre>

<p>This means &ldquo;start with <code>x</code>, then get <code>f'</code> from it, then get <code>g'</code> after
that.&rdquo; The sentence reads just like the code!</p>

<p>This is pretty cool, because it means that lenses (which are
&ldquo;functional&rdquo; getters) read almost exactly like property access (which
are &ldquo;imperative&rdquo; getters). Same concise syntax, but with an elegant
semantics.</p>

<!-- vim:tw=72
-->

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m exaggerating a bit here ðŸ˜… To see what I <em>really</em> mean, see <a href="/lens-intuition">this post</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Intuition on Lenses]]></title>
    <link href="https://blog.jez.io/lens-intuition/"/>
    <updated>2018-02-05T21:09:43-08:00</updated>
    <id>https://blog.jez.io/lens-intuition</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working on a small project in Haskell recently that uses the
<a href="https://hackage.haskell.org/package/wreq">wreq</a> library. It&rsquo;s an HTTP client library that exposes most of its
functionality through lenses. Using this library is my first time really
using lenses pervasively, so I&rsquo;ve spent some time trying to understand
how lenses really work.</p>

<!-- more -->


<p>Lenses try to bring the concept of getters and setters into a functional
setting. Here, &ldquo;functional&rdquo; means that lenses prioritize composition
(chaining one lens after another) and immutability (returning a new
data structure<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> instead of mutating the old one in place).</p>

<p>In a functional setting, if we have a type <code>s</code> and we want to get some
field of type <code>a</code> from it, a getter is just a function <code>s -&gt; a</code>.</p>

<p>Similarly, a setter that updates that field has the type <code>s -&gt; a -&gt; s</code>
which takes the old <code>s</code> and slots the <code>a</code> into it, giving us back a new
<code>s</code>.</p>

<p>Let&rsquo;s see if we can build up some intuition, starting with these types
and ending with the type of <code>Lens'</code> from the lens library:</p>

<pre><code class="haskell">type Lens' s a = forall f. Functor f =&gt; (a -&gt; f a) -&gt; (s -&gt; f s)
</code></pre>

<p>In particular, let&rsquo;s start with our getter:</p>

<pre><code class="haskell">fn :: s -&gt; a
</code></pre>

<p>The first thing we can do is convert it to continuation-passing style
(CPS). In CPS form, a function throws it&rsquo;s return value to a
user-specified callback function (or continuation) instead of returning
its value directly. So our <code>s -&gt; a</code> becomes:</p>

<pre><code class="haskell">fn :: (a -&gt; r) -&gt; s -&gt; r
</code></pre>

<p>After we&rsquo;re done computing an <code>a</code> from the <code>s</code> we were given, we throw
it to the continuation of type <code>a -&gt; r</code>. We then take <strong>that</strong> result and
return it. I like to put parens around the second function:</p>

<pre><code class="haskell">fn :: (a -&gt; r) -&gt; (s -&gt; r)
</code></pre>

<p>But it&rsquo;s kind of hard to do anything with this, because <code>r</code> is
completely arbitrary. It&rsquo;s chosen by whoever calls us, so we have no
information about what can be done on an <code>r</code>. What if we instead require
that the continuation result be a Functor?</p>

<pre><code class="haskell">fn :: Functor f =&gt; (a -&gt; f r) -&gt; (s -&gt; f r)
</code></pre>

<p>And while we&rsquo;re at it, it was kind an arbitrary stipulation that the <code>f
r</code> of the continuation&rsquo;s callback be the same as the <code>f r</code> of our
function&rsquo;s result type, so let&rsquo;s relax that:</p>

<pre><code class="haskell">fn :: Functor f =&gt; (a -&gt; f b) -&gt; (s -&gt; f t)
</code></pre>

<p>This relaxation makes sense as long as we know of some function with
type <code>b -&gt; t</code>, because then we could</p>

<ul>
<li>take the <code>s</code>,</li>
<li>apply our <code>s -&gt; a</code> getter to get an <code>a</code>,</li>
<li>throw this to the <code>a -&gt; f b</code> continuation to get an <code>f b</code>, and</li>
<li><code>fmap</code> our <code>b -&gt; t</code> function over this to get an <code>f t</code>.</li>
</ul>


<p>In general, we might not know of some <code>b -&gt; t</code> function. But remember
that we do have our <code>s -&gt; a -&gt; s</code> function! So if we choose <code>b = a</code> and
<code>s = t</code>, then we get:</p>

<pre><code class="haskell">fn :: Functor f =&gt; (a -&gt; f a) -&gt; (s -&gt; f s)
</code></pre>

<p>With a function like this, we can</p>

<ul>
<li>take the <code>s</code>,</li>
<li>apply our <code>s -&gt; a</code> getter to get an <code>a</code>,</li>
<li>throw our <code>a</code> to the <code>a -&gt; f a</code> continuation to get an <code>f a</code>,</li>
<li>partially apply our <code>s -&gt; a -&gt; s</code> setter with the <code>s</code> we were given,

<ul>
<li>(so we have an <code>a -&gt; s</code> now)</li>
</ul>
</li>
<li><code>fmap</code> this <code>a -&gt; s</code> function over the <code>f a</code> to get an <code>f s</code></li>
</ul>


<p>And we&rsquo;ve arrived at the type of <code>Lens'</code>! What really happened here was
we marked the interesting<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> part of our data structure with
a Functor. So if we choose an interesting Functor instance, it&rsquo;ll act on
that point.</p>

<p>What if the Functor we choose is <code>Const a</code>? Well, then it&rsquo;s on us to
provide an <code>a -&gt; f a</code> continuation. Since we&rsquo;ve chosen <code>f = Const a</code> we
have to come up with a function with type <code>a -&gt; Const a a</code>. This is a
special case of the <code>Const</code> constructor:</p>

<pre><code class="haskell">Const :: forall b. a -&gt; Const a b
</code></pre>

<p>So our continuation remembers the <code>a</code> it was given. After the last step,
we&rsquo;ll have a <code>Const a s</code>, which we can call <code>getConst</code> on to give us
the <code>a</code> we stashed. So by choosing <code>Const</code>, our lens acts like a getter!</p>

<p>What if the Functor we choose is <code>Identity</code>? Now we have to provide a
function <code>a -&gt; Identity a</code>. At this point, you probably guessed this
makes our lens a setter. If we&rsquo;re trying to use a setter, then we&rsquo;ll
also have access to some new <code>y :: a</code> that we want to use to slot into
our <code>s</code>. Let&rsquo;s see what happens if we make this our continuation:</p>

<pre><code class="haskell">inj :: a -&gt; Identity a
inj x = Identity y
</code></pre>

<p>The <code>x :: a</code> is the old value of <code>x</code>. By dropping <code>x</code> on the floor and
returning <code>y</code> instead, we&rsquo;ve slotted <code>y</code> into our <code>s</code>. Remember
that above we took the <code>f a</code> and our setter <code>s -&gt; a -&gt; s</code>, partially
applied it to get <code>a -&gt; s</code>, and <code>fmap</code>&rsquo;d this over the <code>f a</code>. Since our
continuation now holds a wrapped up <code>y :: a</code>, we&rsquo;ll reconstruct a new
<code>s</code> using <code>y</code>. Great!</p>

<h2>More Resources</h2>

<p>These are some resources that helped make lenses less intimidating for
me:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=cefnmjtAolY">Lenses, Folds, and
Traversals</a> (video)

<ul>
<li>by Edward Kmett, the author of the lens library</li>
<li>highly technical, long, exhaustive</li>
</ul>
</li>
<li><a href="https://hackage.haskell.org/package/lens-4.16/docs/Control-Lens-Getter.html">Control.Lens.Getter</a> (hackage)

<ul>
<li>in particular, the first few lines of the intro paragraph</li>
<li>also: <code>(^.)</code> to see where the <code>f</code> becomes <code>Const a</code></li>
</ul>
</li>
<li><code>#haskell</code> on Freenode

<ul>
<li>Special thanks to <code>johnw_</code> and <code>dminuoso</code>!</li>
</ul>
</li>
</ul>


<p>Lenses seem intimidating at first, but in the end they&rsquo;re just a really
cool uses of functions. We use nothing more exotic here than the Functor
type class and a couple of Functor instances, and in return we get such
concise code!</p>

<!-- vim:tw=72
-->

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>It&rsquo;s common to think that &ldquo;immutable&rdquo; means &ldquo;copy the entire thing&rdquo; and then change the parts you care about. But if you start with <strong>all data</strong> being immutable, then you only need to allocate new memory for the subcomponents of your data structure that <strong>actually</strong> changed. Everything else can be shared by the old and the new.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>In the same way that glass lenses focus light on a point, functional lenses focus a data structure on a point! Isn&rsquo;t it neat how that name works out? It&rsquo;s certainly a cooler name than &ldquo;generalized getter/setter <a href="https://www.youtube.com/watch?v=pD_imYhNoQ4">wombo combo</a>&rdquo; (video, language warning).<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
