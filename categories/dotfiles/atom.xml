<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dotfiles | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/dotfiles/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2020-01-05T04:02:22-05:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starter Zsh Setup]]></title>
    <link href="https://blog.jez.io/starter-zsh-setup/"/>
    <updated>2016-01-02T23:14:16-06:00</updated>
    <id>https://blog.jez.io/starter-zsh-setup</id>
    <content type="html"><![CDATA[<p>Zsh has given me so much mileage with respect to efficiency at the command line.
Looking back I&rsquo;m a little sad I didn&rsquo;t switch to it sooner. One of the reasons
why it took so long was that I didn&rsquo;t know where to start; with this in mind,
I&rsquo;ve collected some of the zsh-specific bits of my dotfiles into one place to
help people hit the ground running.</p>

<!-- more -->


<p>To cut to the chase, you can find my <a href="https://github.com/jez/starter-zshrc">starter zshrc</a> on GitHub. It
contains usage information as well as loads of inline comments to give you a
line-by-line summary.</p>

<p>Note: it&rsquo;s an <em>starter</em> zshrc. What I mean by this is that it&rsquo;s more of
a skeleton. It&rsquo;s been crafted with the assumption that you&rsquo;re coming from bash
and you already have some bash config that you&rsquo;re weary to part with. The
content here aims to be minimally invasive, and since zsh is largely compatible
with bash, the rest of your config should fit right in.</p>

<h2>Going Further</h2>

<p>I have even more zsh-specific and general configuration nuggets in my personal
dotfiles, which are <a href="https://github.com/jez/dotfiles">also on GitHub</a>. I add to them nearly every day,
and I&rsquo;m pretty fond of them if I do say so myself. You might want to read
<a href="http://blog.jez.io/2015/03/10/noteworthy-dotfile-hacks/">Noteworthy Dotfile Hacks</a> if you&rsquo;re looking for a quick overview of some
snippets and features I&rsquo;ve collected into my dotfiles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noteworthy Dotfile Hacks]]></title>
    <link href="https://blog.jez.io/noteworthy-dotfile-hacks/"/>
    <updated>2015-03-10T00:22:33-05:00</updated>
    <id>https://blog.jez.io/noteworthy-dotfile-hacks</id>
    <content type="html"><![CDATA[<p>I have hundreds of files and folders in my dotfiles repo, and nearly 1000
commits&mdash;there are quite a few hidden gems buried in there that generally don&rsquo;t
get to see the light of day. Rather than wander aimlessly through them, let me
give you the guided tour.</p>

<!-- more -->


<p>I often tell people &ldquo;oh, and you can also go check out my dotfiles repository
for more cool configurations&rdquo; when I&rsquo;m giving out dotfiles advice. If someone
gave me this advice, I know I wouldn&rsquo;t follow up, even if I had the utmost awe
for the recommender. Drudging through config files isn&rsquo;t all that fun, even
though they can do fun things. Why not get rid of the drudgery?</p>

<p>This post is designed to bring the coolest parts of my dotfiles to the top. It&rsquo;s
organized by topic, so feel free to skip around.</p>

<p><strong>Note</strong>: throughout this post, I&rsquo;ll be linking to my dotfiles <em>at a specific
commit</em> on GitHub. While this solves the problem of line-level links breaking on
updates, it means that you&rsquo;ll almost certainly be looking at out-dated code.
Make sure to check out the corresponding file on the <code>master</code> branch for the
most up-to-date version.</p>

<p>Also, I <a href="/2015/03/09/getting-started-with-rcm/">just wrote</a> about one of my biggest dotfile hacks: using rcm
to keep my dotfiles in sync across machines. Be sure to give it a read if you&rsquo;re
running into that problem.</p>

<h2><code>tmux</code></h2>

<p>I have a lot of cool stuff going on in my <code>.tmux.conf</code></p>

<ul>
<li>I <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L1-L4">bind the prefix key to <code>C-f</code></a>, something which I haven&rsquo;t seen
many people do.  I&rsquo;ve never had a problem with it conflicting with commonly
used shortcuts, and it&rsquo;s incredibly easy to press (compared with the common
options of <code>C-a</code> and <code>C-b</code>)</li>
<li>I integrate with two Vim plugins:

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L18-L27">vim-tmux-navigator</a>, which lets you jump between vim
splits and tmux splits as if they were the same thing</li>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L48-L49">tmuxline</a>, which makes my tmux status bar look just like Vim with
vim-airline (it even pulls down the colors from your Vim configuration!).</li>
</ul>
</li>
</ul>


<h2><code>dircolors</code></h2>

<p>I use the GNU <code>dircolors</code> command to change the colors output by the <code>ls</code>
program. After running <code>brew install coreutils</code> on OS X, I&rsquo;m able to see the
colors thanks to <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/dircolors">this file</a> and <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/host-Jacobs-MacBook-Air/util/host.sh#L19-L21">this snippet</a> in my zshrc.</p>

<p><a class="image-link" href="href="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png">https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png</a>&#8221;><img class="<a" src="href="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png">https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png</a>&#8221;></a></p>

<p>(image from the <a href="https://github.com/seebi/dircolors-solarized">dircolors-solarized</a> repository on GitHub)</p>

<h2><code>gitconfig</code></h2>

<p>I talked about this <a href="/2015/01/16/mastering-git-log-for-collaboration/">in a previous post</a>, but I have some <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/gitconfig#L20-L24">special
settings</a> in my global gitconfig for adding colored decoration to git
log commands. Here&rsquo;s a screenshot from that post:</p>

<p><a class="image-link" href="/images/glla-tartanhacks.png"><img src="/images/glla-tartanhacks.png"></a></p>

<h2><code>aklog cs.cmu.edu</code></h2>

<p>For my friends at CMU, I have <code>aklog cs.cmu.edu</code> in <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-andrew/util/host.zshenv#L1">my ~/.zshenv</a>,
which gets run even when you log in interactively (like what happens when you
<code>scp</code> something), so that I can copy files from my local machine to the SCS AFS
space, which is useful for doing things like making handins. Note that the file
linked to above is a host-specific file that only &ldquo;exists&rdquo; for me on Andrew
machines. You can read more about my setup <a href="/2015/03/09/getting-started-with-rcm/">in my
previous post</a>.</p>

<h2>zsh-syntax-highlighting</h2>

<p>I use a <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/misc.zsh#L79-L80">zsh plugin</a> to syntax highlight my commands as I type them
on the command line, similar to how the fish shell does it. It does various
things, like coloring the command red or green based on whether it exists,
underlines filenames that exist, highlights filenames that might be misspelled
in yellow, highlights built-ins like <code>if</code> and <code>for</code> in orange, etc.</p>

<p>Here are some examples from my setup:</p>

<p><a class="image-link" href="/images/zsh-syntax-highlighting-for-loop.png"><img src="/images/zsh-syntax-highlighting-for-loop.png"></a></p>

<p><a class="image-link" href="/images/zsh-syntax-highlighting.png"><img src="/images/zsh-syntax-highlighting.png"></a></p>

<h2>Automatic Dotfile Updates</h2>

<p>I wrote a pretty robust script that reminds me to update my dotfiles and my
system regularly. All it does is remind me to check for system updates once
every 24 hours, but it works so well that I had updated my system <code>bash</code> version
before I even read about Shell Shock!</p>

<p>The relevant links are <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/auto-update.sh">here</a> for the core script that I <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/zshrc#L44-L45">source in
my zshrc</a>, and then the following host specific links:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/util/host.sh#L69-L86">here</a> for my MacBook</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-ghost.zimmerman.io/util/host.sh#L24-L31">here</a> for my Ubuntu VPS</li>
</ul>


<h2>Shell aliases</h2>

<p>I&rsquo;d like to think that my whole <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh"><code>aliases.sh</code></a> file is golden, but if
you&rsquo;re looking for some specific things I like about it, check out my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L75-L86"><code>git log</code></a>
aliases, which I wrote about <a href="/2015/01/16/mastering-git-log-for-collaboration/">here</a>, and my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L44-L45"><code>chromemem</code></a> alias, which I wrote about <a href="/2014/12/29/google-chrome-a-memory-hog/">here</a>.</p>

<h2>Ruby Virtualenvs</h2>

<p>I wrote about how I use <a href="/2014/12/22/ruby-virtualenvs/">Python Virtualenvs to sandbox Ruby
gems</a>, a post in which I dropped some snippets that you can
use to configure virtualenvwrapper to work with Ruby projects. I actually went
ahead and <a href="https://github.com/jez/dotfiles/tree/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/virtualenvs">fed those files right into rcm</a>, so they&rsquo;ll always be available if I
ever get a new laptop.</p>

<h2><code>ssh</code></h2>

<p>My username on every machine I ssh to for school is <code>jezimmer</code>, but there are
countless servers I can ssh into (7 for <code>unix.andrew.cmu.edu</code>, 99+ for
<code>ghc*.ghc.andrew.cmu.edu</code>, 10 for 15-213, the list goes on). <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/ssh/config#L7-L19">These
lines</a> enable me to ssh to any of those machines with just a
hostname, and the username is assumed to be <code>jezimmer</code>.</p>

<h2>iTerm2</h2>

<p>There&rsquo;s not much to show for this one, but in Preferences > General of iTerm2,
you can opt to load your iTerm2 preferences from a specific location. I&rsquo;ve set
this to <code>/Users/jake/.dotfiles</code>, which means that my iTerm2 settings are always
written to my <code>.dotfiles/</code> directory. If I ever make changes to iTerm2, they get
propagated as changes that Git picks up on and which I subsequently check into
Git history.</p>

<h2>Vim</h2>

<p>I&rsquo;m in love with my Vim setup. If you&rsquo;re looking for help getting started
configuring Vim, you should checkout the <a href="https://github.com/jez/vim-as-an-ide">Vim plugins workshop I put
together</a>, which gets you started with a &ldquo;fully-configured&rdquo; Vim
setup. Once you think you&rsquo;ve &ldquo;mastered&rdquo; that and you&rsquo;re ready for more, here are
a list of things I&rsquo;m proud of in my <code>.vimrc</code>:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L65-L67"><code>set breakindent</code></a> A feature new in Vim 7.4, this allows you to
align wrapped text at the same indentation level as the preceding text.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L100-L106">these mappings</a>, which let me move around (move up and down in
particular) in long lines just as if they were short.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L90-L91">this mapping</a>, which lets me open Vim help pages in new tabs</li>
</ul>


<h2>Other</h2>

<p>I&rsquo;ve only highlighted a fraction of my configuration files, but I think I&rsquo;ve
managed to capture a good portion of them. If you thought that one of these
snippets was useful, are having trouble getting something to work, or have
something interesting to share, leave a comment below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with RCM]]></title>
    <link href="https://blog.jez.io/2015/03/09/getting-started-with-rcm/"/>
    <updated>2015-03-09T18:30:39-05:00</updated>
    <id>https://blog.jez.io/2015/03/09/getting-started-with-rcm</id>
    <content type="html"><![CDATA[<p>I recently rewrote most of my dotfiles to clean them up and in the process
decided to take a renewed look at using <a href="https://robots.thoughtbot.com/rcm-for-rc-files-in-dotfiles-repos">rcm</a>&rsquo;s array of features to manage
syncing my dotfiles across multiple servers and hosts.</p>

<!-- more -->


<h2>Installation and Usage</h2>

<p>Thoughbot has written some excellent documentation for rcm, including a whole
set of man pages and a <a href="https://robots.thoughtbot.com/rcm-for-rc-files-in-dotfiles-repos">nice blog post</a> that runs through its core
features. As far as <a href="https://github.com/thoughtbot/rcm#installation">installation</a> goes, there&rsquo;s a package for just
about every platform on top of the standard autotools, so you should have no
problem getting up and running.</p>

<p>Rather than just run through the same stuff, I&rsquo;m going to walk through some of
the places where my experience varied from the examples given in the
documentation.</p>

<h2>Background</h2>

<p>I&rsquo;ve already been using rcm for a while now, though my setup was a little
non-standard as far as rcm installations go; instead of using the system built
into rcm for managing host-specific configuration files, I had <a href="https://github.com/jez/dotfiles/blob/6beee7eb426a21102da174f65d1a706bedc28b57/zshrc#L135-L204">huge case
statements</a> littering my config files. After starting to get a little
traffic for <a href="https://github.com/jez/vim-as-an-ide">some of my other configuration work</a>, I decided it was time to
make my config files something worth looking at.</p>

<p>Thus, given the state of my old files, much of my effort this time around
were spent refactoring my current setup to increase modularity and get it to
integrate nicely with rcm. I think that this use case is a little
under-documented and lacking in first-class support in the suite, so I&rsquo;ll talk
about how I got around this later on. That being said, if you&rsquo;re coming from no
dotfiles management software or are interested in trying out something new,
you&rsquo;ll have a much smoother experience.</p>

<h2>Goals</h2>

<p>My two goals for the refactor that I mentioned above were to</p>

<ul>
<li>make everything modular, so that people could more easily pick and choose
pieces from my dotfiles to include in theirs, and</li>
<li>make it easy to swap around host-specific configurations.</li>
</ul>


<p>While the work required to achieve this setup was a bit hairy, maintaining it
should be straightforward from now on.</p>

<p>If you haven&rsquo;t taken a second to peruse some of the <a href="http://thoughtbot.github.io/rcm/rcm.7.html">documentation</a> yet,
it probably wouldn&rsquo;t hurt to do so now. It&rsquo;s about to get technical.</p>

<h2>Host-independent files</h2>

<p>I started this time around with the host independent files, because they
required no real refactoring. Linking these up was a simple matter of running
commands that looked like</p>

<pre><code>$ mkrc &lt;rc-file&gt;
</code></pre>

<p>I ran this on files like my <code>.vimrc</code>, <code>.tmux.conf</code>, <code>.ackrc</code>, and other simple
files. I also handled my <code>.vim/</code> folder in this step, but slightly differently.
The default rcm behavior is to create symlinks when given a single file, and to
recursively descend and create symlinks when given a folder. For folders like my
<code>.vim/</code> folder, which can get pretty large pretty quickly, I used the <code>-S</code>
option to force rcm to symlink the directory:</p>

<pre><code>$ mkrc -S .vim/
</code></pre>

<p>The first time I ran <code>mkrc</code>, it automatically created a folder called
<code>~/.dotfiles</code>, which is where all my dotfiles files will live from now on. Then,
every time <code>mkrc</code> is run, it moves the file into this folder and creates a
symbolic link where it use to exist. I always thought this was a curious name
for the program, &ldquo;make rc file&rdquo;, but really what I just mentioned is all there
is to it: <code>mkrc</code> <em>moves</em> and <em>links</em> an rc file.</p>

<p><a class="image-link" href="/images/mkrc-host-independent.png"><img src="/images/mkrc-host-independent.png"></a></p>

<p>Above you can see the results of this first step on a couple files: my <code>.vimrc</code>
and my <code>.vim/</code> folder. You can see that where there once were a file and a
folder, there are now two symbolic links, which point to the moved files inside
of my <code>.dotfiles/</code> directory.</p>

<h2>Host-dependent files</h2>

<p>Next up are obviously the host-dependent files, though we can split this
category once more based on which need to be refactored.</p>

<h3>Just Add Water</h3>

<p>For my host-dependent
files that didn&rsquo;t need to be refactored, like my <code>.ssh/config</code> and my
<code>.gitconfig</code> (files which, by the way, I wasn&rsquo;t tracking at all before this
rewrite), I just ran the following command:</p>

<pre><code>$ mkrc -o .gitconfig
</code></pre>

<p>When I&rsquo;m on my Mac, this goes through the same move + link procedure described
above, but it moves the file into the <code>~/.dotfiles/host-Jacobs-MacBook-Air/</code>
subfolder.</p>

<h3>Refactor and Profit</h3>

<p>Finally, I dealt with the piece of my dotfiles that was sorely lacking a
refactor: my <code>.zshrc</code>. For this, I took a cue from <a href="https://github.com/holman/dotfiles">Zach Holman&rsquo;s
dotfiles</a> organization and broke up my zshrc into it&rsquo;s components, like
<code>aliases.sh</code>, <code>colors.sh</code>, and more. Most important of these components was
the <code>host.sh</code> file, which contained all the host-specific configurations that I
was doing. Whenever I deploy my <code>.zshrc</code> on a new host now, rcm will put a
<code>host.sh</code> file in a location where my <code>.zshrc</code> knows where to look, but the
contents of that file change depending on the host. Getting the many <code>host.sh</code>
files in place is where I think mkrc&rsquo;s power can be improved.</p>

<p>The <code>mkrc -o</code> command takes an option that lets you specify a host explicitly
(<code>-B &lt;hostname&gt;</code>) rather than calculating it with the <code>hostname</code> command, but it doesn&rsquo;t
let you specify that you&rsquo;d just like to move the file, rather than move and link
it. As such, when I was refactoring, I created a bunch of files:
<code>host-Jacobs-MacBook-Air.sh</code>, <code>host-ghost.zimmerman.io.sh</code>, etc., creating one
<code>host-&lt;something&gt;.sh</code> file for each host that I needed to deploy my dotfiles to.
Then, for each of these files, I</p>

<ul>
<li>ran <code>mkrc -o -B &lt;hostname&gt; host-&lt;hostname&gt;.sh</code></li>
<li>removed the link created by <code>mkrc</code> (I skipped this step the last time around,
when I had just linked the correct <code>host.sh</code> file for the host I was working
on)</li>
<li>renamed the file that rcm created in the <code>.dotfiles/host-&lt;hostname&gt;/</code> folder
to just <code>host.sh</code>.</li>
</ul>


<p>Since there were a bunch of different host-specific files in my case, this
process was a little tedious. It&rsquo;d have been nice if there was an option to
automate my use case, but I&rsquo;m not sure if it&rsquo;s common enough to warrant
the additional complexity, especially considering it&rsquo;s a one-time cost.</p>

<p>In any case, with all this in place, I had finally met my two goals: everything
was modular, and host-specific configurations were clearly defined and easily
deployable.</p>

<h2>Up Next</h2>

<p>If you&rsquo;re reading this and wondering where to go next, you could:</p>

<ul>
<li>take a dive into the rcm documentation to get started applying it to your own
set of dotfiles</li>
<li>browse my <a href="https://github.com/jez/dotfiles">new-and-improved dotfiles</a> repository on GitHub</li>
<li>wait for an upcoming post where I point out some of the noteworthy things I&rsquo;ve
added in my dotfiles</li>
</ul>


<p>If you&rsquo;re using rcm or trying to get started with it but are having issues, feel
free to drop questions in the comments and I&rsquo;ll see if I can&rsquo;t help sort things
out.</p>
]]></content>
  </entry>
  
</feed>
