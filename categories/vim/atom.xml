<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/vim/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2019-09-02T17:34:49-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Review from the Command Line]]></title>
    <link href="https://blog.jez.io/cli-code-review/"/>
    <updated>2018-01-13T13:14:24-08:00</updated>
    <id>https://blog.jez.io/cli-code-review</id>
    <content type="html"><![CDATA[<p>I do the bulk of my code reviews from the command line, especially when
reviewing larger changes. I&rsquo;ve built up a number of tools and config
settings that help me dig into the nuances of the code I&rsquo;m reviewing, so
that I can understand it better than if I were just browsing online.</p>

<!-- more -->


<p>In particular, I&rsquo;ll walk through how I&hellip;</p>

<ul>
<li>check out the code in the first place,</li>
<li>get a feel for what changed,</li>
<li>visualize the relationships between the files that changed,</li>
<li>bring up the code diffs in Vim,</li>
<li>leverage the unique power of the editor and the terminal.</li>
</ul>


<p>But first, let&rsquo;s talk briefly about the point of code review in the
first place.</p>

<h2>Code review philosophy</h2>

<p>When I ask that other people review my code, it&rsquo;s an opportunity for me
to teach them about the change I&rsquo;ve just made. When I review someone
else&rsquo;s code, it&rsquo;s to learn something from them. Some other benefits of
code review include:</p>

<ul>
<li>Team awareness (to keep a pulse on what else is going on within your
team).</li>
<li>Finding alternative solutions (maybe there&rsquo;s a small change that lets
us kill two birds with one stone).</li>
</ul>


<p>If this is different from how you think about code review, <a href="https://www.youtube.com/watch?v=PJjmw9TRB7s">check out
this talk</a>. Code review is a powerful tool for
learning and growing a team.</p>

<p>With that out of the way, let&rsquo;s dive into the tools I use to maximize
benefit I get from code review.</p>

<h2>Checking out the code</h2>

<p>The first step to reviewing code in the terminal is to check out the
code in the first place. One option is to simply to <code>git pull</code> and then
<code>git checkout &lt;branch&gt;</code>. But if you happen to be using GitHub, we can
get this down to just one command:</p>

<pre><code>hub pr checkout &lt;pr-number&gt;
</code></pre>

<p>It works using <a href="https://github.com/github/hub">hub</a>, which is a tool that exposes various features of
GitHub from the command line. If the pull request is from someone else&rsquo;s
fork, <code>hub</code> is even smart enough to add their fork as a remote and fetch
it.</p>

<h2>At first glance</h2>

<p>With the branch checked out locally, usually my next step is to get a
feel for what changed. For this, I&rsquo;ve written a git alias that shows:</p>

<ul>
<li>which files changed</li>
<li>how many lines changed in each file (additions and deletions)</li>
<li>how many lines changed overall</li>
</ul>


<p><a class="image-link" href="/images/git-stat.png"><img class="fullwidth" src="/images/git-stat.png" title="git stat" ></a></p>

<p>Here&rsquo;s the definition of <code>git stat</code> from my <code>~/.gitconfig</code>:</p>

<pre><code class="bash">[alias]
    # list files which have changed since REVIEW_BASE
    # (REVIEW_BASE defaults to 'master' in my zshrc)
    files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")

    # Same as above, but with a diff stat instead of just names
    # (better for interactive use)
    stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
</code></pre>

<p>Under the hood, it just works using <code>git diff</code>, <code>git merge-base</code>, and a
personal environment variable <code>REVIEW_BASE</code>.</p>

<p><code>REVIEW_BASE</code> lets us choose which branch to review relative to. Most of
the time, <code>REVIEW_BASE</code> is <code>master</code>, but this isn&rsquo;t always the case! Some
repos branch off of <code>gh-pages</code>. Sometimes I like to review the most
recent commit as if it were its own branch.</p>

<p>To review the code relative so some other base, set <code>REVIEW_BASE</code> before
running <code>git stat</code>:</p>

<pre><code class="bash"># Review between 'gh-pages' and the current branch
REVIEW_BASE=gh-pages git stat

# Review changes made by the last commit of this branch:
REVIEW_BASE=HEAD^ git stat
</code></pre>

<p>I have <code>export REVIEW_BASE=master</code> in my <code>~/.bashrc</code>, because most
projects branch off of <code>master</code>.</p>

<p>Nothing too crazy yet&mdash;GitHub can already do everything we&rsquo;ve seen so
far. Let&rsquo;s start to up the ante.</p>

<h2>Visualizing file change frequency</h2>

<p>I&rsquo;ve written a short script that shows me a visualization of how
frequently the files involved in this branch change over time:</p>

<p><a class="image-link" href="/images/git-heatmap.png"><img class="fullwidth" src="/images/git-heatmap.png" title="git heatmap" ></a></p>

<p>This command identifies two main things:</p>

<ul>
<li><p><strong>Files with lots of changes</strong>.</p>

<p>Files that have changed a lot in the past are likely to change in the
future. I review these files with an eye towards what the <em>next</em>
change will bring.</p>

<p><em>&ldquo;Is this change robust enough to still be useful in the future?
Will we throw this out soon after merging it?&rdquo;</em></p></li>
<li><p><strong>Files with few changes</strong>.</p>

<p>Files that aren&rsquo;t changed frequently are more likely to be brittle.
Alternatively, it&rsquo;s often the case that infrequently changed files
stay unchanged because the change is better made elsewhere.</p>

<p><em>&ldquo;Does this change challenge an implicit assumption so that some other
part of the code was relying on? Is there a better place for this
change?&rdquo;</em></p></li>
</ul>


<p>Those two commands (<code>git stat</code> and <code>git heatmap</code>) are how I kick off my
code review: getting a birds-eye view of the change and some historical
context for what I&rsquo;m dealing with. Next, I drill down into the
relationships between the files that changed.</p>

<h2>Visualizing relationships between files</h2>

<p>At work I review JavaScript files, so I&rsquo;ve built out this next bit of
tooling specifically for JavaScript.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> It helps to understand
which files import others, so I have a command that computes the
dependency graph of the files changed on this branch:</p>

<p><a class="image-link" href="/images/git-depgraph.png"><img class="fullwidth" src="/images/git-depgraph.png" title="git depgraph" ></a></p>

<p>This is where we start to see some distinct advantages over what GitHub
provides. As you see above, the <code>git depgraph</code> alias calculates the
dependency graph for files changed by this branch. Why is this useful?</p>

<ul>
<li><p>Maybe we want to start reviewing from <code>Provider.js</code>, since it doesn&rsquo;t
depend on any other files that have changed.</p></li>
<li><p>Maybe we want to work the other way: start with <code>Elements.js</code> so we
know the motivation for why <code>Provider.js</code> had to changed in the first
place.</p></li>
</ul>


<p>In either case, we can see the structure of the change. Three files
depend on <code>Elements.js</code>, so it&rsquo;s serving the needs of many modules.
<code>Element.js</code> only has one dependency, etc. Each branch&rsquo;s dependency
graph shows different information; it can be surprising what turns up.</p>

<p>I have the <code>git depgraph</code> alias defined like this:</p>

<pre><code class="bash">[alias]
    depgraph = !git madge image --webpack-config webpack.config.js --basedir . --style solarized-dark src
</code></pre>

<p>Some notes about this definition:</p>

<ul>
<li><p>It depends on the <code>git-madge</code> command, which you can <a href="https://github.com/jez/git-madge">download
and install here</a>.</p></li>
<li><p>It&rsquo;s using <em>this project&rsquo;s</em> <code>webpack.config.js</code> file, so I&rsquo;ve made
this alias local to the repo, rather than available globally.</p></li>
<li><p>It dumps the image to stdout. Above, we used iTerm2&rsquo;s <a href="https://iterm2.com/documentation-images.html">imgcat</a>
program to pipe stdin and dump a raster image to the terminal.</p>

<p>If you don&rsquo;t use iTerm2 or don&rsquo;t want to install <code>imgcat</code>, you can
pipe it to Preview using open<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> (<code>open -f -a Preview</code>) or just
redirect the PNG to a file.</p></li>
</ul>


<p>The <code>git depgraph</code> alias is a game changer. It makes it easier to get spun
up in new code bases, helps make sense of large changes, and just looks
plain cool. But at the end of the day, we came here to review some code,
so let&rsquo;s take a look at how we can actually view the diffs of the files
that changed.</p>

<h2>Reviewing the diffs</h2>

<p>To review the diffs, the simplest option is to just run <code>git diff
master..HEAD</code>. This has a bunch of downsides:</p>

<ul>
<li><p>No syntax highlighting (everything is either green or red).</p></li>
<li><p>No surrounding context (for example, GitHub lets you click to expand
lines above or below a diff hunk).</p></li>
<li><p>The diff is &ldquo;unified,&rdquo; instead of split into two columns.</p></li>
<li><p>No way to exclude a specific file (the 300 line diff to your
<code>yarn.lock</code> file is sometimes nice to hide).</p></li>
</ul>


<p>My solution to all of these problems is to view the diffs in Vim, with
the help of two Vim plugins and two git aliases. Before we get to
that, here&rsquo;s a screenshot:</p>

<p><a class="image-link" href="/images/git-review.png"><img class="fullwidth" src="/images/git-review.png" title="git review" ></a></p>

<p>Looks pretty similar to GitHub&rsquo;s interface, with the added bonus that
it&rsquo;s using my favorite colorscheme! The Vim plugins featured are:</p>

<ul>
<li><a href="https://github.com/tpope/vim-fugitive">tpope/vim-fugitive</a> for showing the side-by-side diff (<code>:Gdiff</code>).</li>
<li><a href="https://github.com/airblade/vim-gitgutter">airblade/vim-gitgutter</a> for showing the <code>+/-</code> signs.</li>
<li><a href="https://github.com/jez/vim-colors-solarized">jez/vim-colors-solarized</a> for tweaking the diff highlight
colors.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
</ul>


<p>And to orchestrate the whole thing, I&rsquo;ve set up these two aliases:</p>

<pre><code class="bash">[alias]
  # NOTE: These aliases depend on the `git files` alias from
  # a few sections ago!

    # Open all files changed since REVIEW_BASE in Vim tabs
    # Then, run fugitive's :Gdiff in each tab, and finally
    # tell vim-gitgutter to show +/- for changes since REVIEW_BASE
    review = !vim -p $(git files) +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

    # Same as the above, except specify names of files as arguments,
    # instead of opening all files:
    # git reviewone foo.js bar.js
    reviewone = !vim -p +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"
</code></pre>

<p>Here&rsquo;s how they work:</p>

<ul>
<li><p><code>git review</code> opens each file changed by this branch as a tab in Vim.
Then <code>:Gdiff</code> from vim-fugitive shows the diff in each tab.</p></li>
<li><p><code>git reviewone</code> is like <code>git review</code>, but you specify which
files to open (in case you only want to diff a few).</p></li>
</ul>


<p>Like with the <code>git stat</code> alias, these aliases respect the <code>REVIEW_BASE</code>
environment variable I&rsquo;ve set up in my <code>~/.bashrc</code>. (Scroll back up for
a refresher.) For example, to review all files relative to <code>master</code>:</p>

<pre><code class="bash">REVIEW_BASE=master git review
</code></pre>

<p>At this point, you might think that all we&rsquo;ve done is re-create the
GitHub code review experience in Vim. But actually what we&rsquo;ve done is so
much more powerful.</p>

<h2>Interactive Code Review</h2>

<p>When reviewing on GitHub, the code is completely static&mdash;you can&rsquo;t
change it. Also, because the code is coming from GitHub&rsquo;s servers,
it&rsquo;s laggy when you click around to view related files. By switching our
code review to the terminal, we can now edit files, jump to other files,
and run arbitrary commands at no cost.</p>

<p>It might not be obvious how huge of a win this is, so let&rsquo;s see some
examples. Take this screenshot of the <code>requireElement</code> function. It
moved from <em>above</em> the <code>findElement</code> function to <em>below</em> it (probably
because the former calls the latter):</p>

<p><a class="image-link" href="/images/requireElement01.png"><img class="fullwidth" src="/images/requireElement01.png" title="diff" ></a></p>

<p>But is the location of the <code>requireElement</code> function the only thing
that&rsquo;s changed? By editing the file to move the function back to its
original location, vim-fugitive will automatically recompute the diff.
And in fact, we can see that the <em>type of the argument</em> has changed too,
from <code>string</code> to <code>ElementType</code>:</p>

<p><a class="image-link" href="/images/requireElement02.png"><img class="fullwidth" src="/images/requireElement02.png" title="diff" ></a></p>

<p>If we had been viewing this on GitHub, we might have taken for granted
that the function didn&rsquo;t change. But since we&rsquo;re in our editor, we can
interactively play around with our code and discover things we might
have missed otherwise. The advantages of interactive code review go well
beyond this example:</p>

<ul>
<li><p>In a Flow project, we can ask for the type of a variable.</p></li>
<li><p>In a test file, we can change the test and see if it still passes or
if it now fails.</p></li>
<li><p>We can <code>grep</code> the project for all uses of a function (including files
<em>not</em> changed by this branch).</p></li>
<li><p>We can open up related files for cross-referencing.</p></li>
<li><p>We can run the code in a debugger and see how it behaves.</p></li>
</ul>


<p>By having the full power of our editor, we can literally retrace the
steps that the author went through to create the pull request. If our
goal is to understand and learn from code review, there&rsquo;s no better way
than walking in the author&rsquo;s shoes.</p>

<h2>Recap</h2>

<p>To recap, here&rsquo;s a list of the tools I use to review code at the command
line:</p>

<ul>
<li><code>hub pr checkout</code></li>
<li><code>git stat</code> to list files that have changed</li>
<li><code>git heatmap</code> to show how frequently these files change</li>
<li><code>git depgraph</code> to show a graph of which files depend on which</li>
<li><code>git review</code> to open diffs of all the files in Vim</li>
<li><code>git reviewone</code> to open diffs for a specific handful of files</li>
</ul>


<p>If you&rsquo;re having trouble incorporating any of these into your workflow,
feel free to reach out and let me know! I&rsquo;m happy to help.</p>

<!-- vim:tw=72
-->

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The techniques here apply to any language that you can statically analyze. In particular, I have a rough prototype of everything JavaScript-specific you see here that works with Standard ML instead. If you can find me the dependency information for your favorite language, I&rsquo;d be happy to help you turn it into a visualization.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The <code>open</code> command is macOS-specific. On Linux, you might want to look at the <code>display</code> command from ImageMagick.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>I&rsquo;ve patched the default Solarized colors for Vim so that lines retain their syntax highlighting in the diff mode, while the backgrounds are highlighted. You can see how this works in this commit: <a href="https://github.com/jez/vim-colors-solarized/commit/bca72cc">https://github.com/jez/vim-colors-solarized/commit/bca72cc</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell Development with Neovim]]></title>
    <link href="https://blog.jez.io/haskell-development-with-neovim/"/>
    <updated>2017-07-16T13:45:31-05:00</updated>
    <id>https://blog.jez.io/haskell-development-with-neovim</id>
    <content type="html"><![CDATA[<p>Configuring an editor for a new language is a double-edged sword: it&rsquo;s intensely
satisfying when done, but takes time away from diving into the language itself!
After using Haskell for a little over a year, I&rsquo;ve settled on a high-quality set
of editor plugins. They&rsquo;re simple, powerful, and all play nicely together.</p>

<!-- more -->


<h2>Requirements</h2>

<p>I use <a href="https://www.haskellstack.org/">Haskell Stack</a> exclusively. Stack&rsquo;s goal is reproducible builds,
which means that in general, things Just Work.</p>

<p>I also use <a href="https://github.com/neovim/neovim">Neovim</a>, rather than normal Vim. Usually, my justification
is ideological rather than technical. However, for Haskell my setup <strong>requires</strong>
Neovim. Fear not! Neovim is feature-packed and also very stable. I love Neovim,
and I&rsquo;ll be writing more about why in a future post.</p>

<p>By the way, new to Vim plugins? I happen to have <a href="https://github.com/jez/vim-as-an-ide">just the post for
you</a>!</p>

<!-- TODO(jez): Update with link to Neovim post -->


<h2>Overview</h2>

<p>We&rsquo;re going to move in order of increasing complexity. That said, even the most
&ldquo;complex&rdquo; plugin here is actually quite painless to set up. By the end, we&rsquo;ll
have a complete development experience! Coming up:</p>

<ul>
<li>syntax highlighting &amp; indentation (<strong><a href="https://github.com/neovimhaskell/haskell-vim">haskell-vim</a></strong>)</li>
<li>auto-formatting &amp; style (<strong><a href="https://github.com/commercialhaskell/hindent">hindent</a>, <a href="https://github.com/jaspervdj/stylish-haskell">stylish-haskell</a></strong>)</li>
<li>quickfix and sign column support (<strong>using <a href="https://github.com/w0rp/ale">ale</a></strong>) for:

<ul>
<li>linter style suggestions (<strong>hlint</strong>)</li>
<li>compiler errors and warnings (<strong>ghc-mod</strong>)</li>
</ul>
</li>
<li>Type inspection, REPL integration, and more! (<strong><a href="https://github.com/parsonsmatt/intero-neovim">intero-neovim</a></strong>)</li>
</ul>


<p>To keep things concise, I&rsquo;ve moved all the relevant configuration to the end of
the post. For now, let&rsquo;s start at the top.</p>

<!-- TODO(jez) Demonstrate everything with an asciicast -->


<h2>Syntax Highlighting &amp; Indentation</h2>

<ul>
<li><strong>Plugin</strong>: <a href="https://github.com/neovimhaskell/haskell-vim">haskell-vim</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
</ul>


<p>Vim&rsquo;s default Haskell filetype plugin is pretty lack luster. Everything is blue,
except for strings which are colored like comments, and keywords which are
colored like constants. Indentation is wonky in some cases, and isn&rsquo;t
configurable.</p>

<p>This plugin corrects all that. It&rsquo;s the filetype plugin for Haskell that
<strong>should</strong> ship with Vim.</p>

<p>Not only does it come with saner defaults, it also comes with more config
options, especially for indentation. This is important because it lets me
tweak the automatic indentation to my own personal style.</p>

<p>(Remember: all the config is at the end of the post.)</p>

<h2>Auto-formatting and Indentation</h2>

<ul>
<li><strong>Plugin</strong>: <a href="https://github.com/alx741/vim-hindent">vim-hindent</a></li>
<li><strong>Tool</strong>: <code>stack install hindent</code></li>
<li><strong>Tool</strong>: <code>stack install stylish-haskell</code></li>
</ul>


<p>For small projects, I have an idea of what style I like best. However, for
larger projects it&rsquo;s unfair to ask contributors that they learn the ins and outs
of my style. Situations like these call for automated solutions.</p>

<p><code>go fmt</code> famously solved this problem for Golang by building the formatting tool
into the compiler. For Haskell, there&rsquo;s <a href="https://github.com/commercialhaskell/hindent">hindent</a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. <code>hindent</code> can be
installed through Stack, and <code>vim-hindent</code> is a Vim plugin that shims it.</p>

<p>But I said I&rsquo;m partial to my own style in personal projects. There&rsquo;s another
Haskell formatter that&rsquo;s much less invasive: <a href="https://github.com/jaspervdj/stylish-haskell">stylish-haskell</a>. It basically
only reformats <code>import</code>s, <code>case</code> branches, and record fields, aligning them
vertically. And in fact, it&rsquo;s possible to use this alongside <code>hindent</code>.</p>

<p>With these three tools, I can pick the right tool for the job:</p>

<ul>
<li><strong>Hand saw</strong>: let <code>haskell-vim</code> config control the indentation</li>
<li><strong>Table saw</strong>: run <code>stylish-haskell</code> only</li>
<li><strong>Chainsaw</strong>: run <code>hindent</code> only</li>
<li><strong>Chainsaw, then sand paper</strong>: run <code>hindent</code>, then <code>stylish-haskell</code></li>
</ul>


<p>Getting them to play together requires a bit of config, so I&rsquo;ve included mine at
the end of the post.</p>

<h2>Quickfix &amp; Sign Columns</h2>

<ul>
<li><strong>Plugin</strong>: <a href="https://github.com/w0rp/ale">ale</a></li>
<li><strong>Tool</strong>: <code>stack install hlint</code></li>
<li><strong>Tool</strong>: <code>stack build ghc-mod</code>

<ul>
<li>N.B.: This is <em>build</em> not <em>install</em> here<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</li>
</ul>
</li>
</ul>


<p>This step requires <em>either</em> Neovim or Vim 8; ALE stands for &ldquo;Asynchronous Lint
Engine,&rdquo; so it&rsquo;s using the new asynchronous job control features of these two
editors. It&rsquo;s like an asynchronous Syntastic<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>ALE ships with a number of Haskell integrations by default. For example, it can
show errors if only Stack is installed. I prefer enabling two of ALE&rsquo;s Haskell
integrations: <code>hlint</code> and <code>ghc-mod</code>.</p>

<ul>
<li><code>hlint</code> is a linter for Haskell. It warns me when I try to do silly things
like <code>if x then True else False</code>.</li>
<li><code>ghc-mod</code> is a tool that can check files for compiler errors.</li>
</ul>


<p>The beauty of ALE is that it works almost entirely out of the box. The only real
setup is to tell ALE to use only these two integrations explicitly. I&rsquo;ve
included the one-liner to do this in the config at the bottom.</p>

<h2>Intero: The Pièce de Résistance</h2>

<ul>
<li><strong>Plugin</strong>: <a href="https://github.com/parsonsmatt/intero-neovim">intero-neovim</a></li>
</ul>


<p>Intero is a complete development program for Haskell. It started as an Emacs
package, but has been ported almost entirely to Neovim. Probably the best way to
introduce it is with this asciicast:</p>

<p align="center">
  <a href="https://asciinema.org/a/128416">
    <img
      width="700px"
      alt="Intero for Neovim asciicast"
      src="https://asciinema.org/a/128416.png">
  </a>
</p>


<p>Intero is designed for stack, sets itself up automatically, has point-and-click
type information, and lets me jump to identifier definitions. On top of it all,
it uses Neovim to communicate back and forth with a terminal buffer so that I
get a GHCi buffer <strong>right inside Neovim</strong>. For Emacs users, this is nothing new
I&rsquo;m sure. But having the REPL in my editor continues to blow my mind 😮.</p>

<p>Developing with the REPL in mind helps me write better code. Only top-level
bindings are exposed in the REPL, so I write more small, testable functions.
See here for more reasons <a href="http://chrisdone.com/posts/haskell-repl">why the REPL is awesome</a>.</p>

<p>On top of providing access to the REPL, Intero provides about a dozen
convenience commands that shell out to the REPL backend asynchronously. Being
able to reload my code in the REPL&mdash;from Vim, with a single keystroke!&mdash;is a
huge boon when developing.</p>

<p>Intero takes a little getting used to, so be sure to read the docs for some
sample workflows. Intero also sets up no mappings by default, so I&rsquo;ve included
my settings below.</p>

<h2>The Eagerly-Awaited Config</h2>

<p>And without further ado&hellip;</p>

<pre><code class="vim">" ----- neovimhaskell/haskell-vim -----

" Align 'then' two spaces after 'if'
let g:haskell_indent_if = 2
" Indent 'where' block two spaces under previous body
let g:haskell_indent_before_where = 2
" Allow a second case indent style (see haskell-vim README)
let g:haskell_indent_case_alternative = 1
" Only next under 'let' if there's an equals sign
let g:haskell_indent_let_no_in = 0

" ----- hindent &amp; stylish-haskell -----

" Indenting on save is too aggressive for me
let g:hindent_on_save = 0

" Helper function, called below with mappings
function! HaskellFormat(which) abort
  if a:which ==# 'hindent' || a:which ==# 'both'
    :Hindent
  endif
  if a:which ==# 'stylish' || a:which ==# 'both'
    silent! exe 'undojoin'
    silent! exe 'keepjumps %!stylish-haskell'
  endif
endfunction

" Key bindings
augroup haskellStylish
  au!
  " Just hindent
  au FileType haskell nnoremap &lt;leader&gt;hi :Hindent&lt;CR&gt;
  " Just stylish-haskell
  au FileType haskell nnoremap &lt;leader&gt;hs :call HaskellFormat('stylish')&lt;CR&gt;
  " First hindent, then stylish-haskell
  au FileType haskell nnoremap &lt;leader&gt;hf :call HaskellFormat('both')&lt;CR&gt;
augroup END

" ----- w0rp/ale -----

let g:ale_linters.haskell = ['stack-ghc-mod', 'hlint']

" ----- parsonsmatt/intero-neovim -----

" Prefer starting Intero manually (faster startup times)
let g:intero_start_immediately = 0
" Use ALE (works even when not using Intero)
let g:intero_use_neomake = 0

augroup interoMaps
  au!

  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;io :InteroOpen&lt;CR&gt;
  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;iov :InteroOpen&lt;CR&gt;&lt;C-W&gt;H
  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;ih :InteroHide&lt;CR&gt;
  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;is :InteroStart&lt;CR&gt;
  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;ik :InteroKill&lt;CR&gt;

  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;wr :w \| :InteroReload&lt;CR&gt;
  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;il :InteroLoadCurrentModule&lt;CR&gt;
  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;if :InteroLoadCurrentFile&lt;CR&gt;

  au FileType haskell map &lt;leader&gt;t &lt;Plug&gt;InteroGenericType
  au FileType haskell map &lt;leader&gt;T &lt;Plug&gt;InteroType
  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;it :InteroTypeInsert&lt;CR&gt;

  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;jd :InteroGoToDef&lt;CR&gt;
  au FileType haskell nnoremap &lt;silent&gt; &lt;leader&gt;iu :InteroUses&lt;CR&gt;
  au FileType haskell nnoremap &lt;leader&gt;ist :InteroSetTargets&lt;SPACE&gt;
augroup END
</code></pre>

<h2>Wrap Up</h2>

<p>With these tools, I feel empowered (rather than hindered) when I sit down to
work with Haskell.</p>

<ul>
<li>The entire setup uses Stack, so things Just Work.

<ul>
<li>As a consequence, everything works with the implicit global Stack project!</li>
</ul>
</li>
<li>It scales up in power:

<ul>
<li>From simple syntax highlighting and manual indentation&hellip;</li>
<li>to an indentation chainsaw and a <strong>REPL embeded in the editor</strong>!</li>
</ul>
</li>
<li>I can take full advantage of all my tools working together, leading to cleaner
code and fewer frustrations.</li>
</ul>


<p>Now that I&rsquo;m finally at a point where I can stop fretting about my Haskell
setup, I&rsquo;ll have more time to explore the language and write about my
experience.</p>

<p>Haskell-the-language isn&rsquo;t quite on the same level as SML-the-language, but it&rsquo;s
far and above when comparing by tooling support. I&rsquo;m looking forward to taking
advantage of that!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>While listed under &ldquo;neovimhaskell&rdquo; on GitHub, this plugin works with normal Vim, too.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Chris Done explains the appeal of solving style issues with tooling for Haskell well. The moral of the story is that hindent version 5 ships with only the most popular style formatter in an effort to arrive at a singular Haskell style: <a href="http://chrisdone.com/posts/hindent-5">http://chrisdone.com/posts/hindent-5</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>We want to install <code>ghc-mod</code> once in every project. It can be done globally, but it might get out of sync with the current project.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Some people are familiar with Neomake for this task. However, Neomake is much more minimal than ALE. Neomake basically only builds, whereas ALE is more configurable and hackable.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reach for Markdown, not LaTeX]]></title>
    <link href="https://blog.jez.io/reach-for-markdown/"/>
    <updated>2017-02-26T21:26:53-05:00</updated>
    <id>https://blog.jez.io/reach-for-markdown</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written <a href="/2014/10/06/offline-latex-development/">in the past</a> (<a href="/2015/01/10/offline-latex-development-part-2/">twice</a>) about how to
streamline the writing process when using LaTeX. Since then, I&rsquo;ve found that I
enjoy writing even more when I don&rsquo;t have to reach for LaTeX at all. By reaching
first for Markdown, then for LaTeX when necessary, writing is easier and more
enjoyable.</p>

<!-- more -->


<h2>Writing at the Command Line</h2>

<p>Last year, I <a href="https://jez.io/talks/writing-at-the-command-line/">gave a talk</a> about the merits of writing primarily at
the command line. My main claims were that when writing we want:</p>

<ul>
<li>an open document format (so that our writings are future proof)</li>
<li>to be using open source software (for considerations of privacy and cost)</li>
<li>to optimize for the &ldquo;common case&rdquo;</li>
<li>to be able to write for print and digital (PDFs, web pages, etc.)</li>
</ul>


<p>Markdown solves these constraints nicely:</p>

<ul>
<li>It&rsquo;s a plain text format&mdash;plain text has been around for decades and will
be for decades more.</li>
<li>Given a plain text format, we can bring our own text editor.</li>
<li>Plenty of open source programs manipulate Markdown.</li>
<li>When we need advanced features, we can mix LaTeX into our Markdown documents.</li>
</ul>


<p>For those unfamiliar with Markdown, it&rsquo;s super quick to pick up. If you only
look at one guide, see this one:</p>

<ul>
<li><a href="http://commonmark.org/help/">CommonMark</a></li>
</ul>


<p>If you want to start comparing features available in certain implementations of
Markdown:</p>

<ul>
<li><a href="https://guides.github.com/features/mastering-markdown/">GitHub Flavored Markdown</a></li>
<li><a href="https://daringfireball.net/projects/markdown/">Markdown.pl</a></li>
<li><a href="http://pandoc.org/MANUAL.html#pandocs-markdown">Pandoc Markdown</a></li>
</ul>


<p>For more on why you should want to be writing at the command line, you can
<a href="https://jez.io/talks/writing-at-the-command-line/">check out the talk slides</a>.</p>

<h2>Pandoc Starter</h2>

<p>The central tool I spoke about in <em>Writing at the Command Line</em> is <a href="https://pandoc.org/">Pandoc</a>.
Pandoc is an amazingly simple command line program that takes in Markdown files
and spits out really anything you can think of.</p>

<p>To make using Pandoc even easier than it already is, I put together a
<a href="https://github.com/jez/pandoc-starter">collection of starter templates</a>. They&rsquo;re all available <a href="https://github.com/jez/pandoc-starter">on
Github</a> if you&rsquo;d prefer to dive right in.</p>

<p>There are currently six different templates, specialized for the kind of
document you&rsquo;d like to create. Each has a <code>README</code> for installation and usage
instructions, as well as a <code>Makefile</code> for invoking <code>pandoc</code> correctly.</p>

<p>All the templates generate PDFs from Markdown by way of LaTeX. In addition to
Pandoc, you&rsquo;ll also need LaTeX installed locally.</p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/article"><code>article</code></a></h3>

<p>This template uses the standard LaTeX <code>article</code> document class. It&rsquo;s a
no frills, no nonsense choice.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/article/src/sample.pdf"><img src="/images/pandoc-starter-article.png" alt="article template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/tufte-handout"><code>tufte-handout</code></a></h3>

<p>As an alternative to the <code>article</code> document class, there&rsquo;s also the
<code>tufte-handout</code> document class. It originates from the style Edward Tufte
popularized in his books and articles on visualization and design.</p>

<p>Apart from a different font (it uses Palatino instead of the default Computer
Modern), this template features the ability add side notes to your documents. I
often find myself reaching for this template when I want to disguise the fact
that I&rsquo;m secretly using LaTeX.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/tufte-handout/src/sample.pdf"><img src="/images/pandoc-starter-tufte-handout.png" alt="tufte-handout template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/homework"><code>homework</code></a></h3>

<p>A second alternative to the <code>article</code> document class is the <code>homework</code> document
class. It works nicely for homework assignments and problem sets. The class
itself has a number of handy features, like:</p>

<ul>
<li>the option to put your name on every page, or only on the first page</li>
<li>an option to use wide or narrow margins</li>
<li>most of the AMS Math packages you&rsquo;d include in the process of typesetting a
math assignment</li>
<li>a convenient environment for typesetting induction proofs</li>
</ul>


<p>For more features and usage information, check out <a href="/2015/01/10/the-latex-homework-document-class/">this blog post</a> or
<a href="https://github.com/jez/latex-homework-class">the source</a> on GitHub.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/homework/src/sample.pdf"><img src="/images/pandoc-starter-homework.png" alt="homework template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/beamer"><code>beamer</code></a></h3>

<p>LaTeX provides the <code>beamer</code> document class for creating slides; this template
makes it even easier to use:</p>

<ul>
<li>Make a new slide with a &ldquo;<code>##</code>&rdquo; header</li>
<li>Make a section divider with a &ldquo;<code>#</code>&rdquo; header</li>
<li>Mix lists, links, code, and other Markdown features you&rsquo;re familiar with to
create the content for a slide.</li>
</ul>


<p>So basically, just write the outline for your talk, and Pandoc takes care of
making the slides&mdash;it doesn&rsquo;t get much simpler.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/beamer/src/sample.pdf"><img src="/images/pandoc-starter-beamer.png" alt="beamer template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/beamer-solarized"><code>beamer-solarized</code></a></h3>

<p>The default beamer styles are pretty boring. To add a bit of flair and
personality to my slide decks, I made a Solarized theme for beamer.</p>

<p>In addition to the screenshot below, the <a href="https://jez.io/talks/writing-at-the-command-line/">Writing at the Command
Line</a> slides I linked to earlier also use this theme, if you want
to see a less contrived example.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/beamer-solarized/src/sample.pdf"><img src="/images/pandoc-starter-beamer-solarized.png" alt="beamer solarized template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/book-writeup"><code>book-writeup</code></a></h3>

<p>Finally, sometimes a simple article or slide deck doesn&rsquo;t cut it. Usually this
means I&rsquo;d like to group the writing into chapters. This template makes writing a
chapter as easy as using a &ldquo;<code>#</code>&rdquo; Markdown header.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/book-writeup/src/sample.pdf"><img src="/images/pandoc-starter-book-writeup.png" alt="book writeup template" /></a></p>

<h2>Writing Plugins for Vim</h2>

<p>If you happen to use Vim, I&rsquo;d highly recommend installing <a href="https://github.com/junegunn/goyo.vim">goyo.vim</a> for
writing. It removes all the visual frills Vim includes to make writing code
easier so you can focus on your writing without distractions.</p>

<p>I also really enjoy <a href="https://github.com/vim-pandoc/vim-pandoc">vim-pandoc</a> and <a href="https://github.com/vim-pandoc/vim-pandoc-syntax">vim-pandoc-syntax</a>. They&rsquo;re a pair of
complementary plugins for highlighting and working with Pandoc Markdown-flavored
documents. They work so well that I use them for Markdown documents even when
not using Pandoc.</p>

<h2>Reach for Markdown</h2>

<p>Writing should be a pleasant experience. With the right tools, it can be. LaTeX
is powerful but cumbersome to use. With Markdown, we can focus on our writing,
and worry about the presentation later. Pandoc can take care of the presentation
for us, so the <a href="https://github.com/jez/pandoc-starter">only thing left to do is start</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting Haskell Stack Setup on OS X]]></title>
    <link href="https://blog.jez.io/troubleshooting-haskell-stack-setup-on-os-x/"/>
    <updated>2016-08-02T21:04:08-07:00</updated>
    <id>https://blog.jez.io/troubleshooting-haskell-stack-setup-on-os-x</id>
    <content type="html"><![CDATA[<p>Stephen Diehl&rsquo;s article <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in 2016</a> does a great
job of outlining the quickest way to get a quality Haskell development
experience. I ran into a simple issue when I followed it due to a bit of an
idiosyncrasy on OS X El Capitan. I also document a few of the extra steps I took
which aren&rsquo;t mentioned explicitly in his original article.</p>

<!-- more -->


<p>This post wouldn&rsquo;t actually be necessary if it weren&rsquo;t for one thing: <a href="https://support.apple.com/en-us/HT204899">System
Integrity Protection</a> in OS X El Capitan, also known as &ldquo;rootless&rdquo;
mode. It affects Haskell&rsquo;s build and install step in a subtle (but solved) way,
and the rest of the article will cover what to watch out for when installing on
OS X.</p>

<p>If you don&rsquo;t follow these instructions and you&rsquo;re on OS X El Capitan, you&rsquo;ll
likely run into an issue that looks like <code>/usr/bin/ar: permission denied</code>. The
Stack installation instructions call this out specifically:</p>

<blockquote><p>If you are on OS X 10.11 (&ldquo;El Capitan&rdquo;) or later, GHC 7.8.4 is incompatible
with System Integrity Protection (a.k.a. &ldquo;rootless&rdquo;). GHC 7.10.2 includes a
fix, so this only affects users of GHC 7.8.4.</p></blockquote>

<p>At the risk of spoiling the surprise, we&rsquo;re going to set up Stack while taking
care to make sure that we get GHC >= 7.10. So let&rsquo;s do just that!</p>

<h2>Environment Prep (optional)</h2>

<p>Note that this step is optional and has nothing to do with OS X; I just wanted
to point it out quickly.</p>

<p>Under <a href="http://www.stephendiehl.com/posts/vim_2016.html#dev-environment">Dev Environment</a> on <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in
2016</a>, Stephen Diehl writes:</p>

<blockquote><p>Times have changed quite a bit, and the new preferred way of installing GHC in
2016 is to forgo using the system package manager for installing ghc and use
Stack to manage the path to the compiler executable and sandboxes.</p></blockquote>

<p>Stack stores it&rsquo;s metadata in the <code>~/.stack</code> folder by default. If you&rsquo;re not a
huge fan of things cluttering up your home folder, set the <code>STACK_ROOT</code> variable
in you bashrc or zshrc:</p>

<pre><code class="bash Set STACK_ROOT to avoid clutter">export XDG_DATA_HOME="$HOME/.local/share"

# Have Haskell Stack use XDG Base Directory spec
export STACK_ROOT="$XDG_DATA_HOME/stack"
</code></pre>

<p>Of course, the choice of location is up to you. In particular I&rsquo;ve chosen to
adhere to the <a href="https://wiki.archlinux.org/index.php/XDG_Base_Directory_support">XDG Base Directory specification</a> here, which you may want
to take a peek at if you&rsquo;re unfamiliar. That&rsquo;s why you see references to
<code>XDG_DATA_HOME</code>.</p>

<p>Make sure you restart your terminal to pick up the new variables before
continuing.</p>

<h2>Install Stack from Homebrew</h2>

<p>If you&rsquo;re like me, you&rsquo;ll want to take a second to purge anything
Haskell-related from previous botched setup attempts:</p>

<pre><code class="bash Wipe the slate clean"># If you had GHC installed
$ brew uninstall ghc

# If you tried and failed at installing Stack already
$ brew uninstall haskell-stack
$ rm -r ~/.stack
# If you happened to also set STACK_ROOT
$ rm -r $STACK_ROOT
</code></pre>

<p>With that out of the way, we can actually get our hands on Stack. For OS X,
we&rsquo;ll install through Homebrew:</p>

<pre><code class="console Install Stack">$ brew install haskell-stack
</code></pre>

<h2>Configure Stack, avoiding &ldquo;rootless&rdquo; issues</h2>

<p>Here&rsquo;s the trick. We need to run <code>stack setup</code> for the first time to let Stack
configure itself. But remember: we want to make sure that Stack doesn&rsquo;t set
itself up with version 7.8.4 of GHC. We can get around this by specifying an
explicit resolver to the <code>stack</code> command (you can find more information on
&ldquo;resolvers&rdquo; elsewhere):</p>

<pre><code class="bash Side-step rootless issue in setup"># Change the resolver to the most up-to-date one. This is a hack to ensure that
# get GHC version &gt; 7.8, because there's an issue with El Capitan's rootless
# mode.
stack --resolver=lts-6.10 setup
</code></pre>

<p>You&rsquo;ll notice we use the <code>--resolver=...</code> flag to force Stack to use a specific
resolver. This post will be out of date as soon as it&rsquo;s written, so check
<a href="https://www.stackage.org/snapshots">Stackage</a> to find the latest LTS snapshot.</p>

<h2>Return to Vim and Haskell in 2016</h2>

<p>That&rsquo;s it for the environment setup! Now you&rsquo;ll want to turn your attention to
configuring Vim.</p>

<p>The steps to set up Vim are platform independent, so now that we&rsquo;ve set up Stack
correctly, you can head over to <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in 2016</a> to
finish things out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SML Dev Setup]]></title>
    <link href="https://blog.jez.io/sml-dev-setup/"/>
    <updated>2016-03-09T20:06:15-06:00</updated>
    <id>https://blog.jez.io/sml-dev-setup</id>
    <content type="html"><![CDATA[<p>When it comes right down to it, SML is a pretty great language. It&rsquo;s clear that
extensive thought has gone into its design and implementation. I quite enjoy
programming in SML, due in no small part to my collection of workflow hacks that
make editing and developing with SML responsive and interactive.</p>

<!-- more -->


<p>We&rsquo;re going to be walking through a couple easy steps you can take to make
developing SML feel more fluid, both in and out of your editor. I have a slight
preference for Vim on OS X, but many of these steps are platform agnostic.</p>

<h2>Installing SML Locally</h2>

<p>While developing SML in a remote environment like the shared Andrew Unix
machines makes it easy to dive right in, working with SML for prolonged periods
of time is best done locally.</p>

<p>On OS X and Ubuntu, the two most popular SML implementations are already
packaged. Take the time to install a version of SML right now. At CMU, we use
<a href="http://smlnj.org/">SML/NJ</a>, which is convenient because it has a REPL that lets you play
around with SML interactively. If you&rsquo;d like to play around with compiling and
distributing programs written in SML, you might want to install <a href="http://www.mlton.org/">MLton</a>.</p>

<pre><code class="bash Install SML from your package manager"># SML/NJ on OS X
brew install smlnj
# -- or --
# MLton on OS X
brew install mlton

# SML/NJ on Ubuntu
sudo apt-get install smlnj
# -- or --
# MLton on Ubuntu
sudo apt-get install mlton
</code></pre>

<p>Feel free to install both if you&rsquo;d like; they&rsquo;ll play nicely with each other and
each offers advantages over the other.</p>

<p>Note for OS X users: if you&rsquo;ve never used <a href="http://brew.sh">Homebrew</a> before, you&rsquo;ll need
to <a href="http://brew.sh">install it first</a>.</p>

<h2>Getting Comfortable with SML/NJ</h2>

<p>The rest of these steps should apply regardless of whether you&rsquo;re working on SML
locally or remotely.</p>

<p>One thing that I&rsquo;ve seen far too many times from course documentation is that
they tell students to run their code like this:</p>

<ol>
<li>Run <code>sml</code></li>
<li>Type <code>use "foo.sml";</code> or <code>CM.make "sources.cm";</code> at the REPL</li>
</ol>


<p>Don&rsquo;t get me wrong; this works, but there&rsquo;s a better way. Being responsible
CLI-citizens, we should always be looking for ways to tab-complete. Let&rsquo;s do
this by changing our workflow:</p>

<ol>
<li>Run <code>sml foo.sml</code> or <code>sml -m sources.cm</code></li>
</ol>


<p>Look at that! We&rsquo;ve,</p>

<ul>
<li>dropped a step (having to launch the REPL first), and</li>
<li>introduced tab completion into our workflow (because the shell has filename
completion)</li>
</ul>


<p>It&rsquo;s the little things, but they add up.</p>

<h2>Enhancing the REPL</h2>

<p>Speaking of the little things, when using the SML REPL, you don&rsquo;t have access to
all the usual command line niceties like command history and access to arrow
keys for editing, let alone Vi-like keybindings. To get started, you&rsquo;ll have to
change how you launch the SML/NJ REPL. In particular, we&rsquo;re going to preface our
commands with <code>rlwrap</code>:</p>

<pre><code class="bash"># instead of this...
$ sml

# use this:
$ rlwrap sml
</code></pre>

<p><code>rlwrap</code> stands for &ldquo;readline wrap.&rdquo; Readline is a library that simply adds to a
REPL program all the features mentioned above:</p>

<ul>
<li>Command history tracking</li>
<li>Line editing with arrow keys</li>
<li>Configurability through the <code>~/.inputrc</code> file

<ul>
<li>We can use this to get fancy features like Vi keybindings</li>
</ul>
</li>
</ul>


<p>For more information, see <a href="https://github.com/jez/dotfiles/blob/ed8e531eebe43a8aef05fc4cb768157d03408cea/inputrc#L12-L14">these lines</a> of my inputrc, a small part of
my <a href="https://github.com/jez/dotfiles">dotfiles repo</a> on GitHub.</p>

<h2>Setting Up Vim</h2>

<p>Programming is so much more enjoyable when you&rsquo;re not fighting your editor. For
me, this means striving to get the most out of Vim. In this section, I&rsquo;ll
outline all the cool tips and tricks I have for developing SML in Vim.</p>

<p>But first, if you&rsquo;ve never taken a look into how to configure Vim, I suggest you
start out by walking through this quick workshop called <a href="https://github.com/jez/vim-as-an-ide">Vim as an
IDE</a>. It&rsquo;ll teach you where to start when configuring Vim and get
you set up with a bunch of standard plugins that improve on the standard Vim
experience tenfold.</p>

<p>No actually, take a second and <a href="https://github.com/jez/vim-as-an-ide">walk through it</a>. We&rsquo;ll still be
here when you&rsquo;re done, and you&rsquo;ll appreciate Vim more when you&rsquo;re done.</p>

<h3>Syntastic</h3>

<p>From the Syntastic documentation:</p>

<blockquote><p>Syntastic is a syntax checking plugin for Vim that runs files through
external syntax checkers and displays any resulting errors to the user. This
can be done on demand, or automatically as files are saved. If syntax errors
are detected, the user is notified and is happy because they didn&rsquo;t have to
compile their code or execute their script to find them.</p></blockquote>

<p>And the best part? Syntastic ships with a checker for SML by default if you
have SML/NJ installed.</p>

<p>If you didn&rsquo;t just install <a href="https://github.com/scrooloose/syntastic">Syntastic</a> from the Vim as an IDE
walkthrough, you can <a href="https://github.com/scrooloose/syntastic">visit their homepage</a> for installation
instructions. Go ahead and do this now, then try writing this in a file called
<code>test.sml</code>:</p>

<pre><code class="sml test.sml">val foo : string = 42
</code></pre>

<p>You should see an &lsquo;x&rsquo; next to the line and a description of the error from the
type checker. You can imagine how handy this is.</p>

<h3>Extra Syntastic Setup</h3>

<p>Syntastic has their own set of <a href="https://github.com/scrooloose/syntastic#settings">recommended settings</a> that
you can add at your discretion. At the very least, I&rsquo;d suggest adding these
lines to your vimrc:</p>

<pre><code class="vim .vimrc">...

augroup mySyntastic
  " tell syntastic to always stick any detected errors into the location-list
  au FileType sml let g:syntastic_always_populate_loc_list = 1

  " automatically open and/or close the location-list
  au FileType sml let g:syntastic_auto_loc_list = 1
augroup END

" press &lt;Leader&gt;S (i.e., \S) to not automatically check for errors
nnoremap &lt;Leader&gt;S :SyntasticToggleMode&lt;CR&gt;

...
</code></pre>

<p>By default, whenever you save your file, Syntastic will place symbols in Vim&rsquo;s
<em>sign column</em> next to lines with errors. The first two settings above tell
Syntastic to also show a summarized list of errors at the bottom of the screen.
The final setting lets you press <code>&lt;Leader&gt;S</code> (which is usually just <code>\S</code>) to
disable all that. This is useful when you&rsquo;re still unfinished and you know your
SML isn&rsquo;t going to type check. Press it again to re-enable it.</p>

<p>Also, a tip for those who&rsquo;ve never used Vim&rsquo;s location list feature before: you
can close the list with <code>:lclose</code>.</p>

<h3><code>vim-better-sml</code></h3>

<p>The curious at this point might be wondering if Syntastic is smart enough to
figure out when the file you&rsquo;re using requires a CM file to compile and uses it
to show you where the errors are instead. As it turns out: no, <a href="https://github.com/scrooloose/syntastic/pull/1719">that&rsquo;s not a
feature Syntastic wants to include</a> by default. However, the
functionality isn&rsquo;t hard to implement, and there&rsquo;s already a plugin for it!</p>

<p><a href="https://github.com/jez/vim-better-sml">vim-better-sml</a> is one of my Vim plugins. Here&rsquo;s a quick
rundown of its features:</p>

<ul>
<li>As already mentioned, it will detect when your file requires a CM file to
build, and will pass along the information to Syntastic</li>
<li><code>let</code> expressions are indented one level under <code>fun</code> declarations</li>
<li><code>*.sig</code> files are properly detected as SML signature files</li>
<li>Apostrophe characters are treated as keywords characters</li>
<li>The comment string is properly registered for SML files</li>
</ul>


<p>For more information, including how to install it, check out the homepage:
<a href="https://github.com/jez/vim-better-sml">vim-better-sml</a>.</p>

<h2>General Vim Settings</h2>

<p>As a quick addendum, one common complaint people have when editing SML is that
it forces the line to wrap if it extends to 80 characters. Some people don&rsquo;t
like that it does this, and others don&rsquo;t like that it doesn&rsquo;t do it frequently
enough (namely, it only wraps the line if your cursor extends past 80
characters, not the end of the line).</p>

<p>If you don&rsquo;t want Vim to do any of this wrapping, run this:</p>

<pre><code class="vim Disable hard line wrapping">setlocal textwidth=0
</code></pre>

<p>If you&rsquo;d like this change to persist between Vim sessions, add it to
<code>~/.vim/after/ftplugin/sml.vim</code>. These folders and file likely don&rsquo;t exist
yet; you&rsquo;ll have to create them. The <code>after</code> folder in Vim is used to override
settings loaded from plugins. As you might have guessed, files in here are run
after plugin code is.</p>

<p>Conversely, if you&rsquo;d like a little better idea when Vim&rsquo;s going to hard wrap
your line, you can add this line to your vimrc:</p>

<pre><code class="vim Show a color column">set colorcolumn+=0
</code></pre>

<p>Note: this will only work if you&rsquo;re using Vim 7.4 or above. This setting tells
Vim to draw a solid column at the same width as the value of the <code>textwidth</code>
setting.</p>

<h2>TL;DR</h2>

<p>We covered a lot, so here&rsquo;s a quick recap:</p>

<ul>
<li>Install SML locally. It&rsquo;s super easy to do on OS X and Linux (use your package
manager), and means you don&rsquo;t have have a Wi-Fi connection to develop SML.</li>
<li>Invest time into learning Vim. Here&rsquo;s a reference: <a href="https://github.com/jez/vim-as-an-ide">Vim as an
IDE</a>.</li>
<li>Install <a href="https://github.com/scrooloose/syntastic">Syntastic</a>. It tells you what lines your errors are on.</li>
<li>Install <a href="https://github.com/jez/vim-better-sml">vim-better-sml</a>. It includes some features Syntastic
doesn&rsquo;t by default, and includes a couple extras.</li>
<li>Consider using <code>setlocal textwidth=0</code> or <code>set colorcolumn+=0</code> to deal with the
80-character restriction when writing SML files.</li>
</ul>


<p>And as always, you can see even more Vim settings in my <a href="https://github.com/jez/dotfiles">dotfiles
repo</a> on GitHub.</p>
]]></content>
  </entry>
  
</feed>
