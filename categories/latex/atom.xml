<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: latex | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/latex/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2019-12-29T15:31:04-05:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reach for Markdown, not LaTeX]]></title>
    <link href="https://blog.jez.io/reach-for-markdown/"/>
    <updated>2017-02-26T21:26:53-05:00</updated>
    <id>https://blog.jez.io/reach-for-markdown</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written <a href="/2014/10/06/offline-latex-development/">in the past</a> (<a href="/2015/01/10/offline-latex-development-part-2/">twice</a>) about how to
streamline the writing process when using LaTeX. Since then, I&rsquo;ve found that I
enjoy writing even more when I don&rsquo;t have to reach for LaTeX at all. By reaching
first for Markdown, then for LaTeX when necessary, writing is easier and more
enjoyable.</p>

<!-- more -->


<h2>Writing at the Command Line</h2>

<p>Last year, I <a href="https://jez.io/talks/writing-at-the-command-line/">gave a talk</a> about the merits of writing primarily at
the command line. My main claims were that when writing we want:</p>

<ul>
<li>an open document format (so that our writings are future proof)</li>
<li>to be using open source software (for considerations of privacy and cost)</li>
<li>to optimize for the &ldquo;common case&rdquo;</li>
<li>to be able to write for print and digital (PDFs, web pages, etc.)</li>
</ul>


<p>Markdown solves these constraints nicely:</p>

<ul>
<li>It&rsquo;s a plain text format&mdash;plain text has been around for decades and will
be for decades more.</li>
<li>Given a plain text format, we can bring our own text editor.</li>
<li>Plenty of open source programs manipulate Markdown.</li>
<li>When we need advanced features, we can mix LaTeX into our Markdown documents.</li>
</ul>


<p>For those unfamiliar with Markdown, it&rsquo;s super quick to pick up. If you only
look at one guide, see this one:</p>

<ul>
<li><a href="http://commonmark.org/help/">CommonMark</a></li>
</ul>


<p>If you want to start comparing features available in certain implementations of
Markdown:</p>

<ul>
<li><a href="https://guides.github.com/features/mastering-markdown/">GitHub Flavored Markdown</a></li>
<li><a href="https://daringfireball.net/projects/markdown/">Markdown.pl</a></li>
<li><a href="http://pandoc.org/MANUAL.html#pandocs-markdown">Pandoc Markdown</a></li>
</ul>


<p>For more on why you should want to be writing at the command line, you can
<a href="https://jez.io/talks/writing-at-the-command-line/">check out the talk slides</a>.</p>

<h2>Pandoc Starter</h2>

<p>The central tool I spoke about in <em>Writing at the Command Line</em> is <a href="https://pandoc.org/">Pandoc</a>.
Pandoc is an amazingly simple command line program that takes in Markdown files
and spits out really anything you can think of.</p>

<p>To make using Pandoc even easier than it already is, I put together a
<a href="https://github.com/jez/pandoc-starter">collection of starter templates</a>. They&rsquo;re all available <a href="https://github.com/jez/pandoc-starter">on
Github</a> if you&rsquo;d prefer to dive right in.</p>

<p>There are currently six different templates, specialized for the kind of
document you&rsquo;d like to create. Each has a <code>README</code> for installation and usage
instructions, as well as a <code>Makefile</code> for invoking <code>pandoc</code> correctly.</p>

<p>All the templates generate PDFs from Markdown by way of LaTeX. In addition to
Pandoc, you&rsquo;ll also need LaTeX installed locally.</p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/article"><code>article</code></a></h3>

<p>This template uses the standard LaTeX <code>article</code> document class. It&rsquo;s a
no frills, no nonsense choice.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/article/src/sample.pdf"><img src="/images/pandoc-starter-article.png" alt="article template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/tufte-handout"><code>tufte-handout</code></a></h3>

<p>As an alternative to the <code>article</code> document class, there&rsquo;s also the
<code>tufte-handout</code> document class. It originates from the style Edward Tufte
popularized in his books and articles on visualization and design.</p>

<p>Apart from a different font (it uses Palatino instead of the default Computer
Modern), this template features the ability add side notes to your documents. I
often find myself reaching for this template when I want to disguise the fact
that I&rsquo;m secretly using LaTeX.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/tufte-handout/src/sample.pdf"><img src="/images/pandoc-starter-tufte-handout.png" alt="tufte-handout template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/homework"><code>homework</code></a></h3>

<p>A second alternative to the <code>article</code> document class is the <code>homework</code> document
class. It works nicely for homework assignments and problem sets. The class
itself has a number of handy features, like:</p>

<ul>
<li>the option to put your name on every page, or only on the first page</li>
<li>an option to use wide or narrow margins</li>
<li>most of the AMS Math packages you&rsquo;d include in the process of typesetting a
math assignment</li>
<li>a convenient environment for typesetting induction proofs</li>
</ul>


<p>For more features and usage information, check out <a href="/2015/01/10/the-latex-homework-document-class/">this blog post</a> or
<a href="https://github.com/jez/latex-homework-class">the source</a> on GitHub.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/homework/src/sample.pdf"><img src="/images/pandoc-starter-homework.png" alt="homework template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/beamer"><code>beamer</code></a></h3>

<p>LaTeX provides the <code>beamer</code> document class for creating slides; this template
makes it even easier to use:</p>

<ul>
<li>Make a new slide with a &ldquo;<code>##</code>&rdquo; header</li>
<li>Make a section divider with a &ldquo;<code>#</code>&rdquo; header</li>
<li>Mix lists, links, code, and other Markdown features you&rsquo;re familiar with to
create the content for a slide.</li>
</ul>


<p>So basically, just write the outline for your talk, and Pandoc takes care of
making the slides&mdash;it doesn&rsquo;t get much simpler.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/beamer/src/sample.pdf"><img src="/images/pandoc-starter-beamer.png" alt="beamer template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/beamer-solarized"><code>beamer-solarized</code></a></h3>

<p>The default beamer styles are pretty boring. To add a bit of flair and
personality to my slide decks, I made a Solarized theme for beamer.</p>

<p>In addition to the screenshot below, the <a href="https://jez.io/talks/writing-at-the-command-line/">Writing at the Command
Line</a> slides I linked to earlier also use this theme, if you want
to see a less contrived example.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/beamer-solarized/src/sample.pdf"><img src="/images/pandoc-starter-beamer-solarized.png" alt="beamer solarized template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/book-writeup"><code>book-writeup</code></a></h3>

<p>Finally, sometimes a simple article or slide deck doesn&rsquo;t cut it. Usually this
means I&rsquo;d like to group the writing into chapters. This template makes writing a
chapter as easy as using a &ldquo;<code>#</code>&rdquo; Markdown header.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/book-writeup/src/sample.pdf"><img src="/images/pandoc-starter-book-writeup.png" alt="book writeup template" /></a></p>

<h2>Writing Plugins for Vim</h2>

<p>If you happen to use Vim, I&rsquo;d highly recommend installing <a href="https://github.com/junegunn/goyo.vim">goyo.vim</a> for
writing. It removes all the visual frills Vim includes to make writing code
easier so you can focus on your writing without distractions.</p>

<p>I also really enjoy <a href="https://github.com/vim-pandoc/vim-pandoc">vim-pandoc</a> and <a href="https://github.com/vim-pandoc/vim-pandoc-syntax">vim-pandoc-syntax</a>. They&rsquo;re a pair of
complementary plugins for highlighting and working with Pandoc Markdown-flavored
documents. They work so well that I use them for Markdown documents even when
not using Pandoc.</p>

<h2>Reach for Markdown</h2>

<p>Writing should be a pleasant experience. With the right tools, it can be. LaTeX
is powerful but cumbersome to use. With Markdown, we can focus on our writing,
and worry about the presentation later. Pandoc can take care of the presentation
for us, so the <a href="https://github.com/jez/pandoc-starter">only thing left to do is start</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The LaTeX homework Document Class]]></title>
    <link href="https://blog.jez.io/2015/01/10/the-latex-homework-document-class/"/>
    <updated>2015-01-10T17:00:00-06:00</updated>
    <id>https://blog.jez.io/2015/01/10/the-latex-homework-document-class</id>
    <content type="html"><![CDATA[<p>There are LaTeX document classes for typesetting books, articles, exams,
presentations, and more. Now, there&rsquo;s one for homework assignments, too.</p>

<!-- more -->


<h2><a href="https://github.com/jez/latex-homework-class">Source</a></h2>

<p>Check out and download the source <a href="https://github.com/jez/latex-homework-class">on GitHub</a>.</p>

<h2>What</h2>

<p>This is a LaTeX document class. That means you use it with
<code>\documentclass{homework}</code> at the top of the document. It provides a document
layout and some helper commands that make working with questions easy.</p>

<h2>Installation</h2>

<p>Certainly the easiest way to start using this template is to copy the .cls file
to your computer in the same directory as your LaTeX project directory.</p>

<p>A better way to install this template is to fork <a href="https://github.com/jez/latex-homework-class">the above
repository</a> and then clone that fork to a particular folder on your
computer:</p>

<pre><code class="bash Install">git clone https://github.com/&lt;your-username&gt;/latex-hw-template
</code></pre>

<p>Then, whenever you need to use the template, you can copy the template wherever.
Also, if there are ever any updates, you can simply run</p>

<pre><code class="bash Update">git pull
</code></pre>

<p>to update the template.</p>

<h3>Preferred Installation</h3>

<p>The <em>best</em> way to install this file is to <a href="https://github.com/jez/latex-solarized#installation">follow the instructions
here</a>, keeping in mind that you&rsquo;re trying to install a <code>.cls</code> file
instead of three <code>.sty</code> files.</p>

<h2>Usage</h2>

<p>See the <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> file for an exhaustive list of usage
examples. There are also comments explaining features for which there are no
examples given.</p>

<p>The result is the following:</p>

<p><a class="image-link" href="/images/homework-class.png"><img src="/images/homework-class.png"></a></p>

<p>The class file also has a bunch of helper <code>\usepackage</code>s that you might want to
take a look at in <a href="https://github.com/jez/latex-homework-class/blob/master/homework.cls">homework.cls</a>.</p>

<p>For your convenience, the file <a href="https://github.com/jez/latex-homework-class/blob/master/template.tex">template.tex</a> is a nearly-empty
LaTeX file that contains the bare essentials to get started using the homework
class.</p>

<h3><code>\question</code></h3>

<p>To start a question, just type <code>\question</code>. It will add the text &ldquo;Question #&rdquo;
with a line underneath to the document. If you&rsquo;d like to change &ldquo;Question&rdquo; to
something else, use</p>

<pre><code class="tex Change the Question Type">\renewcommand{\questiontype}{Whatever You Want}
% Now questions will be titled "Whatever You Want #"
</code></pre>

<p>Similarly, if you ever need to skip numbers, you can do</p>

<pre><code class="tex Non-contiguous Question Numbers">\setcounter{\questionCounter}{&lt;target number - 1&gt;}
</code></pre>

<p>So, to skip to the 10th question, <code>&lt;target number - 1&gt;</code> = 9.</p>

<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3><code>\question*</code></h3>

<p>Some classes like to give their homework questions fancy names. If this is the
case, you can use <code>\question*{The Question's Name}</code> to make a named question.</p>

<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3>Question Parts</h3>

<p>Another common thing on homework assignments is to have multi-part questions. To
deal with these, use the form</p>

<pre><code class="tex Lettered Question Parts">\begin{alphaparts}
  \questionpart
    This will be part (a).
  \questionpart
    This will be part (b).
\end{alphaparts}
</code></pre>

<p>or
<code>tex Numbered Question Parts
\begin{arabicparts}
  \questionpart
    This will be part x.1.
  \questionpart
    This will be part x.2.
\end{arabicparts}
</code></p>

<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3>Induction Proofs</h3>

<p>In math classes, induction proofs come up a lot, and they almost always have the
same form: base case, induction hypothesis, and induction step.</p>

<pre><code class="tex Induction Environment">\begin{induction}
  \basecase
    This is my fancy base case.
  \indhyp
    Assume some claim.
  \indstep
    Finish off the proof
\end{induction}
</code></pre>

<h2>Markdown</h2>

<p>One of my favorite features of this document class is that it redefines the
<code>\section</code> macros. This means you can use tools like Markdown, which have a
concise syntax, together with a tool like <a href="http://johnmacfarlane.net/pandoc/"><code>pandoc</code></a> to convert Markdown
into LaTeX. As an example, consider that we have the Markdown:</p>

<pre><code class="plain my-homework.md">#

This is my first answer.

#

This is my next answer.

$$a^2 + b^2 = c^2$$
</code></pre>

<p>Running <code>pandoc -f markdown -t latex my-homework.md</code> will output</p>

<pre><code class="tex Convert markdown to LaTeX">% $ pandoc -f markdown -t latex my-homework.md
\section{}\label{section}

This is my first answer.

\section{}\label{section-1}

This is my next answer.

\[a^2 + b^2 = c^2\]
</code></pre>

<p>And since <code>\section</code> is the same thing as \question, we&rsquo;re golden, and this
compiles as we&rsquo;d want it to. Throw it into the blank
<a href="https://github.com/jez/latex-homework-class/blob/master/template.tex">template.tex</a> file included in the repo, and you&rsquo;ve got yourself
a typeset homework.</p>

<h2>More</h2>

<p>I&rsquo;ve make a lot of other LaTeX-related posts. Be sure to <a href="/categories#latex">check them out</a>
as well! My hope is that you find something that makes developing LaTeX just
that much easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline LaTeX Development - Part 2]]></title>
    <link href="https://blog.jez.io/2015/01/10/offline-latex-development-part-2/"/>
    <updated>2015-01-10T16:00:00-06:00</updated>
    <id>https://blog.jez.io/2015/01/10/offline-latex-development-part-2</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve already written about how I develop LaTeX offline in Vim using GNU Make.
Recently, though, I found a tool that implements another feature that GUI
editors had to themselves: splitting panes.</p>

<!-- more -->


<h2><a href="/2014/10/06/offline-latex-development/">Offline LaTeX Development</a></h2>

<p>If you missed it, check out my previous post here before reading on. There&rsquo;s a
lot of handy stuff there!</p>

<h2>Split Panes</h2>

<p>Out of the box, tools like ShareLaTeX and TeXShop feature split pane editing:
you can have your LaTeX on one half of the screen and the PDF on the other.
Previously, I justified not having this feature with the reasoning that the
<code>:WV</code> binding (something I explained <a href="/2014/10/06/offline-latex-development/">here</a>) immediately opened up the
PDF and the windows switched.</p>

<p>However, I read about a tool called <a href="http://ianyh.com/amethyst/">Amethyst</a> on Hacker News the
other day and immediately realized it&rsquo;s potential for improving my LaTeX setup.
Amethyst is a tool that strives to be a tiling window manager like xmonad for OS
X. At times it falls short of this goal, but for the most part it works really
well. Just open up two apps, like MacVim and Preview, and it&rsquo;ll show them
side-by-side with no added effort. There are also plenty of keybindings to
manipulate the window arrangements.</p>

<p>Here&rsquo;s a screenshot of what the new setup looks like:</p>

<p><a class="image-link" href="/images/latex-amethyst.png"><img src="/images/latex-amethyst.png"></a></p>

<p>After looking into it a little more, it looks like there are other OS X tools
for spitting the screen into two panes, like <a href="http://www.bettertouchtool.net/">BetterTouchTool</a>, though I
haven&rsquo;t actually tried any of them out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline LaTeX Development]]></title>
    <link href="https://blog.jez.io/2014/10/06/offline-latex-development/"/>
    <updated>2014-10-06T18:00:00-04:00</updated>
    <id>https://blog.jez.io/2014/10/06/offline-latex-development</id>
    <content type="html"><![CDATA[<p>While online clients like ShareLaTeX or writeLaTeX are popular for getting
started with LaTeX quickly, developing LaTeX locally with Vim and the command
line is my preferred LaTeX workflow. In this post, I&rsquo;ll describe the changes
I&rsquo;ve made that make working with LaTeX on the command line a seamless
experience.</p>

<!-- more -->


<h2>Install LaTeX</h2>

<p>Obviously, to work with LaTeX locally, you&rsquo;ll need LaTeX installed. To check if
you already have it installed, you can run <code>which pdflatex</code>. If it&rsquo;s installed,
this command will tell you the path to program. Otherwise, it won&rsquo;t print
anything.</p>

<h3>On Linux</h3>

<p>Installing LaTeX on Linux isn&rsquo;t too bad. Usually it&rsquo;s included in your
distribution&rsquo;s package manager. I&rsquo;ll be focusing on OS X for the majority of
this post though, so Google around if you end up having trouble.</p>

<h3>On OS X</h3>

<p>To install LaTeX on a Mac, we&rsquo;ll be installing MacTeX, which includes the
command line LaTeX utilities as well as a couple graphical clients for LaTeX
development. You can try compiling from source, but as Homebrew points out when
you try to <code>brew install latex</code>:</p>

<pre><code class="plain">$ brew install latex
Error: No available formula for latex
Installing TeX from source is weird and gross, requires a lot of patches,
and only builds 32-bit (and thus can't use Homebrew deps on Snow Leopard.)

We recommend using a MacTeX distribution: http://www.tug.org/mactex/
</code></pre>

<p>With that in mind, head on over to
<a href="http://www.tug.org/mactex/">http://www.tug.org/mactex/</a> and download the file
<code>MacTeX.pkg</code>. Once this has downloaded and you&rsquo;ve clicked through the
installer, you should be ready to go with LaTeX. Verify this by running <code>which
pdflatex</code> again.</p>

<h2>Use Vim</h2>

<p>The biggest productivity improvement you gain from developing LaTeX locally is
that you get to use Vim. Make sure you have a nice colorscheme for both your
terminal and for Vim. <strong>I can&rsquo;t stress enough how important it is to make your
terminal look nice</strong>: you want to enjoy your terminal experience, and this is
one of the easiest ways to do so.</p>

<h2>Use Make</h2>

<p>Compiling LaTeX is pretty straightforward. To generate a PDF, all you have to do
is run the command</p>

<pre><code class="bash">$ pdflatex &lt;myfile&gt;.tex
</code></pre>

<p>and you&rsquo;ll get a file called <code>&lt;myfile&gt;.pdf</code> in the current directory, plus some
intermediate files. We can go one step further and put a bunch of useful build
targets into a Makefile and use it to build our PDF:</p>

<pre><code class="make LaTeX Makefile https://gist.github.com/jez/b248a409d19c9f1c94cd"># NOTE: Change "written" to the name of your TeX file with no extension
TARGET=written

all: $(TARGET).pdf

## Generalized rule: how to build a .pdf from each .tex
LATEXPDFS=$(patsubst %.tex,%.pdf,$(wildcard *.tex))
$(LATEXPDFS): %.pdf: %.tex
  pdflatex -interaction nonstopmode $(patsubst %.pdf,%.tex,$@)

clean:
  rm *.aux *.log || true

veryclean: clean
  rm $(TARGET).pdf

view: $(TARGET).pdf
  if [ "Darwin" = "$(shell uname)" ]; then open $(TARGET).pdf ; else evince $(TARGET).pdf ; fi

submit: $(TARGET).pdf
  cp $(TARGET).pdf ../

print: $(TARGET).pdf
  lpr $(TARGET).pdf

.PHONY: all clean veryclean view print
</code></pre>

<p>If you save this to a file called <code>Makefile</code> in the same directory as your LaTeX
file, we can just run <code>make</code> instead of running <code>pdflatex &lt;myfile&gt;.tex</code>!</p>

<p>As you can see, there are a bunch of other handy targets here:</p>

<ul>
<li><code>make clean</code> will remove all intermediate files that are created.</li>
<li><code>make veryclean</code> will remove all intermediate files and the compiled PDF file.</li>
<li><code>make view</code> will compile the file and then open it up in a PDF viewer (if
you&rsquo;re on OS X, or on Linux and have <code>evince</code> installed).</li>
<li><code>make print</code> will send your document to the default printer with the default
options for that printer.</li>
<li><code>make submit</code> will copy your file into the parent directory. This is handy
when you&rsquo;re working in a subfolder on an assignment to isolate the
intermediate files, but your class has provided a handin script that needs the
PDF file to be in the parent directory.</li>
</ul>


<h2>Workflow Tips</h2>

<p>Right now, our workflow looks like this:</p>

<ul>
<li>Create TeX file</li>
<li>Edit in Vim</li>
<li>Switch to terminal</li>
<li>Run make view to compile and view</li>
</ul>


<p>We can actually optimize this workflow to one less step: we don&rsquo;t have to get
out of Vim to run make!</p>

<p>Vim has a command <code>:make</code> that will look for a Makefile in the current directory
and run it&rsquo;s <code>all</code> target. It also takes a target as an optional argument, so we
can do <code>:make view</code> to compile and view the document from within Vim!</p>

<p>Taking this one step further, we can add a command to shorten this. If we add</p>

<pre><code class="vim Save, Compile and View in Vim">command WV w | make view
</code></pre>

<p>to our <code>.vimrc</code>, we&rsquo;ll only have to type <code>:WV</code> to save, compile, and view our
PDF output.</p>

<h2>Wrap Up</h2>

<p>That&rsquo;s it! I like this experience for a bunch of reasons:</p>

<ul>
<li><strong>It&rsquo;s faster</strong>. Compiling LaTeX without having to wait for a web client to
load is really nice.</li>
<li><strong>It&rsquo;s more stable</strong>. You can still edit, compile, and view your work if you
don&rsquo;t have access to the Internet.</li>
<li><strong>It&rsquo;s faster</strong>. Using Vim to edit text is much more convenient than a
standard text editor.</li>
</ul>


<p>Do you have a LaTeX tip, a fancier Makefile, or a favorite vim plugin for LaTeX?
Share it in the comments!</p>

<h2><a href="/2015/01/10/offline-latex-development-part-2/">Part 2</a>!</h2>

<p>Actually that&rsquo;s not it, there&rsquo;s more! I wrote a <a href="/2015/01/10/offline-latex-development-part-2/">Part 2</a> to this post, which you
should definitely check out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized LaTeX Listings]]></title>
    <link href="https://blog.jez.io/2014/10/04/solarized-latex-listings/"/>
    <updated>2014-10-04T06:35:05-04:00</updated>
    <id>https://blog.jez.io/2014/10/04/solarized-latex-listings</id>
    <content type="html"><![CDATA[<p>Out of the box, LaTeX listings are pretty bad. With a bit of work, you can ascribe some colors to the code, but you&rsquo;re still stuck with choosing a theme. Given that I recently just switched to the Solarized colorscheme in Vim and iTerm2, I made a LaTeX package that styles code listings with the predefined Solarized light colors.</p>

<!-- more -->


<h2><a href="https://github.com/jez/latex-solarized">Source</a></h2>

<p>The source for this theme is on GitHub, and the README has pretty good documentation. Here&rsquo;s an example of the final result:</p>

<p><a class="image-link" href="/images/solarized-light-screenshot.png"><img src="/images/solarized-light-screenshot.png"></a></p>

<p>After you install them in the right place, you can include <code>\usepackage{solarized-light}</code> to turn source code listings light (as in above), <code>\usepackage{solarized-dark}</code> to have listings styled with the dark Solarized theme, and just <code>\usepackage{solarized}</code> to have access to the raw Solarized color codes (see the source for their names).</p>

<p>Once you&rsquo;ve done this, you just have to include your code in your LaTeX file using the <code>listings</code> packages. You might want to check out <a href="http://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings">the LaTeX wiki</a> for more information on how to get started quickly with code listings, or <a href="http://mirror.hmc.edu/ctan/macros/latex/contrib/listings/listings.pdf">the official documentation</a> for a more comprehensive reference.</p>
]]></content>
  </entry>
  
</feed>
