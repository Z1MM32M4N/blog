<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debugging | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/debugging/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2020-06-07T16:49:46-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Search Down the Stack]]></title>
    <link href="https://blog.jez.io/search-down-the-stack/"/>
    <updated>2020-06-06T19:08:20-05:00</updated>
    <id>https://blog.jez.io/search-down-the-stack</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve found it useful to search though the source code of things lower in
the stack lately. For example I saw an error something like this at work
recently:</p>

<pre><code>‚ùØ rake test
symbol lookup error: /home/jez/.../foo.so: undefined symbol bar
</code></pre>

<p>I was pretty confused. Modulo the names of commands and files, this was
pretty much all the output.</p>

<p>So I started searching. First I searched through my codebase for
<code>"symbol lookup error"</code>, but found nothing. Surely that string exists
somewhere. That must mean it&rsquo;s coming from lower in the stack?</p>

<p>The next level lower would mean third party Ruby gems. At work we use
Bundler <a href="https://bundler.io/v2.0/guides/deploying.html#manual-deployment">in a mode</a> where it installs all gems into a single
convenient folder in the current directory: <code>./vendor/bundle/</code>. But a
search in that folder turned up nothing again. So&hellip; further down?</p>

<p>If it&rsquo;s not from the app, and not from the gems, then maybe it&rsquo;s in Ruby
itself? I cloned the <a href="https://github.com/ruby/ruby">Ruby source</a>, checked out the <a href="https://github.com/ruby/ruby/tree/v2_6_5">version tag</a> for
the Ruby version we&rsquo;re running, and searched for <code>"symbol lookup error"</code>
once again. And again nothing!</p>

<p>There&rsquo;s still plenty of layers below us, so let&rsquo;s keep peeling them
back. Ruby is written in C, which means we should check libc next (the C
standard library). There are multiple libc implementations, but I was
running this on Linux, so let&rsquo;s check GNU libc (glibc). glibc is <a href="https://www.gnu.org/software/libc/sources.html">isn&rsquo;t
on GitHub</a>, but that&rsquo;s not a huge deterrant. Here&rsquo;s the search:</p>

<pre><code>‚ùØ rg -t c 'symbol lookup error'
dl-lookup.c
876:      _dl_signal_cexception (0, &amp;exception, N_("symbol lookup error"));
</code></pre>

<p>That&rsquo;s a bit of a smoking gun! After all those layers, we found our
error message in libc itself. (This gave me a lot of leads on the problem
at hand, e.g., I had definitely ruled out a problem in my app or its
dependencies, and I was thinking, &ldquo;probably something is wrong about
how <code>foo.so</code> was compiled.&rdquo; There&rsquo;s a fun story here about how Ruby C
extensions work, but that&rsquo;s a <a href="/linkers-ruby-c-exts/">tangent for another time</a>.)</p>

<p>My point is that <a href="https://livegrep.com/search/linux">searching all the code</a> is a super power, and it
applies to more than just searching the code we&rsquo;ve written. What a
blessing that the tools we&rsquo;re building on, like Ruby and GNU libc, are
all open source!</p>

<p>The next time it looks like a problem is outside the scope of your app&rsquo;s
code, maybe try searching the code:</p>

<ul>
<li>inside your gems or packages!</li>
<li>inside your language&rsquo;s standard library!

<ul>
<li>Some IDEs will even let you jump-to-def into core libraries üòÆ</li>
</ul>
</li>
<li>inside your language&rsquo;s runtime

<ul>
<li>(if you&rsquo;re using a language with a runtime like Ruby or Python or
even <a href="https://github.com/v8/v8">JavaScript</a>)</li>
</ul>
</li>
<li>powering your operating system kernel! <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
</ul>


<p>For me, I&rsquo;ve already noticed it help save me time and give me more
context when I&rsquo;m debugging.</p>

<!-- vim:tw=72
-->

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This might sound daunting, but sometimes it can be useful. A good thing to keep in mind: every <strong>system call</strong> like <code>open(2)</code> or <code>write(2)</code> or <code>select(2)</code> (and every other function from section 2 of the man pages) is really just a way for your program to request that the operating system do something; knowing that can be a decent place to start traipsing through code in the operating system.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
