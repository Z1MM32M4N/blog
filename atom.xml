<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://blog.jez.io/atom.xml" rel="self" type="application/atom+xml" /><link href="https://blog.jez.io/" rel="alternate" type="text/html" /><updated>2022-03-18T01:21:31-04:00</updated><id>https://blog.jez.io/atom.xml</id><title type="html">Jake Zimmerman</title><subtitle>A collection of blog posts about programming, software, types, programming languages, Sorbet, Vim, Markdown, and more.</subtitle><author><name>Jake Zimmerman</name></author><entry><title type="html">T::Enum Pros &amp;amp; Cons</title><link href="https://blog.jez.io/tenum-pro-con/" rel="alternate" type="text/html" title="T::Enum Pros &amp;amp; Cons" /><published>2022-03-17T19:13:16-04:00</published><updated>2022-03-17T19:13:16-04:00</updated><id>https://blog.jez.io/tenum-pro-con</id><content type="html" xml:base="https://blog.jez.io/tenum-pro-con/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;br&gt;
  &lt;strong&gt;Contents&lt;/strong&gt;&lt;label for=&quot;contents&quot;&gt;‚äï&lt;/label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;contents&quot;&gt;
  &lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#tenum-cannot-be-combined-in-ad-hoc-unions.&quot;&gt;üëé &lt;code&gt;T::Enum&lt;/code&gt; cannot be combined in ad hoc unions.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tenum-is-verbose.&quot;&gt;üëé &lt;code&gt;T::Enum&lt;/code&gt; is verbose.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#its-hard-to-have-one-tenum-be-a-subset-of-another.&quot;&gt;üëé It‚Äôs hard to have one &lt;code&gt;T::Enum&lt;/code&gt; be a subset of another.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#every-ide-feature-sorbet-supports-works-for-tenum.&quot;&gt;üöÄ Every IDE feature Sorbet supports works for &lt;code&gt;T::Enum&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tenum-guards-against-basically-all-typos.&quot;&gt;üôä &lt;code&gt;T::Enum&lt;/code&gt; guards against basically all typos.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#it-requires-being-intentional.&quot;&gt;ü§ù It requires being intentional.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#its-easy-to-search-for.&quot;&gt;üïµÔ∏è It‚Äôs easy to search for.&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;One feature that Sorbet doesn‚Äôt have&lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-0&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-0&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;Yet. The biggest limitation is just that Sorbet‚Äôs approach to type inference is designed to run fast and be simple to understand, sometimes sacrificing power.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;‚Ä¶ but actually Sorbet already has these types internally üòÖ It‚Äôs just that it doesn‚Äôt have syntax for people to write them in type annotations. And lo, it‚Äôs &lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Ax%20%3D%20%3Adefault%0A%0A1.times%20do%0A%20%20%23%20Sorbet%20does%20not%20report%20an%20error%20here%0A%20%20%23%20%28it%20would%20have%20to%20start%20doing%20so%29%0A%20%20x%20%3D%20%3Afirst%0Aend%0A%0AT.reveal_type%28x%29%20%23%20Sorbet%20shows%20the%20wrong%20type%20here%0A%0A%23%20Sorbet%20can&amp;#39;t%20tell%20the%20difference%20bewteen%20a%20hash%20literal%0A%23%20with%20a%20variable%20key%20versus%20with%20a%20symbol%20literal%20key%0A%23%20at%20the%20time%20that%20inference%20happens.%0AT.reveal_type%28%7Bx%20%3D%3E%20nil%7D%29%0AT.reveal_type%28%7B%3Adefault%20%3D%3E%20nil%7D%29&quot;&gt;because they‚Äôre buggy&lt;/a&gt;, but for the things where Sorbet needs to use them internally we can intentionally work around the known bugs, so it hasn‚Äôt been worth the pain to fix.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt; but gets requested frequently is support for literal string and symbol types. Something like &lt;code&gt;T.any(:left, :right)&lt;/code&gt;, which is a type that allows either the symbol literal &lt;code&gt;:left&lt;/code&gt; or &lt;code&gt;:right&lt;/code&gt;, but no other &lt;code&gt;Symbol&lt;/code&gt;s much less other types of values. The closest that Sorbet has to this right now is typed enums:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;LeftOrRight&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt; T&lt;span class=&quot;kw&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Enum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  enums &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; new&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; new&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TypeScript, Flow, and Mypy all have literal types. You probably have felt yourself wanting this. I don‚Äôt really have to explain why they‚Äôre nice. But I‚Äôll do it anyways, just to prove that I hear you.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;h2 id=&quot;tenum-cannot-be-combined-in-ad-hoc-unions.&quot;&gt;üëé &lt;code&gt;T::Enum&lt;/code&gt; cannot be combined in ad hoc unions.&lt;/h2&gt;
&lt;p&gt;That‚Äôs a fancy way of saying we‚Äôd like to be able to write &lt;code&gt;T.any(:left, :right)&lt;/code&gt; in any type annotation, without first having to pre-declare the new union type to the world. I spoke at length about how the existence of ad hoc union types make handling exceptional conditions &lt;a href=&quot;/union-types-checked-exceptions/&quot;&gt;more pleasant than checked exceptions&lt;/a&gt;, so I‚Äôm right there with you in appreciating that feature.&lt;/p&gt;
&lt;h2 id=&quot;tenum-is-verbose.&quot;&gt;üëé &lt;code&gt;T::Enum&lt;/code&gt; is verbose.&lt;/h2&gt;
&lt;p&gt;Even if you wanted to pre-declare the enum type. Consider:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;LeftOrRight&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; T&lt;span class=&quot;at&quot;&gt;.type_alias&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:left&lt;/span&gt;, &lt;span class=&quot;wa&quot;&gt;:right&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Boom. One line, no boilerplate. Wouldn‚Äôt that be nice?&lt;/p&gt;
&lt;h2 id=&quot;its-hard-to-have-one-tenum-be-a-subset-of-another.&quot;&gt;üëé It‚Äôs hard to have one &lt;code&gt;T::Enum&lt;/code&gt; be a subset of another.&lt;/h2&gt;
&lt;p&gt;This comes up so frequently that there‚Äôs &lt;a href=&quot;https://sorbet.org/docs/tenum#defining-one-enum-as-a-subset-of-another-enum&quot;&gt;an FAQ entry&lt;/a&gt; about it. The answer is yet more verbosity and boilerplate.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;So I hear you. But I wanted to say a few things in defense of &lt;code&gt;T::Enum&lt;/code&gt;, because I think that despite how nice it might be to have literal types (and again, we may yet build them one day), there are still &lt;em&gt;a lot of points&lt;/em&gt; in favor of &lt;code&gt;T::Enum&lt;/code&gt; as it exists today.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;h2 id=&quot;every-ide-feature-sorbet-supports-works-for-tenum.&quot;&gt;üöÄ Every IDE feature Sorbet supports works for &lt;code&gt;T::Enum&lt;/code&gt;.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;T::Enum&lt;/code&gt;s are just normal constants. Sorbet supports finding all constant references, renaming constants, autocompleting constant names, jumping to a constant‚Äôs definition, hovering over a constant to its documentation comment. Also all of those features work on both the enum class itself and each individual enum value.&lt;/p&gt;
&lt;p&gt;We could &lt;em&gt;maybe&lt;/em&gt; support completion for symbol literals in limited circumstances, but it would be the first of its kind in Sorbet. Same goes for rename, and maybe find all references. Jump to Definition I guess would want to jump not actually to the definition, but rather to the signature that specified the literal type? It‚Äôs weird.&lt;/p&gt;
&lt;h2 id=&quot;tenum-guards-against-basically-all-typos.&quot;&gt;üôä &lt;code&gt;T::Enum&lt;/code&gt; guards against basically all typos.&lt;/h2&gt;
&lt;p&gt;Even in &lt;code&gt;# typed: false&lt;/code&gt; files! Even when calling methods that take don‚Äôt have signatures, or that have loose signatures like &lt;code&gt;Object&lt;/code&gt;! Incidentally, this is basically the same reason why find all references can work so well.&lt;/p&gt;
&lt;h2 id=&quot;it-requires-being-intentional.&quot;&gt;ü§ù It requires being intentional.&lt;/h2&gt;
&lt;p&gt;Code gets out of hand really quickly when people try to cutely interpolate strings into other strings that hold meaning. I‚Äôd much rather deal with this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;direction &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;[&lt;/span&gt;left_or_right, up_or_down&lt;span class=&quot;kw&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;than this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;direction &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;#{&lt;/span&gt;left_or_right&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;#{&lt;/span&gt;up_or_down&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you try to do this with &lt;code&gt;T::Enum&lt;/code&gt; you get strings that look like:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;vs&quot;&gt;&amp;#39;#&amp;lt;LeftOrRight::Left&amp;gt;__#&amp;lt;UpOrDown::Up&amp;gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which confuses people, so they ask how to do the thing they‚Äôre trying to do, which is a perfect opportunity to talk them down from that cliff. If people decide that yes, this really is the API we need, we can be intentional about it with &lt;code&gt;.serialize&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;direction &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;#{&lt;/span&gt;left_or_right&lt;span class=&quot;at&quot;&gt;.serialize&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;#{&lt;/span&gt;up_or_down&lt;span class=&quot;at&quot;&gt;.serialize&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;its-easy-to-search-for.&quot;&gt;üïµÔ∏è It‚Äôs easy to search for.&lt;/h2&gt;
&lt;p&gt;This is a small one, but I‚Äôll mention it anyways. It‚Äôs quick to search the Sorbet docs for &lt;code&gt;T::Enum&lt;/code&gt; and get to the right page. It‚Äôs similarly easy to find examples of it being used in a given codebase, to learn from real code. There‚Äôs no unique piece of syntax in &lt;code&gt;T.any(:left, :right)&lt;/code&gt; that is a surefire thing to search for.&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="fragment" /><category term="sorbet" /><summary type="html">‚Üê Return home One feature that Sorbet doesn‚Äôt have[^yet][^but-actually] but gets requested frequently is support for literal string and symbol types. Something like T.any(:left, :right), which is a type that allows either the symbol literal :left or :right, but no other Symbols much less other types of values. The closest that Sorbet has to this right now is typed enums:</summary></entry><entry><title type="html">Parse Error Recovery in Sorbet: Part 3</title><link href="https://blog.jez.io/error-recovery-part-3/" rel="alternate" type="text/html" title="Parse Error Recovery in Sorbet: Part 3" /><published>2022-02-28T00:25:56-05:00</published><updated>2022-02-28T00:25:56-05:00</updated><id>https://blog.jez.io/error-recovery-part-3</id><content type="html" xml:base="https://blog.jez.io/error-recovery-part-3/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;br&gt;
  &lt;strong&gt;Contents&lt;/strong&gt;&lt;label for=&quot;contents&quot;&gt;‚äï&lt;/label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;contents&quot;&gt;
  &lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#read-the-docs&quot;&gt;Read the docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enable-traces-and-make-them-good&quot;&gt;Enable traces, and make them good&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#diff-traces-for-good-and-bad-parses&quot;&gt;Diff traces for good and bad parses&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;This is the third post in a series about ‚Äúthings I‚Äôve learned while making improvements to Sorbet‚Äôs parser.‚Äù Previously I discussed high level questions like why it‚Äôs an important problem for Sorbet to solve and some approaches I decided not to take. This post switches gears to focus on specific tips and techniques I found useful while making parser changes.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/error-recovery-part-1/&quot;&gt;Part 1: Why Recover from Syntax Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/error-recovery-part-2/&quot;&gt;Part 2: What I Didn‚Äôt Do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/error-recovery-part-3/&quot;&gt;Part 3: Tools and Techniques for Debugging a (Bison) Parser&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 4: Bison‚Äôs &lt;code&gt;error&lt;/code&gt; Token&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 5: Backtracking, aka Lexer Hacks&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 6: Falling Back on Indentation, aka More Lexer Hacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that all out of the way, let‚Äôs dive into the tips.&lt;/p&gt;
&lt;h1 id=&quot;read-the-docs&quot;&gt;Read the docs&lt;/h1&gt;
&lt;p&gt;Haha! You probably thought that by Googling for things you‚Äôd be able to find something that lets you avoid reading the official docs. But it‚Äôs boring for me to repeat everything that‚Äôs in the docs, and honestly the Bison and Ragel docs are rather comprehensive as far as software documentation goes these days:&lt;/p&gt;
&lt;p&gt;‚Üí &lt;a href=&quot;https://www.colm.net/files/ragel/ragel-guide-6.9.pdf&quot;&gt;Ragel User Guide&lt;/a&gt;&lt;br /&gt;
‚Üí &lt;a href=&quot;https://www.gnu.org/software/bison/manual/bison.html&quot;&gt;Bison User Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But I will give you some tips for &lt;strong&gt;how&lt;/strong&gt; to read the docs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You ~always want the ‚ÄúHTML entirely on one web page‚Äù version of the Bison docs‚Äîit‚Äôs way easier to ‚åòF around one page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bison actually gets new, interesting features from version to version. Double check that the version of the docs you‚Äôre reading actually match the version of Bison you‚Äôre using. I haven‚Äôt found an easy way to read old Bison docs online, so I usually just &lt;code&gt;grep&lt;/code&gt; for things in the docs‚Äô sources:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ git clone https://github.com/akimd/bison
‚ùØ git checkout v3.3.2
‚ùØ grep -r &amp;#39;error.*token&amp;#39; doc/
doc/bison.texi:error.  If there is a @samp{..} token before the next
doc/bison.texi:value of the error token is 256, unless you explicitly assigned 256
... many more results ...&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I‚Äôve found it valuable to actually take my time while reading the Bison docs. I‚Äôve found a lot of things that turned out to be relevant later on because I took the time to read parts of the docs that didn‚Äôt look immediately relevant.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But that‚Äôs enough soapbox standing, now we return to regularly scheduled tips.&lt;/p&gt;
&lt;h1 id=&quot;enable-traces-and-make-them-good&quot;&gt;Enable traces, and make them good&lt;/h1&gt;
&lt;p&gt;Before I started working on this project, I treated Sorbet‚Äôs parser like a black box. In the spirit of ‚Äú&lt;a href=&quot;https://blog.nelhage.com/post/computers-can-be-understood/&quot;&gt;Computers can be understood&lt;/a&gt;,‚Äù the first thing I did was enable traces for our parser. Easy enough:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define the &lt;a href=&quot;https://www.gnu.org/software/bison/manual/bison.html#Tracing&quot;&gt;&lt;code&gt;parse.trace&lt;/code&gt;&lt;/a&gt; variable in the grammar&lt;/li&gt;
&lt;li&gt;Call &lt;a href=&quot;https://www.gnu.org/software/bison/manual/bison.html#index-set_005fdebug_005flevel-on-parser&quot;&gt;&lt;code&gt;set_debug_level&lt;/code&gt;&lt;/a&gt; on the generated parser&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here‚Äôs &lt;a href=&quot;https://github.com/sorbet/sorbet/pull/4985/files?w=1#diff-63fada7036ffcba42e6615c3b85615cb81d47aafbf88122a552a34fb799c06b5R17&quot;&gt;the PR in Sorbet&lt;/a&gt;, which might help to make these two steps more concrete.&lt;/p&gt;
&lt;p&gt;The trace output looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ sorbet --trace-parser -e &amp;#39;def foo; end&amp;#39;
Starting parse
Entering state 0
Reading a token: Next token is token &amp;quot;def&amp;quot; ()
Shifting token &amp;quot;def&amp;quot; ()
Entering state 4
Reading a token: Next token is token tIDENTIFIER ()
Shifting token tIDENTIFIER ()
Entering state 184

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is somewhat useful as is, but it can be better. First, all the trailing &lt;code&gt;()&lt;/code&gt; on the ‚ÄúNext token is ‚Ä¶‚Äù lines are present because there aren‚Äôt any &lt;code&gt;%printer&lt;/code&gt;‚Äôs for those tokens‚Äìwe can easily get the trace to not only show that it read a &lt;code&gt;tIDENTIFIER&lt;/code&gt; token, but also what the name of that variable was. After adding one for &lt;code&gt;tIDENTIFIER&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%printer { yyo &amp;lt;&amp;lt; $$-&amp;gt;view(); } tIDENTIFIER&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;$$-&amp;gt;view();&lt;/code&gt; bit calls the &lt;code&gt;view&lt;/code&gt; method on Sorbet‚Äôs token type, converting it to a string. Now our traces look better:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ sorbet --trace-parser -e &amp;#39;def foo; end&amp;#39;
Starting parse
Entering state 0
Reading a token: Next token is token &amp;quot;def&amp;quot; ()
Shifting token &amp;quot;def&amp;quot; ()
Entering state 4
Reading a token: Next token is token tIDENTIFIER (foo)
Shifting token tIDENTIFIER (foo)
Entering state 184
Reading a token: Next token is token &amp;quot;;&amp;quot; ()
Reducing stack by rule 125 (line 1140):
   $1 = token tIDENTIFIER (foo)
-&amp;gt; $$ = nterm fname ()
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far I‚Äôve been adding these &lt;code&gt;%printer&lt;/code&gt;s only as I encounter the tokens that show up, mostly because I‚Äôm too lazy to exhaustively define printers for all the tokens‚ÄîRuby has a lot of tokens. You‚Äôll note that Bison even lets you register &lt;code&gt;%printer&lt;/code&gt;s for non-terminals (not pictured, but the same mechanism). You could use this to, like, print the currently reduced AST for that non-terminal, or some other summary.&lt;/p&gt;
&lt;p&gt;The next step is to actually understand what these traces mean, because it looks like there‚Äôs a lot of magic names and numbers, but there‚Äôs a short cut for that.&lt;/p&gt;
&lt;h1 id=&quot;diff-traces-for-good-and-bad-parses&quot;&gt;Diff traces for good and bad parses&lt;/h1&gt;
&lt;p&gt;This code is a syntax error in Ruby:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; foo(x,); &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bison has a fancy &lt;code&gt;error&lt;/code&gt; token that we can use to recover from cases like this, but it‚Äôs hard to know where to add that &lt;code&gt;error&lt;/code&gt; token into the grammar. Printing the trace file would likely help us figure out where, but even when we‚Äôre staring at the trace file it‚Äôs not entirely clear.&lt;/p&gt;
&lt;p&gt;Luckily there‚Äôs a short cut:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Record a parser trace for the invalid parse.&lt;/li&gt;
&lt;li&gt;‚ÄúFix‚Äù the file so that it parses by only adding tokens, and record a trace for that parse.
&lt;ul&gt;
&lt;li&gt;This ensures that all the tokens present in the bad parse are also present in the good parse.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff&lt;/code&gt; (or &lt;code&gt;vimdiff&lt;/code&gt;) the two traces, and add an error recovery rule to the place where the trace differs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In our case, I want &lt;code&gt;def foo(x,); end&lt;/code&gt; to parse as if the user had properly written two arguments, so that I can record the fact that the user started to introduce a second argument. I‚Äôll record a trace for the program &lt;code&gt;def foo(x, y); end&lt;/code&gt;, and diff it. The diff looks like this:&lt;/p&gt;
&lt;figure class=&quot;left-align-caption&quot;&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode numberSource diff numberLines hl-30 hl-31 hl-32 hl-33 hl-34&quot;&gt;&lt;code class=&quot;sourceCode diff&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;‚ùØ sorbet --trace-parser -e &amp;#39;def foo(x,); end&amp;#39; 2&amp;gt; trace-bad.txt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot;&gt;&lt;/a&gt;  sorbet --trace-parser -e &amp;#39;def foo(x, y); end&amp;#39; 2&amp;gt; trace-good.txt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot;&gt;&lt;/a&gt;  diff -u trace-bad.txt trace-good.txt&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;--- trace-bad.txt       2022-01-16 14:40:51.168977798 -0800&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;+++ trace-good.txt      2022-01-16 14:40:51.728976581 -0800&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;@@ -53,45 +53,201 @@&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot;&gt;&lt;/a&gt; Next token is token &amp;quot;,&amp;quot; ()&lt;/span&gt;
&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot;&gt;&lt;/a&gt; Shifting token &amp;quot;,&amp;quot; ()&lt;/span&gt;
&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot;&gt;&lt;/a&gt; Entering state 752&lt;/span&gt;
&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Reading a token: Next token is token tIDENTIFIER ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;#cb6-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Shifting token tIDENTIFIER ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-12&quot;&gt;&lt;a href=&quot;#cb6-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Entering state 541&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-13&quot;&gt;&lt;a href=&quot;#cb6-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Reducing stack by rule 660 (line 3400):&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-14&quot;&gt;&lt;a href=&quot;#cb6-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+   $1 = token tIDENTIFIER ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-15&quot;&gt;&lt;a href=&quot;#cb6-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+-&amp;gt; $$ = nterm f_norm_arg ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-16&quot;&gt;&lt;a href=&quot;#cb6-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Stack now 752 562 349 78 0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-17&quot;&gt;&lt;a href=&quot;#cb6-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Entering state 559&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-18&quot;&gt;&lt;a href=&quot;#cb6-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Reducing stack by rule 661 (line 3408):&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-19&quot;&gt;&lt;a href=&quot;#cb6-19&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+   $1 = nterm f_norm_arg ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-20&quot;&gt;&lt;a href=&quot;#cb6-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+-&amp;gt; $$ = nterm f_arg_asgn ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-21&quot;&gt;&lt;a href=&quot;#cb6-21&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Stack now 752 562 349 78 0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-22&quot;&gt;&lt;a href=&quot;#cb6-22&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Entering state 560&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-23&quot;&gt;&lt;a href=&quot;#cb6-23&quot;&gt;&lt;/a&gt; Reading a token: Next token is token &amp;quot;)&amp;quot; ()&lt;/span&gt;
&lt;span id=&quot;cb6-24&quot;&gt;&lt;a href=&quot;#cb6-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;-Error: popping token &amp;quot;,&amp;quot; ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-25&quot;&gt;&lt;a href=&quot;#cb6-25&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Reducing stack by rule 662 (line 3414):&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-26&quot;&gt;&lt;a href=&quot;#cb6-26&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+   $1 = nterm f_arg_asgn ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-27&quot;&gt;&lt;a href=&quot;#cb6-27&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+-&amp;gt; $$ = nterm f_arg_item ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-28&quot;&gt;&lt;a href=&quot;#cb6-28&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Stack now 752 562 349 78 0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-29&quot;&gt;&lt;a href=&quot;#cb6-29&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Entering state 901&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-30&quot;&gt;&lt;a href=&quot;#cb6-30&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+Reducing stack by rule 665 (line 3428):&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-31&quot;&gt;&lt;a href=&quot;#cb6-31&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+   $1 = nterm f_arg ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-32&quot;&gt;&lt;a href=&quot;#cb6-32&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+   $2 = token &amp;quot;,&amp;quot; ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-33&quot;&gt;&lt;a href=&quot;#cb6-33&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+   $3 = nterm f_arg_item ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-34&quot;&gt;&lt;a href=&quot;#cb6-34&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+-&amp;gt; $$ = nterm f_arg ()&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-35&quot;&gt;&lt;a href=&quot;#cb6-35&quot;&gt;&lt;/a&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figcaption&gt;
This example shows &lt;code&gt;diff -u&lt;/code&gt; in the command line, but when I‚Äôm looking at these traces I almost exclusively use &lt;code&gt;vimdiff&lt;/code&gt;, because it lets me expand surrounding context, search for keywords, etc. And it looks nicer.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Looking at the highlighted lines near the bottom, we see that eventually the good parse was able to reduce &lt;code&gt;nterm f_arg&lt;/code&gt; by combining &lt;code&gt;f_arg&lt;/code&gt;, &lt;code&gt;&quot;,&quot;&lt;/code&gt;, and &lt;code&gt;f_arg_item&lt;/code&gt;. The trace tells us that this happened in &lt;code&gt;rule 665 (line 2428)&lt;/code&gt;. That line number is the actual source line number in our &lt;code&gt;*.ypp&lt;/code&gt; grammar file.&lt;/p&gt;
&lt;p&gt;All we have to do is go to that line and add an error case, which is pretty easy:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode numberSource diff numberLines hl-11 hl-12 hl-13 hl-14&quot;&gt;&lt;code class=&quot;sourceCode diff&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;           f_arg: f_arg_item&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot;&gt;&lt;/a&gt;                    {&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot;&gt;&lt;/a&gt;                      $$ = driver.alloc.node_list($1);&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot;&gt;&lt;/a&gt;                    }&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot;&gt;&lt;/a&gt;                | f_arg tCOMMA f_arg_item&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot;&gt;&lt;/a&gt;                    {&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot;&gt;&lt;/a&gt;                      auto &amp;amp;list = $1;&lt;/span&gt;
&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot;&gt;&lt;/a&gt;                      list-&amp;gt;emplace_back($3);&lt;/span&gt;
&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot;&gt;&lt;/a&gt;                      $$ = list;&lt;/span&gt;
&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;#cb7-10&quot;&gt;&lt;/a&gt;                    }&lt;/span&gt;
&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;#cb7-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+               | f_arg tCOMMA error&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-12&quot;&gt;&lt;a href=&quot;#cb7-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+                   {&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-13&quot;&gt;&lt;a href=&quot;#cb7-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+                     $$ = $1;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-14&quot;&gt;&lt;a href=&quot;#cb7-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;+                   }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now the parser reports the error but continues to recover from the error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ sorbet -p parse-tree-whitequark -e &amp;#39;def foo(x,); end&amp;#39;
s(:def, :foo,
  s(:args,
    s(:arg, :x)), nil)
-e:1: unexpected token &amp;quot;)&amp;quot; https://srb.help/2001
     1 |def foo(x,); end
                  ^
Errors: 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This technique of comparing the trace for ‚Äúwhat it currently does‚Äù against ‚Äúwhat I wish it did‚Äù has been super useful, because it often shows exactly the point where the trace diverged, along with the reason. In this example, the &lt;code&gt;f_arg_item&lt;/code&gt; was never reduced, but sometimes the difference will be something like ‚Äúthe lexer didn‚Äôt read a token‚Äù or ‚Äúthe lexer read a token, but because of the state the lexer was in, it was the wrong token.‚Äù Whatever the cause, comparing traces usually shows the problem.&lt;/p&gt;
&lt;p&gt;This particular example also showed an example of using Bison‚Äôs &lt;code&gt;error&lt;/code&gt; token. I‚Äôll talk more about what this &lt;code&gt;error&lt;/code&gt; token means in the next post.&lt;/p&gt;
&lt;p style=&quot;width: 50%; float: left; text-align: left;&quot;&gt;
&lt;a href=&quot;/error-recovery-part-2/&quot;&gt;‚Üê Part 2: Why Recover from Syntax Errors&lt;/a&gt;
&lt;/p&gt;
&lt;p style=&quot;width: 50%; float: right; text-align: right;&quot;&gt;
(&lt;em&gt;coming soon&lt;/em&gt;) Part 4: Bison‚Äôs &lt;code&gt;error&lt;/code&gt; Token ‚Üí
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="parsing" /><summary type="html">‚Üê Return home This is the third post in a series about ‚Äúthings I‚Äôve learned while making improvements to Sorbet‚Äôs parser.‚Äù Previously I discussed high level questions like why it‚Äôs an important problem for Sorbet to solve and some approaches I decided not to take. This post switches gears to focus on specific tips and techniques I found useful while making parser changes.</summary></entry><entry><title type="html">Parse Error Recovery in Sorbet: Part 2</title><link href="https://blog.jez.io/error-recovery-part-2/" rel="alternate" type="text/html" title="Parse Error Recovery in Sorbet: Part 2" /><published>2022-02-22T03:56:34-05:00</published><updated>2022-02-22T03:56:34-05:00</updated><id>https://blog.jez.io/error-recovery-part-2</id><content type="html" xml:base="https://blog.jez.io/error-recovery-part-2/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;‚Üê Return home&lt;/a&gt;&lt;br&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;This is the second post in a series about ‚Äúthings I‚Äôve learned while making improvements to Sorbet‚Äôs parser.‚Äù Specifically, it‚Äôs about approaches I considered but decided against.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/error-recovery-part-1/&quot;&gt;Part 1: Why Recover from Syntax Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/error-recovery-part-2/&quot;&gt;Part 2: What I Didn‚Äôt Do&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/error-recovery-part-3/&quot;&gt;Part 3: Tools and Techniques for Debugging a (Bison) Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 4: Bison‚Äôs &lt;code&gt;error&lt;/code&gt; Token&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 5: Backtracking, aka Lexer Hacks&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 6: Falling Back on Indentation, aka More Lexer Hacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before we get started, I should say: I‚Äôm not, like, an expert at writing parsers. In fact of all the changes I‚Äôve made to Sorbet, it‚Äôs definitely up there for ‚Äúchanges I‚Äôve been least qualified to have made.‚Äù But at the end of the day my test cases passed &lt;span class=&quot;emoji&quot; data-emoji=&quot;upside_down_face&quot;&gt;üôÉ&lt;/span&gt; Take my experiences with as many or as few grains of salt as you‚Äôd like. This also means that if you want to suggest other alternatives or otherwise teach me something new, I‚Äôm all ears!&lt;/p&gt;
&lt;p&gt;First, a little bit of history. Sorbet‚Äôs parser was originally a part of the &lt;a href=&quot;https://github.com/typedruby/typedruby&quot;&gt;TypedRuby&lt;/a&gt; project.&lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-0&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-0&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://github.com/typedruby/typedruby&quot;&gt;TypedRuby&lt;/a&gt; was an aspirational Ruby type checker implemented in Rust that predated Sorbet. It is now abandoned.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt; In turn, TypedRuby sourced its parser by porting the grammar file in the &lt;a href=&quot;https://github.com/whitequark/parser&quot;&gt;whitequark parser&lt;/a&gt; from &lt;a href=&quot;https://rubygems.org/gems/racc&quot;&gt;Racc&lt;/a&gt; (a Yacc-like parser generator for Ruby) to &lt;a href=&quot;https://www.gnu.org/software/bison/&quot;&gt;Bison&lt;/a&gt; (a Yacc-like parser generator for C/C++). Sorbet imported the source code of the TypedRuby parser and continued to modify it over time as Ruby syntax evolved. The lexer uses &lt;a href=&quot;http://www.colm.net/open-source/ragel/&quot;&gt;Ragel&lt;/a&gt; (also inherited from whitequark by way of TypedRuby) and tends to be quite stateful compared to other lexers I‚Äôve seen‚Äîa point which we‚Äôll come back to in future posts.&lt;/p&gt;
&lt;p&gt;Importantly‚Ä¶&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sorbet‚Äôs parser does not use &lt;a href=&quot;https://ruby-doc.org/stdlib-2.7.3/libdoc/ripper/rdoc/Ripper.html&quot;&gt;Ripper&lt;/a&gt;, the parser built into the Ruby VM itself.&lt;/p&gt;
&lt;p&gt;Ripper is meant to be used as a library from Ruby code, not from C++ like Sorbet needs for performance.&lt;/p&gt;
&lt;p&gt;Okay technically that‚Äôs a lie. The &lt;a href=&quot;https://github.com/penelopezone/rubyfmt&quot;&gt;rubyfmt&lt;/a&gt; project manages to depend on Ripper from Rust by exposing it via Ruby‚Äôs support for native (C) extensions. &lt;strong&gt;But&lt;/strong&gt; doing that comes with &lt;a href=&quot;https://github.com/penelopezone/rubyfmt/blob/trunk/librubyfmt/build.rs&quot;&gt;significant build complexity&lt;/a&gt;, because it has the effect of basically importing Ruby‚Äôs whole &lt;code&gt;configure &amp;amp;&amp;amp; make&lt;/code&gt; build step.&lt;/p&gt;
&lt;p&gt;Meanwhile it was super easy to import the TypedRuby parser as a self-contained unit with basically no questions asked (and remember: Sorbet predates rubyfmt). It‚Äôs also nice to be free from upstream&lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;I should note that I‚Äôm not opposed to upstreaming the changes I‚Äôve made to Sorbet‚Äôs parser. Some of them intentionally break Ruby compatibility (in minor ways), and even the changes that don‚Äôt would likely require effort to get them merged properly. If you find my changes and want to submit them upstream, please go ahead!&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt; constraints: I can mess around in Sorbet‚Äôs parser as much as I want and the only people I have to defend my choices to are my teammates, not the Ruby maintainers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sorbet‚Äôs parser does not use &lt;a href=&quot;https://tree-sitter.github.io/tree-sitter/&quot;&gt;tree-sitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tree-sitter is tool whose main goals are basically 100% aligned with Sorbet‚Äôs needs in a parser: fast enough to run on every keystoke, robust enough to handle syntax errors, and native-code friendly. It would seem like a no-brainer for Sorbet to use.&lt;/p&gt;
&lt;p&gt;Unfortunately when I looked closely, it didn‚Äôt actually pan out. I used the &lt;a href=&quot;https://tree-sitter.github.io/tree-sitter/playground&quot;&gt;tree-sitter playground&lt;/a&gt; to test a bunch of syntax errors where I wanted to be able to respond to completion requests for to see what the parse result looked like. In some cases it worked okay, but for the cases I cared about the most (mostly those involving &lt;code&gt;x.&lt;/code&gt;), the results weren‚Äôt good enough. If I was going to have to manually hack on a parser to get it to do what I wanted, I figured I‚Äôd rather just stick with what Sorbet already had.&lt;/p&gt;
&lt;p&gt;On top of that tree-sitter is still pretty young, and almost everyone who is using tree-sitter right now is using it for two use cases: syntax highlighting, and code navigation. If the parse result generates the wrong thing (imagine there‚Äôs a bug in the grammar file that no one else has reported yet), oh well, maybe the colors are wrong or the jump-to-def goes to the wrong place. In Sorbet, it would mean either reporting an error when there isn‚Äôt one, or not reporting an error when there is one, both of which are particularly bad.&lt;/p&gt;
&lt;p&gt;Given that it was both (1) going to take extra hacks to get working instead of being a drop-in solution and (2) potentially trade Sorbet‚Äôs mature parser for a less-mature parser, it didn‚Äôt seem worth pursuing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sorbet‚Äôs parser is not hand-written with &lt;a href=&quot;https://en.wikipedia.org/wiki/Recursive_descent_parser&quot;&gt;recursive descent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many people whose opinions I respect have told me that there‚Äôs a reason why so many people hand-write their parsers: error recovery is easier when given the flexibility to bend the whole parser to your will.&lt;/p&gt;
&lt;p&gt;But there isn‚Äôt an existing hand-written Ruby parser I could start from, and I didn‚Äôt want to completely stall progress with a bug-for-bug rewrite when I already had some ideas for how to make the existing parser better. Basically this approach has the same tradeoffs as adopting tree-sitter (lots of work with too many unknowns).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these claims about Sorbet‚Äôs parser were true when I started, and they haven‚Äôt changed. You‚Äôll notice that in most cases the justification is ‚ÄúI don‚Äôt have time to do X‚Äù and not ‚Äúdoing X is wrong.‚Äù My biggest constraint in improving the parser has been making small, fast, iterative improvements. I wanted to be left with something to show even if I had to stop working on the parser sooner than expected. It‚Äôs possible that someone with more time or more patience will want to revisit one of these approaches in the future, and if you do I‚Äôd love to hear about it!&lt;/p&gt;
&lt;p&gt;Anyways, that rules out the most common refrains from onlookers. But there was another, more unconventional approach I considered and decided against: using &lt;a href=&quot;https://github.com/zombocom/dead_end&quot;&gt;dead_end&lt;/a&gt;. &lt;code&gt;dead_end&lt;/code&gt; isn‚Äôt a Ruby parser but rather a tool that hijacks Ruby‚Äôs syntax error reporting mechanism&lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;It turns out, all (‚Äúall‚Äù) you have to do is is monkey patch &lt;code&gt;require&lt;/code&gt; to &lt;code&gt;rescue   SyntaxError&lt;/code&gt;. Thanks Ruby &lt;span class=&quot;emoji&quot; data-emoji=&quot;slightly_smiling_face&quot;&gt;üôÇ&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt; to improve the message for certain syntax errors. Specifically, it‚Äôll try to show error messages in cases like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode numberSource ruby numberLines hl-4 hl-8&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;class&lt;/span&gt; A&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; foo&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# ... lots of code ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# ‚Üê dead_end error: missing `end` keyword&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; bar&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# ‚Üê ruby default error: unexpected token &amp;quot;end of file&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Missing an &lt;code&gt;end&lt;/code&gt; keyword is a super common class of Ruby syntax errors,&lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-3&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-3&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;One of my biggest Ruby syntax gripes is that it isn‚Äôt a curly brace language like C or JavaScript. Any sensibly editor will &lt;strong&gt;immediately&lt;/strong&gt; insert the matching &lt;code&gt;}&lt;/code&gt; after first typing &lt;code&gt;{&lt;/code&gt;. But most Ruby editors will only insert the &lt;code&gt;end&lt;/code&gt; matching some statement after a full line has been typed and &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; has been pressed, if anything. This means that unclosed &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt;/&lt;code&gt;do&lt;/code&gt;/&lt;code&gt;def&lt;/code&gt;/&lt;code&gt;class&lt;/code&gt; statements are &lt;strong&gt;abundantly&lt;/strong&gt; common in Ruby, and this class of error (mismatched pairs) is trickier than the average error.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt; and &lt;code&gt;dead_end&lt;/code&gt; already works particularly well at reporting them, so it was tempting to &lt;del&gt;steal&lt;/del&gt; reuse either the code or the ideas.&lt;/p&gt;
&lt;p&gt;Early on I had decided not to use the code directly (it‚Äôs written in Ruby, and I didn‚Äôt want to add a runtime dependency on Ruby to Sorbet). But in the end, I decided not to use its recovery algorithm either.&lt;/p&gt;
&lt;p&gt;The algorithm is &lt;a href=&quot;https://schneems.com/2020/12/01/squash-unexpectedend-errors-with-syntaxsearch/&quot;&gt;described in more detail here&lt;/a&gt;, but the tl;dr is that it uses indentation to search for mismatched snippets, expanding and discarding lines from the search frontier when it finds portions of a Ruby file that properly parse at a given indentation level.&lt;/p&gt;
&lt;p&gt;The problem with taking that idea verbatim is that the end result is basically just a set of lines in the source file that contain the error. But knowing those lines, there‚Äôs still no parse result for those lines. For example:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode numberSource ruby numberLines hl-3&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; foo&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# ... code before ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; arbitrary_expression()&lt;span class=&quot;kw&quot;&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# ... code after ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dead_end&lt;/code&gt; could point to line 3 as the problem, but then I‚Äôd still have to parse that line to be able to e.g.¬†service a completion request after the &lt;code&gt;.&lt;/code&gt;, which is &lt;em&gt;basically&lt;/em&gt; the situation we started with, because the parser would still be on the hook for the full complexity of what that &lt;code&gt;arbitrary_expression()&lt;/code&gt; could represent. So I put the &lt;code&gt;dead_end&lt;/code&gt; algorithm itself aside as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But!&lt;/strong&gt; the general idea of using indentation to guide recovery proved out to be pretty useful‚Äîmost Ruby editors will auto-indent and -dedent correctly for most edits‚Äîand there was another way to take advantage of it in Sorbet‚Äôs parser, along with some other tricks. The next few posts will discuss those tricks!&lt;/p&gt;
&lt;p style=&quot;width: 50%; float: left; text-align: left;&quot;&gt;
&lt;a href=&quot;/error-recovery-part-1/&quot;&gt;‚Üê Part 1: Why Recover from Syntax Errors&lt;/a&gt;
&lt;/p&gt;
&lt;p style=&quot;width: 50%; float: right; text-align: right;&quot;&gt;
&lt;a href=&quot;/error-recovery-part-3/&quot;&gt;Part 3: Tools and Techniques for Debugging a (Bison) Parser ‚Üí&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="parsing" /><summary type="html">‚Üê Return home This is the second post in a series about ‚Äúthings I‚Äôve learned while making improvements to Sorbet‚Äôs parser.‚Äù Specifically, it‚Äôs about approaches I considered but decided against.</summary></entry><entry><title type="html">Parse Error Recovery in Sorbet: Part 1</title><link href="https://blog.jez.io/error-recovery-part-1/" rel="alternate" type="text/html" title="Parse Error Recovery in Sorbet: Part 1" /><published>2022-02-21T03:56:34-05:00</published><updated>2022-02-21T03:56:34-05:00</updated><id>https://blog.jez.io/error-recovery-part-1</id><content type="html" xml:base="https://blog.jez.io/error-recovery-part-1/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;‚Üê Return home&lt;/a&gt;&lt;br&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;I‚Äôve spent a lot of time recently making &lt;a href=&quot;https://sorbet.org&quot;&gt;Sorbet&lt;/a&gt;‚Äôs parser recover from syntax errors when parsing. I didn‚Äôt have any experience with this before getting started, no one told me what the good tools or techniques for improving a parser were, and none of the things I read quite described the ideas I ended up implementing. I figured I‚Äôd share the experience so that you can learn too.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;The original post kept growing and growing as I wrote it, so I broke it up into a handful of parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/error-recovery-part-1/&quot;&gt;&lt;strong&gt;Part 1: Why Recover from Syntax Errors&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/error-recovery-part-2/&quot;&gt;Part 2: What I Didn‚Äôt Do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/error-recovery-part-3/&quot;&gt;Part 3: Tools and Techniques for Debugging a (Bison) Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 4: Bison‚Äôs &lt;code&gt;error&lt;/code&gt; Token&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 5: Backtracking, aka Lexer Hacks&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;coming soon&lt;/em&gt;) Part 6: Falling Back on Indentation, aka More Lexer Hacks&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;p&gt;This part is going to set the stage a bit and briefly mention why Sorbet cares so much about syntax errors. The short answer? Editor support is everything.&lt;/p&gt;
&lt;p&gt;There are people out there who clamor for a type checker in any codebase they work for. They‚Äôre zealous, early-adopters who evangelize types to everyone around them. They love even just being able to run the type checker in the command line or in CI hand have it reject code where the types don‚Äôt check. Sorbet has snuck its way into many codebases this way! But this approach always introduces friction: there‚Äôs always a group of people who see the type checker as an antagonist, sitting there and rejecting code that passes the test suite and gets the job done.&lt;/p&gt;
&lt;p&gt;Having a powerful editor integration drives organic adoption. A command line interface to a type checker is only really good at reporting errors, but an editor interface exposes so much more: inline hover lets programmers explore a code‚Äôs types and documentation by pointing. Language-aware jump-to-definition and find-all-references mean spending less time fumbling around a code base and more time looking at the code that‚Äôs relevant in the moment. And of course autocompletion is huge. Maybe you‚Äôre a curmudgeon like me who doesn‚Äôt use completion except the occasional keyword completion in Vim, but I‚Äôve learned that many, many people feel like moving back to the dark ages when they have to work in a codebase that doesn‚Äôt have fast, accurate autocompletion. Every additional editor feature is another spoonful of sugar‚Äîonce there are enough, it overwhelms any feeling that the type checker tastes like medicine.&lt;/p&gt;
&lt;p&gt;But if a syntax error means that the parser returns an empty parse result, all those spoonfuls fall to the floor with a loud clang. Hover and go-to-def are serve stale (read: imperfect) results at best, if anything. Autocomplete yields no results no matter how long you wait for the menu to appear.&lt;/p&gt;
&lt;p&gt;And in Sorbet‚Äôs situation, it‚Äôs even more severe because of how it has chosen to implement the persistent editor mode. I‚Äôm sure I‚Äôll discuss this in more depth at some point (because despite the criticism I‚Äôm going to leverage against it, I still think it works &lt;strong&gt;really&lt;/strong&gt; well), but here‚Äôs a quick overview of Sorbet‚Äôs language server architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nearly every part of Sorbet‚Äôs offline pipeline is embarrassingly parallel.&lt;/p&gt;
&lt;p&gt;All of the syntactic transformations on the tree happen without access to any sort of codebase-wide information. Type inference is only local‚Äîinferring types in one method body never affects the type check result of another method, let alone another file. Program-wide state is made immutable and shared across threads using shared memory (no copying).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sorbet does not track dependencies.&lt;/p&gt;
&lt;p&gt;That means it doesn‚Äôt track which files &lt;code&gt;require&lt;/code&gt; what other files. It doesn‚Äôt have a way to incrementally update its class hierarchy (symbol table) when something changes. It only caches parse results and which what errors came from which files. There are no module or package boundaries‚ÄîSorbet views a codebase as one codebase.&lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-0&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-0&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;This is starting to change, but only because the approach mentioned here doesn‚Äôt scale to 10 million-line Ruby codebases. It‚Äôs probably possible to count all such codebases on your fingers.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Given all of this, there are two paths in server mode: the fast path and the slow path.&lt;/p&gt;
&lt;p&gt;When an edit comes in, Sorbet quickly decides whether the edit changes any global information. If it can, Sorbet throws everything away (except for cached parse results) and type checks the entire codebase from scratch. Otherwise, it leaves the symbol table unchanged and just retypechecks the edited file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On one hand, this is a very elegant architecture. Sorbet can be almost entirely understood by how it behaves in batch mode. Put another way, if a user reports a bug in the editor mode, it almost always reproduces outside of the editor mode. It‚Äôs rare in Sorbet to find a bug that only reproduces when the user makes one edit followed by another edit.&lt;/p&gt;
&lt;p&gt;But on the other hand, if the parser can‚Äôt recover from a syntax error, not only can Sorbet not provide those fancy editor features, it also makes it look like all the definitions in a file were deleted, which makes it look like the contents of the symbol table will have changed, which kicks off a retypecheck of the whole codebase. Most syntax errors are introduced in completely benign places (like &lt;code&gt;x.&lt;/code&gt; or &lt;code&gt;if x&lt;/code&gt;), not as part of changing what‚Äôs defined in a file (like &lt;code&gt;def foo&lt;/code&gt; or &lt;code&gt;X =&lt;/code&gt;) because people spend more time editing method bodies than anything else. So most syntax errors can take the fast path as long as the parser can manage to return a decent result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All of this is to say&lt;/strong&gt;: it‚Äôs important for Sorbet to recover from syntax errors for two reasons: it can‚Äôt provide editor features like completion consistently without it, and in large codebases it makes Sorbet deliver in-editor type checking errors far faster. In future posts we‚Äôll ramp up to more technical and esoteric parsing topics. In particular, the next post gives some historical context about Sorbet‚Äôs parser and some ideas I rejected for how to get better parse results for syntax errors.&lt;/p&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;
&lt;a href=&quot;/error-recovery-part-2/&quot;&gt;Part 2: What I Didn‚Äôt Do ‚Üí&lt;/a&gt;
&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="parsing" /><summary type="html">‚Üê Return home I‚Äôve spent a lot of time recently making Sorbet‚Äôs parser recover from syntax errors when parsing. I didn‚Äôt have any experience with this before getting started, no one told me what the good tools or techniques for improving a parser were, and none of the things I read quite described the ideas I ended up implementing. I figured I‚Äôd share the experience so that you can learn too.</summary></entry><entry><title type="html">Sorbet, Generics, and Parametricity</title><link href="https://blog.jez.io/sorbet-parametricity/" rel="alternate" type="text/html" title="Sorbet, Generics, and Parametricity" /><published>2022-02-18T02:59:55-05:00</published><updated>2022-02-18T02:59:55-05:00</updated><id>https://blog.jez.io/sorbet-parametricity</id><content type="html" xml:base="https://blog.jez.io/sorbet-parametricity/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;‚Üê Return home&lt;/a&gt;&lt;br&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;Consider this snippet of Ruby code using Sorbet:&lt;/p&gt;
&lt;!-- more --&gt;
&lt;figure class=&quot;left-align-caption&quot;&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode numberSource ruby numberLines hl-11&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# typed: true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;extend&lt;/span&gt; T&lt;span class=&quot;kw&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Sig&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;  type_parameters(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.params&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;x: &lt;/span&gt;T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; fake_identity_function(x)&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;#                 ^^^^^^^^ error&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figcaption&gt;
&lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Aextend%20T%3A%3ASig%0A%0Asig%20do%0A%20%20type_parameters%28%3AU%29%0A%20%20%20%20.params%28x%3A%20T.type_parameter%28%3AU%29%29%0A%20%20%20%20.returns%28T.type_parameter%28%3AU%29%29%0Aend%0Adef%20fake_identity_function%28x%29%0A%20%20case%20x%0A%20%20when%20Integer%20then%20return%200%0A%20%20else%20return%20x%0A%20%20end%0Aend&quot;&gt;‚Üí View on sorbet.run&lt;/a&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It has the same signature as the identity function (which returns its argument unchanged), but doesn‚Äôt actually do that in all cases. In particular, on the highlighted line it checks the type of &lt;code&gt;x&lt;/code&gt; at runtime, and if it‚Äôs an &lt;code&gt;Integer&lt;/code&gt;, it always returns &lt;code&gt;0&lt;/code&gt;, regardless of the input.&lt;/p&gt;
&lt;p&gt;Sorbet flags this as an error (see the full error message in the sorbet.run link). Sometimes I get asked: ‚Äúwhy?‚Äù The reasoning for why people think this &lt;em&gt;shouldn‚Äôt&lt;/em&gt; be an error usually looks like this: the signature just says that the output has to be the same as the input, and &lt;code&gt;Integer&lt;/code&gt; is the same as &lt;code&gt;Integer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But the fun thing is that this signature makes a stronger constraint on the implementation of the method‚Äîin this case the signature &lt;strong&gt;mandates&lt;/strong&gt; that the result is the input. The hand-wavy intuition for how to think about what‚Äôs going on is to mentally read the &lt;code&gt;type_parameters(:U)&lt;/code&gt; in the signature as ‚Äúfor all,‚Äù specifically, ‚Äúthe behavior of this function is the same &lt;em&gt;for all&lt;/em&gt; choices of the type parameters.‚Äù&lt;/p&gt;
&lt;p&gt;In that light, generics put a pretty hefty constraint on the implementation of a generic method‚Äîwhich is actually a good thing! It means that the caller of the method can make stronger guarantees about what the method can or cannot do, even seeing only the types. For example:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  type_parameters(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;, &lt;span class=&quot;wa&quot;&gt;:V&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.params&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;x: &lt;/span&gt;T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;), &lt;span class=&quot;wa&quot;&gt;y: &lt;/span&gt;T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:V&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;), T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:V&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From this signature we‚Äôre guaranteed that the method has to return exactly one of the arguments we provided (&lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt;) and nothing else. It can‚Äôt invent some third value and return that.&lt;/p&gt;
&lt;p&gt;But the constraints come within reason: the types don‚Äôt say anything about what side effects the function might have. This isn‚Äôt particularly unique to generics (Sorbet doesn‚Äôt track side effects no matter the types), but it is worth noting as a sneaky way that methods can do different things with different arguments. Going back to our &lt;code&gt;fake_identity_function&lt;/code&gt; example from earlier:&lt;/p&gt;
&lt;figure class=&quot;left-align-caption&quot;&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode numberSource ruby numberLines hl-12 hl-15&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# typed: true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;extend&lt;/span&gt; T&lt;span class=&quot;kw&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Sig&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot;&gt;&lt;/a&gt;  type_parameters(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.params&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;x: &lt;/span&gt;T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:U&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; fake_identity_function(x)&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;puts&lt;/span&gt;(x&lt;span class=&quot;at&quot;&gt;.even?&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot;&gt;&lt;/a&gt;    x&lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot;&gt;&lt;/a&gt;    x&lt;span class=&quot;at&quot;&gt;.even?&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# error: Method `even?` does not exist&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot;&gt;&lt;/a&gt;    x&lt;/span&gt;
&lt;span id=&quot;cb3-17&quot;&gt;&lt;a href=&quot;#cb3-17&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-18&quot;&gt;&lt;a href=&quot;#cb3-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figcaption&gt;
&lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Aextend%20T%3A%3ASig%0A%0Asig%20do%0A%20%20type_parameters%28%3AU%29%0A%20%20%20%20.params%28x%3A%20T.type_parameter%28%3AU%29%29%0A%20%20%20%20.returns%28T.type_parameter%28%3AU%29%29%0Aend%0Adef%20fake_identity_function%28x%29%0A%20%20case%20x%0A%20%20when%20Integer%0A%20%20%20%20x.even%3F%0A%20%20%20%20x%0A%20%20else%0A%20%20%20%20x.even%3F%0A%20%20%20%20x%0A%20%20end%0Aend&quot;&gt;‚Üí View on sorbet.run&lt;/a&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In this example, the side effect of calling &lt;code&gt;puts(x.even?)&lt;/code&gt; only happens if the type is &lt;code&gt;Integer&lt;/code&gt;, breaking the intuition that the behavior of this function is uniform for all input types.&lt;/p&gt;
&lt;p&gt;If Sorbet wanted,&lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-0&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-0&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;Unlike everything we‚Äôve discussed so far, I‚Äôm not actually sure whether that was a conscious decision or an accident. But it is a pretty useful feature in practice.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt; it could prevent this particular form of anti-uniformity by not allowing any &lt;a href=&quot;https://sorbet.org/docs/flow-sensitive&quot;&gt;control-flow-sensitive&lt;/a&gt; type updates. But it wouldn‚Äôt change the fact that, for example, one implementation of &lt;code&gt;fake_identity_function&lt;/code&gt; could always print one log line, while another implementation could always print two log lines. The only uniformity guarantees we get are about specifically what‚Äôs captured in the input and output types.&lt;/p&gt;
&lt;p&gt;It turns out that there‚Äôs a name for this property of generic functions: &lt;a href=&quot;https://en.wikipedia.org/wiki/Parametricity&quot;&gt;parametricity&lt;/a&gt;. It‚Äôs a fancy word but it basically means what we‚Äôve talked about here: the implementation of generic functions are constrained to basically only do one thing, modulo side-effects. It goes further than just intuition though, and people have done interesting work to formalize the intuitions into proofs.&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="plt" /><summary type="html">‚Üê Return home Consider this snippet of Ruby code using Sorbet:</summary></entry><entry><title type="html">Typed Errors in Sorbet</title><link href="https://blog.jez.io/typed-errors-sorbet/" rel="alternate" type="text/html" title="Typed Errors in Sorbet" /><published>2021-06-05T01:12:37-04:00</published><updated>2021-06-05T01:12:37-04:00</updated><id>https://blog.jez.io/typed-errors-sorbet</id><content type="html" xml:base="https://blog.jez.io/typed-errors-sorbet/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;‚Üê Return home&lt;/a&gt;&lt;br&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;I really like this post from Matt Parsons, &lt;a href=&quot;https://www.parsonsmatt.org/2018/11/03/trouble_with_typed_errors.html&quot;&gt;The Trouble with Typed Errors&lt;/a&gt;. It‚Äôs written for an audience writing Haskell, but if you can grok Haskell syntax, it‚Äôs worth the read because the lessons apply broadly to most statically typed programming languages.&lt;/p&gt;
&lt;p&gt;If you haven‚Äôt read it (or it‚Äôs been a while) the setup is basically: typing errors is hard, and nearly every solution is either brittle, clunky, verbose, or uses powerful type system features that we didn‚Äôt want to have to reach for.&lt;/p&gt;
&lt;p&gt;Hidden towards the bottom of the post, we find:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In PureScript or OCaml, you can use open variant types to do this flawlessly. Haskell doesn‚Äôt have open variants, and the attempts to &amp;gt; mock them end up quite clumsy to use in practice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What Matt calls ‚Äúopen variant types‚Äù I call &lt;strong&gt;ad hoc union types&lt;/strong&gt; (see my previous post about &lt;a href=&quot;https://blog.jez.io/union-types-checked-exceptions/&quot;&gt;checked exceptions and Sorbet&lt;/a&gt;). Naming aside, Sorbet has them! We don‚Äôt have to suffer from clunky error handling!&lt;/p&gt;
&lt;p&gt;I thought it‚Äôd be interesting to show what Matt meant in this quote by translating his example to Sorbet.&lt;/p&gt;
&lt;p&gt;I wrote a complete, working example, but rather than repeat the whole thing here, I‚Äôm just going to excerpt the good stuff. If you‚Äôre wondering how something is defined in full, check the full example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20strict%0A%0A%23%20This%20is%20a%20re-implementation%20of%20Matt%20Parsons&amp;#39;s%20%22The%20Trouble%20with%20Typed%0A%23%20Errors%22%20in%20Sorbet%20(Ruby)%20because%20I%20think%20Sorbet%20happens%20to%20handle%20it%0A%23%20pretty%20well%20all%20things%20considered.%0A%23%0A%23%20%20%20%20%20%3Chttps%3A%2F%2Fwww.parsonsmatt.org%2F2018%2F11%2F03%2Ftrouble_with_typed_errors.html%3E%0A%23%0A%23%20Specifically%2C%20he%20mentions%0A%23%0A%23%20%20%20%20%20In%20PureScript%20or%20OCaml%2C%20you%20can%20use%20open%20variant%20types%20to%20do%20this%0A%23%20%20%20%20%20flawlessly.%0A%23%0A%23%20and%20Sorbet%20more%20or%20less%20has%20those%20(untagged%20unions).%20It&amp;#39;s%20interesting%0A%23%20to%20see%20what%20that%20means%20for%20being%20able%20to%20track%20errors%2C%20because%20we%0A%23%20actually%20use%20Sorbet%20in%20a%20huge%20codebase%20at%20work.%20Tracking%20all%20the%20kinds%0A%23%20of%20errors%20that%20could%20happen--and%20no%20more--can%20make%20code%20far%20easier%20to%0A%23%20understand.%0A%0A%23%20To%20run%20this%20file%3A%0A%23%0A%23%20%20%20gem%20install%20sorbet-runtime%0A%23%20%20%20ruby%20typed-errors.rb%0A%0Arequire%20&amp;#39;sorbet-runtime&amp;#39;%0A%0A%23%20There&amp;#39;s%20a%20bug%20in%20Sorbet%20that%20forces%20us%20to%20wrap%20all%20this%20code%20in%20a%0A%23%20class%2C%20but%20I%20have%20a%20PR%20open%20to%20fix%20it.%20For%20now%2C%20we%20tolerate%20it.%0Aclass%20Main%0A%20%20extend%20T%3A%3ASig%0A%0A%20%20%23%20-----%20Custom%20error%20types%20-----%0A%0A%20%20%23%20Defining%20custom%20data%20types%20is%20a%20little%20clunky%20in%20Ruby%20%2F%20Sorbet.%20You%0A%20%20%23%20have%20to%20chose%20whether%20you%20want%20a%20plain%20class%2C%20an%20enum%2C%20a%20sealed%0A%20%20%23%20class%20hierarchy%2C%20etc.%20In%20a%20real%20codebase%2C%20I%20think%20if%20you%20were%20going%0A%20%20%23%20to%20this%20length%20to%20care%20for%20errors%20the%20kinds%20of%20errors%20that%20you%20have%0A%20%20%23%20are%20usually%20pretty%20rich%20(e.g.%2C%20there&amp;#39;s%20a%20message%20and%20context%20with%0A%20%20%23%20the%20failures)%2C%20so%20you&amp;#39;d%20probably%20go%20with%20the%20sealed%20class%20hierarchy.%0A%20%20%23%0A%20%20%23%20For%20this%20example%2C%20I%20chose%20three%20different%20ways%20to%20just%20show%20them%20all.%0A%0A%20%20class%20HeadError%0A%20%20end%0A%0A%20%20class%20LookupError%20%3C%20T%3A%3AEnum%0A%20%20%20%20enums%20do%0A%20%20%20%20%20%20KeyWasNotPresent%20%3D%20new%0A%20%20%20%20end%0A%20%20end%0A%0A%20%20module%20ParseError%0A%20%20%20%20extend%20T%3A%3AHelpers%0A%20%20%20%20sealed!%0A%0A%20%20%20%20class%20UnexpectedChar%20%3C%20T%3A%3AStruct%0A%20%20%20%20%20%20include%20ParseError%0A%20%20%20%20%20%20prop%20%3Amessage%2C%20String%0A%20%20%20%20end%0A%0A%20%20%20%20class%20RanOutOfInput%0A%20%20%20%20%20%20include%20ParseError%0A%20%20%20%20end%0A%20%20end%0A%0A%20%20%23%20-----%20Helper%20methods%20-----%0A%0A%20%20%23%20Again%2C%20concise%20syntax%20is%20not%20Sorbet&amp;#39;s%20strong%20suit.%20The%20signature%0A%20%20%23%20annotations%20are%20pretty%20verbose%20here%20(especially%20generics)%20but%20they%0A%20%20%23%20pretty%20much%20exactly%20map%20to%20the%20Haskell%20functions%20in%20the%20post.%0A%0A%20%20sig%20do%0A%20%20%20%20%20%20params(xs%3A%20String)%0A%20%20%20%20%20%20.returns(T.any(String%2C%20HeadError))%0A%20%20end%0A%20%20def%20self.head(xs)%0A%20%20%20%20case%20xs.size%0A%20%20%20%20when%200%20then%20HeadError.new%0A%20%20%20%20else%20T.must(xs%5B0%5D)%0A%20%20%20%20end%0A%20%20end%0A%0A%20%20sig%20do%0A%20%20%20%20type_parameters(%3AK%2C%20%3AV)%0A%20%20%20%20%20%20.params(%0A%20%20%20%20%20%20%20%20hash%3A%20T%3A%3AHash%5BT.type_parameter(%3AK)%2C%20T.type_parameter(%3AV)%5D%2C%0A%20%20%20%20%20%20%20%20key%3A%20T.type_parameter(%3AK)%0A%20%20%20%20%20%20)%0A%20%20%20%20%20%20.returns(T.any(T.type_parameter(%3AV)%2C%20LookupError))%0A%20%20end%0A%20%20def%20self.lookup(hash%2C%20key)%0A%20%20%20%20if%20hash.key%3F(key)%0A%20%20%20%20%20%20hash.fetch(key)%0A%20%20%20%20else%0A%20%20%20%20%20%20LookupError%3A%3AKeyWasNotPresent%0A%20%20%20%20end%0A%20%20end%0A%0A%20%20sig%20do%0A%20%20%20%20params(source%3A%20String).returns(T.any(Integer%2C%20ParseError))%0A%20%20end%0A%20%20def%20self.parse(source)%0A%20%20%20%20case%20source%0A%20%20%20%20when%20%22%22%20then%20ParseError%3A%3ARanOutOfInput.new%0A%20%20%20%20else%0A%20%20%20%20%20%20begin%0A%20%20%20%20%20%20%20%20Integer(source%2C%2010)%0A%20%20%20%20%20%20rescue%20ArgumentError%20%3D%3E%20exn%0A%20%20%20%20%20%20%20%20ParseError%3A%3AUnexpectedChar.new(message%3A%20exn.message)%0A%20%20%20%20%20%20end%0A%20%20%20%20end%0A%20%20end%0A%0A%20%20%23%20-----%20Composing%20errors%20-----%0A%0A%20%20STR_MAP%20%3D%20T.let(%7B%0A%20%20%20%20%224__%22%20%3D%3E%20%222%22%0A%20%20%7D%2C%20T%3A%3AHash%5BString%2C%20String%5D)%0A%0A%20%20sig%20do%0A%20%20%20%20params(str%3A%20String)%0A%20%20%20%20%20%20.returns(T.any(Integer%2C%20HeadError%2C%20LookupError%2C%20ParseError))%0A%20%20end%0A%20%20def%20self.foo(str)%0A%20%20%20%20%23%20These%20%60return%60%20lines%20are%20definitely%20not%20as%20convenient%20as%20do%0A%20%20%20%20%23%20notation%20in%20Haskell%2C%20but%20the%20interesting%20thing%20is%20that%20they&amp;#39;re%0A%20%20%20%20%23%20still%20pretty%20nice%3A%20because%20of%20flow-sensitive%20typing%2C%20the%20type%20of%0A%20%20%20%20%23%20%60c%60%20changes%2C%20as%20commented%3A%0A%20%20%20%20c%20%3D%20head(str)%20%23%20%3D%3E%20c%20%3A%20T.any(String%2C%20HeadError)%0A%20%20%20%20return%20c%20unless%20c.is_a%3F(String)%0A%20%20%20%20%23%20%3D%3E%20c%20%3A%20String%0A%20%20%20%20r%20%3D%20lookup(STR_MAP%2C%20str)%0A%20%20%20%20return%20r%20unless%20r.is_a%3F(String)%0A%20%20%20%20parse(%22%23%7Bc%7D%23%7Br%7D%22)%0A%20%20end%0A%0A%20%20%23%20This%20method%20doesn&amp;#39;t%20call%20%60head%60%20like%20before%2C%20so%20it%20doesn&amp;#39;t%20need%20to%0A%20%20%23%20have%20%60HeadError%60%20in%20the%20return%20type.%0A%20%20sig%20do%0A%20%20%20%20params(str%3A%20String)%0A%20%20%20%20%20%20.returns(T.any(Integer%2C%20LookupError%2C%20ParseError))%0A%20%20end%0A%20%20def%20self.bar(str)%0A%20%20%20%20r%20%3D%20lookup(STR_MAP%2C%20str)%0A%20%20%20%20return%20r%20unless%20r.is_a%3F(String)%0A%20%20%20%20parse(r)%0A%20%20end%0A%0A%20%20p%20foo(%224__%22)%0A%20%20p%20bar(%224__%22)%0Aend%0A%0A%23%20Because%20%60T.any%60%20can%20create%20ad%20hoc%2C%20untagged%20union%20types%20anywhere%2C%0A%23%20there&amp;#39;s%20no%20need%20to%20define%20an%20%60AllErrorsEver%60%20data%20type%20like%20the%20reader%0A%23%20was%20tempted%20to%20in%20the%20Typed%20Errors%20blog%20post.%0A%23%0A%23%20If%20you%20find%20that%20a%20particular%20set%20of%20errors%20are%20showing%20up%20super%0A%23%20frequently%2C%20you%20can%20lurk%20them%20into%20a%20type%20alias%3A%0A%23%0A%23%20%20%20%20%20MostCommonErrors%20%3D%20T.type_alias%20%7BT.any(LookupError%2C%20ParseError)%7D%0A%23%0A%23%20and%20then%20use%20this%20alias%20in%20various%20places.%0A%23%0A%23%20One%20other%20note%3A%20to%20make%20this%20pattern%20nicer%2C%20code%20might%20want%20to%0A%23%20explicitly%20box%20up%20successful%20results%2C%20with%20a%20type%20like%0A%23%0A%23%20%20%20%20%20class%20Ok%20%3C%20T%3A%3AStruct%0A%23%20%20%20%20%20%20%20extend%20T%3A%3AGeneric%0A%23%20%20%20%20%20%20%20Type%20%3D%20type_member%0A%23%20%20%20%20%20%20%20prop%20%3Aval%2C%20Type%0A%23%20%20%20%20%20end%0A%23%0A%23%20So%20then%20you&amp;#39;d%20have%0A%23%20%20%20%20%20T.any(Ok%5BString%5D%2C%20MostCommonErrors)%0A%23%20and%20you%20could%20do%20make%20all%20the%20%60return%60%20lines%20always%20look%20the%20same%3A%0A%23%20%20%20%20%20return%20x%20unless%20x.is_a%3F(Ok)%0A%23%20but%20the%20flipside%20would%20mean%20that%20you&amp;#39;d%20have%20to%20use%20%60.val%60%20at%20all%20the%0A%23%20places%20that%20you%20would%20have%20normally%20used%20%60x%60%3A%0A%23%20%20%20%20%20parse(x.val)%0A%23%20so%20it&amp;#39;s%20maybe%20not%20worth%20it.%0A%0A&quot;&gt;‚Üí View on sorbet.run&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, here‚Äôs how we‚Äôd type the three running helper methods from Matt‚Äôs post:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Returns the first letter of the input,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# or returns `HeadError` if empty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;params(&lt;span class=&quot;wa&quot;&gt;xs: &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;HeadError&lt;/span&gt;))&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;.head&lt;/span&gt;(xs); &lt;span class=&quot;kw&quot;&gt;...&lt;/span&gt;; &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Gets the value for `key` in `hash`, or returns LookupError.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# This is normally defined in the stdlib, and in trying to&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# match Matt&amp;#39;s post, it ends up not being super idiomatic,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# but the types still work out.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  type_parameters(&lt;span class=&quot;wa&quot;&gt;:K&lt;/span&gt;, &lt;span class=&quot;wa&quot;&gt;:V&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.params&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;wa&quot;&gt;hash: &lt;/span&gt;T&lt;span class=&quot;kw&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;[&lt;/span&gt;T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:K&lt;/span&gt;), T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:V&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;]&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;wa&quot;&gt;key: &lt;/span&gt;T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:K&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.type_parameter&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;:V&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;LookupError&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;.lookup&lt;/span&gt;(hash, key); &lt;span class=&quot;kw&quot;&gt;...&lt;/span&gt;; en&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Convert a String to an integer, or return ParseError.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-24&quot;&gt;&lt;a href=&quot;#cb1-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;params(&lt;span class=&quot;wa&quot;&gt;source: &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;))&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-25&quot;&gt;&lt;a href=&quot;#cb1-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;.parse&lt;/span&gt;(source); &lt;span class=&quot;kw&quot;&gt;...&lt;/span&gt;; &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how in all three cases, we use a normal &lt;a href=&quot;https://sorbet.org/docs/union-types&quot;&gt;Sorbet union type&lt;/a&gt; in the return, like &lt;code&gt;T.any(String, HeadError)&lt;/code&gt;. All of the error types are just user-defined classes. For example, &lt;code&gt;HeadError&lt;/code&gt; is just defined like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;HeadError&lt;/span&gt;; &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;code&gt;ParseError&lt;/code&gt; is defined using &lt;a href=&quot;https://sorbet.org/docs/sealed&quot;&gt;sealed classes&lt;/a&gt; and &lt;a href=&quot;https://sorbet.org/docs/tstruct&quot;&gt;typed structs&lt;/a&gt; to approximate algebraic data types in other typed languages:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;extend&lt;/span&gt; T&lt;span class=&quot;kw&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Helpers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  sealed!&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;UnexpectedChar&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt; T&lt;span class=&quot;kw&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Struct&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    prop &lt;span class=&quot;wa&quot;&gt;:message&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RanOutOfInput&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then at the caller side, it‚Äôs simple to handle the errors:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  params(&lt;span class=&quot;wa&quot;&gt;str: &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;HeadError&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;LookupError&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;.foo&lt;/span&gt;(str)&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  c &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; head(str) &lt;span class=&quot;co&quot;&gt;# =&amp;gt; c : T.any(String, HeadError)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; c &lt;span class=&quot;cf&quot;&gt;unless&lt;/span&gt; c&lt;span class=&quot;at&quot;&gt;.is_a?&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# =&amp;gt; c : String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  r &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; lookup(&lt;span class=&quot;cn&quot;&gt;STR_MAP&lt;/span&gt;, str)&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; r &lt;span class=&quot;cf&quot;&gt;unless&lt;/span&gt; r&lt;span class=&quot;at&quot;&gt;.is_a?&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  parse(&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;#{&lt;/span&gt;c&lt;span class=&quot;sc&quot;&gt;}#{&lt;/span&gt;r&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;#cb4-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea is that the return type includes the possible errors, so we have to handle them. This example handles the errors by checking for success and returning early with the error otherwise. This manifests in the return type of &lt;code&gt;foo&lt;/code&gt;, which mentions four outcomes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a successful result (&lt;code&gt;Integer&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;three kinds of failures (&lt;code&gt;HeadError&lt;/code&gt;, &lt;code&gt;LookupError&lt;/code&gt;, and &lt;code&gt;ParseError&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It would have worked equally well to handle and recover from any or all of the errors: Sorbet knows exactly which error is returned by which method, so there‚Äôs never a burden of handling more errors than are possible.&lt;/p&gt;
&lt;p&gt;It‚Äôs fun that what makes this work is Sorbet‚Äôs natural &lt;a href=&quot;https://sorbet.org/docs/flow-sensitive&quot;&gt;flow-sensitive typing&lt;/a&gt;, not some special language feature. Notice how before and after the first early return, Sorbet updates its knowledge of the type of &lt;code&gt;c&lt;/code&gt; (shown in the comments) because it knows how &lt;code&gt;is_a?&lt;/code&gt; works.&lt;/p&gt;
&lt;p&gt;Another example: if some other method only calls &lt;code&gt;lookup&lt;/code&gt; and &lt;code&gt;parse&lt;/code&gt; (but not &lt;code&gt;head&lt;/code&gt;), it doesn‚Äôt have to mention &lt;code&gt;HeadError&lt;/code&gt; in its return:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  params(&lt;span class=&quot;wa&quot;&gt;str: &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# does need to mention HeadError&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;LookupError&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;.bar&lt;/span&gt;(str)&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  r &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; lookup(&lt;span class=&quot;cn&quot;&gt;STR_MAP&lt;/span&gt;, str)&lt;/span&gt;
&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; r &lt;span class=&quot;cf&quot;&gt;unless&lt;/span&gt; r&lt;span class=&quot;at&quot;&gt;.is_a?&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  parse(r)&lt;/span&gt;
&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And while there‚Äôs never a &lt;strong&gt;need&lt;/strong&gt; to predeclare one monolithic error type (like &lt;code&gt;AllErrorsEver&lt;/code&gt; in Matt‚Äôs post), if it happens to be convenient, Sorbet still lets you, using type aliases. For example, maybe there are a bunch of methods that all return &lt;code&gt;LookupError&lt;/code&gt; and &lt;code&gt;ParseError&lt;/code&gt;. We can factor that out into a type alias:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;MostCommonErrors&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; T&lt;span class=&quot;at&quot;&gt;.type_alias&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;LookupError&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That‚Äôs it! Sorbet‚Äôs union types in method returns provide a low-friction, high value way to model how methods can fail.&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="types" /><summary type="html">‚Üê Return home I really like this post from Matt Parsons, The Trouble with Typed Errors. It‚Äôs written for an audience writing Haskell, but if you can grok Haskell syntax, it‚Äôs worth the read because the lessons apply broadly to most statically typed programming languages.</summary></entry><entry><title type="html">Sorbet Does Not Have Checked Exceptions</title><link href="https://blog.jez.io/union-types-checked-exceptions/" rel="alternate" type="text/html" title="Sorbet Does Not Have Checked Exceptions" /><published>2021-05-29T04:21:41-04:00</published><updated>2021-05-29T04:21:41-04:00</updated><id>https://blog.jez.io/union-types-checked-exceptions</id><content type="html" xml:base="https://blog.jez.io/union-types-checked-exceptions/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;br&gt;
  &lt;strong&gt;Contents&lt;/strong&gt;&lt;label for=&quot;contents&quot;&gt;‚äï&lt;/label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;contents&quot;&gt;
  &lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#background-sorbets-union-types&quot;&gt;Background: Sorbet‚Äôs union types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-from-checked-exceptions-to-union-types&quot;&gt;Example: From checked exceptions to union types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#analysis&quot;&gt;Analysis: Why the union types approach is better&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendix&quot;&gt;Appendix: Checked Exceptions&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;Here‚Äôs a common question I get asked about Sorbet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Does Sorbet support checked exceptions, like Java?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(In fact, this was the &lt;a href=&quot;https://youtu.be/odmlf_ezsBo?t=1921&quot;&gt;first question&lt;/a&gt; I was asked at my &lt;a href=&quot;https://jez.io/talks/state-of-sorbet-2019/&quot;&gt;first conference talk&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The answer: Sorbet doesn‚Äôt support checked exceptions, and I don‚Äôt think it ever should.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Before I dive in, there are two pretexts I‚Äôm assuming: either you asked this question and someone linked you this post, or the post title was enough to catch your attention. Either way, I‚Äôm going to take for granted that you know what I mean by ‚Äúchecked exceptions.‚Äù If you want a quick refresher, jump down to the &lt;a href=&quot;#appendix&quot;&gt;Appendix&lt;/a&gt; and then come back.&lt;/p&gt;
&lt;p&gt;My claim is that checked exceptions are a poor man‚Äôs ad hoc union types, that since Sorbet has ad hoc union types it doesn‚Äôt need checked exceptions. I‚Äôll discuss this claim in three parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I‚Äôll give some background on what it means for union types to be ‚Äúad hoc,‚Äù which applies to Sorbet‚Äôs union types but are somewhat rare.&lt;/li&gt;
&lt;li&gt;I‚Äôll describe a translation from checked exceptions in Java to union-typed returns in Ruby with a concrete example.&lt;/li&gt;
&lt;li&gt;I‚Äôll give evidence for why the union types approach is better.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(If you want to skip straight to the good stuff, the analysis &lt;a href=&quot;#analysis&quot;&gt;is down here&lt;/a&gt;.)&lt;/p&gt;
&lt;h1 id=&quot;background-sorbets-union-types&quot;&gt;Background: Sorbet‚Äôs union types&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The throws clause is the only point in the entire Java language that allows union types. You can tack ‚Äúthrows A,B,C‚Äù onto a method signature meaning it might throw A or B or C, but outside of the throws clause you cannot say ‚Äútype A or B or C‚Äù in Java.&lt;/p&gt;
&lt;p&gt;‚Äî James Iry, &lt;em&gt;&lt;a href=&quot;http://james-iry.blogspot.com/2012/02/checked-exceptions-might-have-their.html&quot;&gt;Checked Exceptions Might Have Their Place, But It Isn‚Äôt In Java&lt;/a&gt;&lt;/em&gt; (2012)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sorbet supports &lt;a href=&quot;https://sorbet.org/docs/union-types&quot;&gt;union types&lt;/a&gt;. More specifically, Sorbet‚Äôs union types are ad hoc: any number of types can be unioned together on demand:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;returns(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(A, B, C))&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; foo; &lt;span class=&quot;kw&quot;&gt;...&lt;/span&gt;; &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By contrast, many languages with union types require predeclaring a union‚Äôs variants, for example in Rust:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode rust&quot;&gt;&lt;code class=&quot;sourceCode rust&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; AorBorC &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    A(A)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    B(B)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    C(C)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That Sorbet allows defining union types on demand is similar to Java‚Äôs &lt;code&gt;throws&lt;/code&gt; clause, but more powerful: &lt;code&gt;throws A, B, C&lt;/code&gt; is not a type, while &lt;code&gt;T.any(A, B, C)&lt;/code&gt; is. We‚Äôll see why that matters below.&lt;/p&gt;
&lt;h1 id=&quot;example-from-checked-exceptions-to-union-types&quot;&gt;Example: From checked exceptions to union types&lt;/h1&gt;
&lt;p&gt;Using Sorbet‚Äôs ad hoc union types, it‚Äôs mechanical to convert Java-style checked exceptions to Sorbet-annotated Ruby. To demonstrate:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;Currency&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;parseCurrency&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;String&lt;/span&gt; currencyStr&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;ParseException&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;Currency&lt;/span&gt; currency &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; KNOWN_CURRENCIES&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;currencyStr&lt;span class=&quot;op&quot;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;currency &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;ParseException&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt; currencyStr &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;#39; is not a valid currency&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; currency&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a somewhat contrived Java method, but it‚Äôll be good enough to demonstrate the concepts.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;parseCurrency&lt;/code&gt; is given a string it can‚Äôt handle, it raises a &lt;code&gt;ParseException&lt;/code&gt;. It declares this with &lt;code&gt;throws&lt;/code&gt; because &lt;code&gt;ParseException&lt;/code&gt; is a checked exception. If the currency string is recognized, it returns some &lt;code&gt;Currency&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Here‚Äôs how we‚Äôd write that in Sorbet:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# (0) Ruby&amp;#39;s standard library doesn&amp;#39;t have `ParseException`,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# so I&amp;#39;ve re-implemented it.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt; T&lt;span class=&quot;kw&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Struct&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  const &lt;span class=&quot;wa&quot;&gt;:message&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  const &lt;span class=&quot;wa&quot;&gt;:offset&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# (1) return type + `throws` becomes just `returns`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# (2) Return type uses `T.any`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  params(&lt;span class=&quot;wa&quot;&gt;currency_str: &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;#cb4-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Currency&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb4-13&quot;&gt;&lt;a href=&quot;#cb4-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-14&quot;&gt;&lt;a href=&quot;#cb4-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; parse_currency(currency_str)&lt;/span&gt;
&lt;span id=&quot;cb4-15&quot;&gt;&lt;a href=&quot;#cb4-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  currency &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cn&quot;&gt;KNOWN_CURRENCIES&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;[&lt;/span&gt;currency_str&lt;span class=&quot;kw&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-16&quot;&gt;&lt;a href=&quot;#cb4-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; currency&lt;span class=&quot;at&quot;&gt;.nil?&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-17&quot;&gt;&lt;a href=&quot;#cb4-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# (3) `throw` becomes `return`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-18&quot;&gt;&lt;a href=&quot;#cb4-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;.new&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&quot;cb4-19&quot;&gt;&lt;a href=&quot;#cb4-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;wa&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;#{&lt;/span&gt;currency_str&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39; is not a valid currency&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb4-20&quot;&gt;&lt;a href=&quot;#cb4-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;wa&quot;&gt;offset: &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-21&quot;&gt;&lt;a href=&quot;#cb4-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&quot;cb4-22&quot;&gt;&lt;a href=&quot;#cb4-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-23&quot;&gt;&lt;a href=&quot;#cb4-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-24&quot;&gt;&lt;a href=&quot;#cb4-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  currency&lt;/span&gt;
&lt;span id=&quot;cb4-25&quot;&gt;&lt;a href=&quot;#cb4-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important changes:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Where Java had a return type and a &lt;code&gt;throws&lt;/code&gt; clause, Sorbet just has a return type.&lt;/li&gt;
&lt;li&gt;Sorbet‚Äôs return type is a union type (&lt;code&gt;T.any(...)&lt;/code&gt;). It mentions the Java method‚Äôs return type and all the exceptions mentioned in the &lt;code&gt;throws&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Where the Java example uses &lt;code&gt;throw&lt;/code&gt;, the Ruby example uses &lt;code&gt;return&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our translation isn‚Äôt complete until we see how the &lt;code&gt;parseCurrency&lt;/code&gt; caller side changes. In Java, we call &lt;code&gt;parseCurrency&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Charge &lt;span class=&quot;fu&quot;&gt;createCharge&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; amount&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;String&lt;/span&gt; currencyStr&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;ParseException&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;Currency&lt;/span&gt; currency &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;parseCurrency&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;currencyStr&lt;span class=&quot;op&quot;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Charge&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;amount&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; currency&lt;span class=&quot;op&quot;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With Sorbet, this snippet becomes:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sig &lt;span class=&quot;cf&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  params(&lt;span class=&quot;wa&quot;&gt;amount: &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;wa&quot;&gt;currency_str: &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;.returns&lt;/span&gt;(T&lt;span class=&quot;at&quot;&gt;.any&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Charge&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParseError&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; create_charge(amount, currency_str)&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  currency &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; parse_currency(currency_str)&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; currency &lt;span class=&quot;cf&quot;&gt;unless&lt;/span&gt; currency&lt;span class=&quot;at&quot;&gt;.is_a?&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Currency&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;Charge&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;.new&lt;/span&gt;(&lt;span class=&quot;wa&quot;&gt;amount: &lt;/span&gt;amount, &lt;span class=&quot;wa&quot;&gt;currency: &lt;/span&gt;currency)&lt;/span&gt;
&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before, the &lt;code&gt;throws&lt;/code&gt; clause in Java becomes a union-typed return in Ruby.&lt;/p&gt;
&lt;p&gt;The new bit is the explicit &lt;code&gt;return ... unless ...&lt;/code&gt;. Whereas uncaught exceptions implicitly bubble up to the caller, return values only bubble up if explicitly returned. This is a key benefit of the union types approach, which brings us to our next section.&lt;/p&gt;
&lt;h1 id=&quot;analysis&quot;&gt;Analysis: Why the union types approach is better&lt;/h1&gt;
&lt;p&gt;To recap, Sorbet‚Äôs union types are ad hoc, much in the same sense as the classes mentioned in Java‚Äôs &lt;code&gt;throws&lt;/code&gt; clause. When converting from &lt;code&gt;Java&lt;/code&gt; to &lt;code&gt;Ruby&lt;/code&gt;, a single, union-typed return takes the place of a separate return type and &lt;code&gt;throws&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;First off, this translation preserves the best parts of checked exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A method‚Äôs failure modes still appear in an &lt;strong&gt;explicit, public API&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In both Java and Ruby, the method signature behaves as machine-checked error documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ad hoc error specifications enable &lt;strong&gt;low-friction composition&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In both Java and Ruby, if our method is the first to combine two methods with unrelated failure modes, there‚Äôs no ceremony to predeclare that combination. Instead, we just mention one more class in the method‚Äôs signature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But this approach is not only as good, it‚Äôs better, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As a language feature, &lt;strong&gt;union types are not special&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Union types are types. Like other types, we can store them in variables. We can factor common error recovery code into helper functions. We can map functions returning union types over lists. We can write type aliases that abbreviate commonly-grouped error classes. We can‚Äôt do any of this with checked exceptions, and this is the most common complaint against them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Union types have &lt;strong&gt;call-site granularity&lt;/strong&gt;, not method-body granularity.&lt;/p&gt;
&lt;p&gt;The union types approach forces a choice of how to handle errors at each call site. This is more robust in the face of changing code, because new call sites should not necessarily inherit the error handling logic of existing call sites. Just because one &lt;code&gt;ParseException&lt;/code&gt; was uncaught and mentioned in the &lt;code&gt;throws&lt;/code&gt; does not mean all of them should be.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally, let me get out ahead of some common counter arguments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The union types approach requires more typing at the call site!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep. But I‚Äôve already counted this as a blessing, not a curse.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But real-world Ruby code already uses exceptions!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep. But in Java too, the world is already split into checked and unchecked exceptions. In both Java and Ruby, exceptions are a fact of life, and you‚Äôll always need a way to deal with unexpected exceptions (e.g., comprehensive tests, automated production alerting, etc.).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With checked exceptions, I could handle all the failures at once!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That‚Äôs true; with checked exceptions, it‚Äôs easy to write a single &lt;code&gt;catch&lt;/code&gt; statement that handles all failures due to, say, a &lt;code&gt;ParseException&lt;/code&gt; in a whole region of code, avoiding the need for code repetition.&lt;/p&gt;
&lt;p&gt;The upshot is that with union types, we can just use functions. Take everything in the &lt;code&gt;catch&lt;/code&gt; body, put it in a helper function, and call it at each call site. This cuts down on duplication, and I already mentioned how call-site granularity is a win.&lt;/p&gt;
&lt;p&gt;That‚Äôs pretty much it. Sorbet doesn‚Äôt need checked exceptions, it already has ad hoc union types.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;appendix&quot;&gt;Appendix: Checked Exceptions&lt;/h1&gt;
&lt;p&gt;As a quick refresher, &lt;a href=&quot;https://en.wikibooks.org/wiki/Java_Programming/Checked_Exceptions&quot;&gt;checked exceptions&lt;/a&gt; are a feature popularized by Java. The syntax looks like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doThing&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MyException &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;throws&lt;/code&gt; keyword is a part of the method‚Äôs signature, just like argument and return types. It declares that this method might throw &lt;code&gt;MyException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since it‚Äôs a part of this method‚Äôs signature the &lt;code&gt;throws&lt;/code&gt; annotation will be checked at all call sites (just like argument and return types). A method containing calls to &lt;code&gt;doThing&lt;/code&gt; must either &lt;code&gt;catch&lt;/code&gt; all mentioned exceptions or repeat any maybe-thrown-but-uncaught exceptions in its own &lt;code&gt;throws&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;If a method throws multiple classes of exceptions, they can all be listed:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doThing&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MyException&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; YourException&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; AnotherException &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The argument in favor of checked exceptions is that they‚Äôre explicit and machine-checked. Users don‚Äôt have to guess at what a method might throw, or hope that there‚Äôs accurate documentation‚Äîall benefits shared by static typing in general, which is a sympathetic goal.&lt;/p&gt;
&lt;p&gt;Checked exceptions seem like a good feature on paper. In practice, they‚Äôre generally regretted. I‚Äôm nowhere near the first person to come to this conclusion, so instead I‚Äôll link you to some previous discussions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artima.com/articles/the-trouble-with-checked-exceptions&quot;&gt;The Trouble with Checked Exceptions&lt;/a&gt;, A Conversation with Anders Hejlsberg&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://james-iry.blogspot.com/2012/02/checked-exceptions-might-have-their.html&quot;&gt;Checked Exceptions Might Have Their Place, But It Isn‚Äôt In Java&lt;/a&gt;, by James Iry&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ericlippert.com/2008/09/10/vexing-exceptions/&quot;&gt;Vexing Exceptions&lt;/a&gt;, by Eric Lippert&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The last one isn‚Äôt actually about checked exceptions: it‚Äôs just about exceptions and I like it, so I included it.)&lt;/p&gt;
&lt;p&gt;Java has been copied and imitated for decades. Among all the features we see other languages copy from Java, checked exceptions are absent.&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="types" /><summary type="html">‚Üê Return home Here‚Äôs a common question I get asked about Sorbet:</summary></entry><entry><title type="html">Exploring Ruby with clangd</title><link href="https://blog.jez.io/clangd-ruby/" rel="alternate" type="text/html" title="Exploring Ruby with clangd" /><published>2020-07-21T18:40:23-04:00</published><updated>2020-07-21T18:40:23-04:00</updated><id>https://blog.jez.io/clangd-ruby</id><content type="html" xml:base="https://blog.jez.io/clangd-ruby/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;br&gt;
  &lt;strong&gt;Contents&lt;/strong&gt;&lt;label for=&quot;contents&quot;&gt;‚äï&lt;/label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;contents&quot;&gt;
  &lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#steps&quot;&gt;Steps&lt;/a&gt;
  &lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#install-bear&quot;&gt;1. Install &lt;span&gt;Bear&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#clone-the-ruby-source-code.&quot;&gt;2. Clone the Ruby source code.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-the-ruby-build.&quot;&gt;3. Configure the Ruby build.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#use-bear-to-invoke-make&quot;&gt;4. Use &lt;code&gt;bear&lt;/code&gt; to invoke &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thats-it&quot;&gt;5. That‚Äôs it!&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendix-building-bear-from-source&quot;&gt;Appendix: Building Bear from source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendix-lsp-in-neovim-with-languageclient-neovim&quot;&gt;Appendix: LSP in Neovim with LanguageClient-neovim&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;I‚Äôve managed to get LSP-based IDE features powered by &lt;a href=&quot;https://clangd.llvm.org/&quot;&gt;clangd&lt;/a&gt; working for the Ruby VM‚Äôs source code (in my case, in Vim). Here‚Äôs how I did it!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;I‚Äôve been making a point to learn more about &lt;a href=&quot;/search-down-the-stack/&quot;&gt;things I depend on&lt;/a&gt; recently. Today, that means learning about Ruby. And what better way to learn than to check out the source code, and jump around?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://clangd.llvm.org/&quot;&gt;clangd&lt;/a&gt; is an editor-agnostic language server that uses the &lt;a href=&quot;https://langserver.org/&quot;&gt;Language Server Protocol&lt;/a&gt; to power IDE-like features in your preferred text editor. All it needs is a &lt;code&gt;compile_commands.json&lt;/code&gt;, which is basically a mapping of filename to options to pass to &lt;code&gt;clang&lt;/code&gt; so that it knows things like which warnings to enable and where to search for header files.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://clangd.llvm.org/&quot;&gt;clangd&lt;/a&gt; works best for projects built using &lt;code&gt;cmake&lt;/code&gt;, but the Ruby VM doesn‚Äôt use &lt;code&gt;cmake&lt;/code&gt;. Regardless, we can make a &lt;code&gt;compile_commands.json&lt;/code&gt; file by using &lt;a href=&quot;https://github.com/rizsotto/Bear&quot;&gt;Bear&lt;/a&gt; to trace the execution of a Ruby build, and use the trace information to write out a &lt;code&gt;compile_commands.json&lt;/code&gt; file.&lt;/p&gt;
&lt;h1 id=&quot;steps&quot;&gt;Steps&lt;/h1&gt;
&lt;p&gt;I could only get these steps to work for Linux, as the Bear README mentions that on macOS you have to disable System Integrity Protection to get it to work.&lt;/p&gt;
&lt;h2 id=&quot;install-bear&quot;&gt;1. Install &lt;a href=&quot;https://github.com/rizsotto/Bear&quot;&gt;Bear&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I describe how I built Bear from source in the Appendix.&lt;/p&gt;
&lt;h2 id=&quot;clone-the-ruby-source-code.&quot;&gt;2. Clone the Ruby source code.&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; clone https://github.com/ruby/ruby&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;cd&lt;/span&gt; ruby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;configure-the-ruby-build.&quot;&gt;3. Configure the Ruby build.&lt;/h2&gt;
&lt;p&gt;We have to tell the &lt;code&gt;configure&lt;/code&gt; script to use Clang to compile (or if you‚Äôre confident that your system compiler toolchain is Clang, you can just run &lt;code&gt;./configure&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Create the ./configure file&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;autoconf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# This only works when using clang to build Ruby&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;./configure&lt;/span&gt; CC=clang&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;use-bear-to-invoke-make&quot;&gt;4. Use &lt;code&gt;bear&lt;/code&gt; to invoke &lt;code&gt;make&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Bear will use a dynamically preloaded library to trace system calls that exec &lt;code&gt;clang&lt;/code&gt; processes, looking at things like the command line arguments given to Clang.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;bear&lt;/span&gt; make&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;thats-it&quot;&gt;5. That‚Äôs it!&lt;/h2&gt;
&lt;p&gt;The output is &lt;code&gt;./compile_commands.json&lt;/code&gt;, which should be non-empty. If it‚Äôs empty or just has &lt;code&gt;[]&lt;/code&gt;, it didn‚Äôt work. There‚Äôs some troubleshooting in the &lt;a href=&quot;https://github.com/rizsotto/Bear&quot;&gt;Bear&lt;/a&gt; README.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;compile_commands.json&lt;/code&gt; file will be consumed by &lt;code&gt;clangd&lt;/code&gt; in your editor. Check &lt;a href=&quot;https://langserver.org&quot; class=&quot;uri&quot;&gt;https://langserver.org&lt;/a&gt; to find an LSP client for your preferred editor, and follow its setup instructions.&lt;/p&gt;
&lt;p&gt;Once you‚Äôve built the &lt;code&gt;compile_commands.json&lt;/code&gt; file and configured your editor to use LSP with &lt;code&gt;clangd&lt;/code&gt;, you should be able to do things like Jump to Definition and Hover on the Ruby source code!&lt;/p&gt;
&lt;h1 id=&quot;appendix-building-bear-from-source&quot;&gt;Appendix: Building Bear from source&lt;/h1&gt;
&lt;p&gt;This is probably common knowledge for people who use &lt;code&gt;cmake&lt;/code&gt; regularly, but this is how I built Bear from source, because I built it on a machine where I didn‚Äôt have root so I couldn‚Äôt write to &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; clone https://github.com/rizsotto/Bear&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;cd&lt;/span&gt; Bear&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;mkdir&lt;/span&gt; build&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;cd&lt;/span&gt; build&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Install to $HOME/.local/bin instead of /usr/local/bin&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;cmake&lt;/span&gt; .. &lt;span class=&quot;st&quot;&gt;&amp;quot;-DCMAKE_INSTALL_PREFIX=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/.local&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;nproc&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;make&lt;/span&gt; install&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ‚Üí $HOME/.local/bin/bear exists now&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;appendix-lsp-in-neovim-with-languageclient-neovim&quot;&gt;Appendix: LSP in Neovim with LanguageClient-neovim&lt;/h1&gt;
&lt;p&gt;I use Neovim. My preferred LSP client is &lt;a href=&quot;https://github.com/autozimu/LanguageClient-neovim&quot;&gt;LanguageClient-neovim&lt;/a&gt;. Here‚Äôs the parts of my Neovim config files that setup &lt;code&gt;clangd&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jez/dotfiles/blob/865a74d93d8ab1c28713ae0dcd53797b6c26dc6a/vim/plug-settings.vim#L576-L587&quot;&gt;‚Üí &lt;code&gt;vim/plug-settings.vim&lt;/code&gt; in jez/dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="vim" /><category term="debugging" /><summary type="html">‚Üê Return home I‚Äôve managed to get LSP-based IDE features powered by clangd working for the Ruby VM‚Äôs source code (in my case, in Vim). Here‚Äôs how I did it!</summary></entry><entry><title type="html">Linkers &amp;amp; Ruby C Extensions</title><link href="https://blog.jez.io/linkers-ruby-c-exts/" rel="alternate" type="text/html" title="Linkers &amp;amp; Ruby C Extensions" /><published>2020-06-07T13:05:07-04:00</published><updated>2020-06-07T13:05:07-04:00</updated><id>https://blog.jez.io/linkers-ruby-c-exts</id><content type="html" xml:base="https://blog.jez.io/linkers-ruby-c-exts/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;‚Üê Return home&lt;/a&gt;&lt;br&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;I recently learned that linkers are really cool. It all started when I saw an error message that looked something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ rake test
symbol lookup error: /home/jez/.../foo.so: undefined symbol bar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I &lt;a href=&quot;/search-down-the-stack/&quot;&gt;already wrote&lt;/a&gt; about finding where this error was coming from. The tl;dr is that it was coming from GNU‚Äôs libc implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ rg -t c &amp;#39;symbol lookup error&amp;#39;
dl-lookup.c
876:      _dl_signal_cexception (0, &amp;amp;exception, N_(&amp;quot;symbol lookup error&amp;quot;));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That led me to a fun exploration of how linux linkers work, and how Ruby C extensions rely on them.&lt;/p&gt;
&lt;p&gt;I always knew that Ruby C extensions existed (that they &lt;a href=&quot;https://twitter.com/asolove/status/1261339091485917184&quot;&gt;break all the time&lt;/a&gt; is a constant reminder‚Ä¶) but I never really connected the dots between ‚Äúhere‚Äôs some C code‚Äù and how Ruby actually runs that code.&lt;/p&gt;
&lt;p&gt;Ruby C extensions are just shared libraries following certain conventions. Specifically, a Ruby C extension might look like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode c&quot;&gt;&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;pp&quot;&gt;#include &lt;/span&gt;&lt;span class=&quot;im&quot;&gt;&amp;quot;ruby.h&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;VALUE my_foo(VALUE self, VALUE val) {&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; rb_funcall(self, rb_intern(&lt;span class=&quot;st&quot;&gt;&amp;quot;puts&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, val)&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// This function&amp;#39;s name matters:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; Init_my_lib() {&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  rb_define_method(rb_cObject, &lt;span class=&quot;st&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;, my_foo);&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important part is that the name of that &lt;code&gt;Init_my_lib&lt;/code&gt; function matters. When Ruby sees a line like&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;&amp;#39;./my_lib&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it looks for a file called &lt;code&gt;my_lib.so&lt;/code&gt; (or &lt;code&gt;my_lib.bundle&lt;/code&gt; on macOS), asks the operating system to load that file as a shared library, and then looks for a function with the name &lt;code&gt;Init_my_lib&lt;/code&gt; inside the library it just loaded.&lt;/p&gt;
&lt;p&gt;When that function runs, it‚Äôs a chance for the C extension to do the same sorts of things that a normal Ruby file might have done if it had been &lt;code&gt;require&lt;/code&gt;‚Äôd.¬†In this example, it defines a method &lt;code&gt;foo&lt;/code&gt; at the top level, almost like the user had written normal Ruby code like this:&lt;/p&gt;
&lt;figure&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;def&lt;/span&gt; foo(val)&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;puts&lt;/span&gt; val&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figcaption&gt;
my_lib.rb
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;That‚Äôs kind of wild! That means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C programs can load libraries dynamically at runtime, using arbitrary user input.&lt;/li&gt;
&lt;li&gt;C programs can then ask if there‚Äôs a function defined in that library with an arbitrary name, and get a function pointer to call it if there is!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was pretty shocked to learn this, because my mental model of how linking worked was that it split evenly into two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;‚ÄúMy application is statically linked, where all the code and libraries my application depends on are compiled into my binary.‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‚ÄúMy application is dynamically linked, which means my binary pre-declares some libraries that must be loaded before my program can start running.‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There‚Äôs actually a third option!&lt;/p&gt;
&lt;p&gt;Then I looked into what code Ruby actually calls to do this. I found the code in &lt;code&gt;dln.c&lt;/code&gt;:&lt;/p&gt;
&lt;figure&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode c&quot;&gt;&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;/* Load file */&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; ((handle = (&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;*)dlopen(file, RTLD_LAZY|RTLD_GLOBAL)) == NULL) {&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    error = dln_strerror();&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;goto&lt;/span&gt; failed;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figcaption&gt;
dln.c
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ruby/ruby/blob/37c2cd3fa47c709570e22ec4dac723ca211f423a/dln.c#L1341&quot;&gt;‚Üí View on github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ruby uses the &lt;code&gt;dlopen(3)&lt;/code&gt; function in libc to request that an arbitrary user library be loaded. From the man page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The function dlopen() loads the dynamic shared object (shared library) file named by the null-terminated string filename and returns an opaque ‚Äúhandle‚Äù for the loaded object.&lt;/p&gt;
&lt;p&gt;‚Äî man dlopen&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next thing Ruby does with this opaque &lt;code&gt;handle&lt;/code&gt; is to find if the thing it just loaded has an &lt;code&gt;Init_&amp;lt;...&amp;gt;&lt;/code&gt; function inside it:&lt;/p&gt;
&lt;figure&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode c&quot;&gt;&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;init_fct = (&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;(*)())(VALUE)dlsym(handle, buf);&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (init_fct == NULL) {&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;size_t&lt;/span&gt; errlen = strlen(error = dln_strerror()) + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    error = memcpy(ALLOCA_N(&lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;, errlen), error, errlen);&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    dlclose(handle);&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;goto&lt;/span&gt; failed;&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figcaption&gt;
dln.c
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ruby/ruby/blob/37c2cd3fa47c709570e22ec4dac723ca211f423a/dln.c#L1363-L1369&quot;&gt;‚Üí View on github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It uses &lt;code&gt;dlsym(3)&lt;/code&gt; (again in libc) to look up a method with an arbitrary name (&lt;code&gt;buf&lt;/code&gt;) inside the library it just opened (&lt;code&gt;handle&lt;/code&gt;). That function must exist‚Äîif it doesn‚Äôt, it‚Äôs not a valid Ruby C extension and Ruby reports an error.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;dlsym&lt;/code&gt; found a function with the right name, it stores a function pointer into &lt;code&gt;init_fct&lt;/code&gt;, which Ruby immediately dereferences and calls:&lt;/p&gt;
&lt;figure&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode c&quot;&gt;&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;/* Call the init code */&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(*init_fct)();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figcaption&gt;
dln.c
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ruby/ruby/blob/37c2cd3fa47c709570e22ec4dac723ca211f423a/dln.c#L1370-L1371&quot;&gt;‚Üí View on github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It‚Äôs still kind of mind bending to think that C provides this level of ‚Äúdynamism.‚Äù I had always thought that being a compiled language meant that the set of functions a C program could call was fixed at compile time, but that‚Äôs not true at all!&lt;/p&gt;
&lt;p&gt;This search led me down a rabbit hole of learning more about linkers, and now I think they‚Äôre super cool‚Äîand far less cryptic! I &lt;strong&gt;highly&lt;/strong&gt; recommend &lt;em&gt;Chapter 7: Linking&lt;/em&gt; from &lt;a href=&quot;http://www.csapp.cs.cmu.edu/&quot;&gt;Computer Systems: A Programmer‚Äôs Perspective&lt;/a&gt; if this was interesting to you.&lt;/p&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="linux" /><category term="ruby" /><category term="c" /><summary type="html">‚Üê Return home I recently learned that linkers are really cool. It all started when I saw an error message that looked something like this:</summary></entry><entry><title type="html">Search Down the Stack</title><link href="https://blog.jez.io/search-down-the-stack/" rel="alternate" type="text/html" title="Search Down the Stack" /><published>2020-06-06T20:08:20-04:00</published><updated>2020-06-06T20:08:20-04:00</updated><id>https://blog.jez.io/search-down-the-stack</id><content type="html" xml:base="https://blog.jez.io/search-down-the-stack/">&lt;nav id=&quot;TOC&quot; role=&quot;doc-toc&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;‚Üê Return home&lt;/a&gt;&lt;br&gt;
&lt;/nav&gt;

&lt;main&gt;
&lt;p&gt;I‚Äôve found it useful to search though the source code of things lower in the stack lately. For example I saw an error something like this at work recently:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ rake test
symbol lookup error: /home/jez/.../foo.so: undefined symbol bar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was pretty confused. Modulo the names of commands and files, this was pretty much all the output.&lt;/p&gt;
&lt;p&gt;So I started searching. First I searched through my codebase for &lt;code&gt;&quot;symbol lookup error&quot;&lt;/code&gt;, but found nothing. Surely that string exists somewhere. That must mean it‚Äôs coming from lower in the stack?&lt;/p&gt;
&lt;p&gt;The next level lower would mean third party Ruby gems. At work we use Bundler &lt;a href=&quot;https://bundler.io/v2.0/guides/deploying.html#manual-deployment&quot;&gt;in a mode&lt;/a&gt; where it installs all gems into a single convenient folder in the current directory: &lt;code&gt;./vendor/bundle/&lt;/code&gt;. But a search in that folder turned up nothing again. So‚Ä¶ further down?&lt;/p&gt;
&lt;p&gt;If it‚Äôs not from the app, and not from the gems, then maybe it‚Äôs in Ruby itself? I cloned the &lt;a href=&quot;https://github.com/ruby/ruby&quot;&gt;Ruby source&lt;/a&gt;, checked out the &lt;a href=&quot;https://github.com/ruby/ruby/tree/v2_6_5&quot;&gt;version tag&lt;/a&gt; for the Ruby version we‚Äôre running, and searched for &lt;code&gt;&quot;symbol lookup error&quot;&lt;/code&gt; once again. And again nothing!&lt;/p&gt;
&lt;p&gt;There‚Äôs still plenty of layers below us, so let‚Äôs keep peeling them back. Ruby is written in C, which means we should check libc next (the C standard library). There are multiple libc implementations, but I was running this on Linux, so let‚Äôs check GNU libc (glibc). glibc is &lt;a href=&quot;https://www.gnu.org/software/libc/sources.html&quot;&gt;isn‚Äôt on GitHub&lt;/a&gt;, but that‚Äôs not a huge deterrant. Here‚Äôs the search:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ rg -t c &amp;#39;symbol lookup error&amp;#39;
dl-lookup.c
876:      _dl_signal_cexception (0, &amp;amp;exception, N_(&amp;quot;symbol lookup error&amp;quot;));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That‚Äôs a bit of a smoking gun! After all those layers, we found our error message in libc itself. (This gave me a lot of leads on the problem at hand, e.g., I had definitely ruled out a problem in my app or its dependencies, and I was thinking, ‚Äúprobably something is wrong about how &lt;code&gt;foo.so&lt;/code&gt; was compiled.‚Äù There‚Äôs a fun story here about how Ruby C extensions work, but that‚Äôs a &lt;a href=&quot;/linkers-ruby-c-exts/&quot;&gt;tangent for another time&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;My point is that &lt;a href=&quot;https://livegrep.com/search/linux&quot;&gt;searching all the code&lt;/a&gt; is a super power, and it applies to more than just searching the code we‚Äôve written. What a blessing that the tools we‚Äôre building on, like Ruby and GNU libc, are all open source!&lt;/p&gt;
&lt;p&gt;The next time it looks like a problem is outside the scope of your app‚Äôs code, maybe try searching the code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inside your gems or packages!&lt;/li&gt;
&lt;li&gt;inside your language‚Äôs standard library!
&lt;ul&gt;
&lt;li&gt;Some IDEs will even let you jump-to-def into core libraries üòÆ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;inside your language‚Äôs runtime
&lt;ul&gt;
&lt;li&gt;(if you‚Äôre using a language with a runtime like Ruby or Python or even &lt;a href=&quot;https://github.com/v8/v8&quot;&gt;JavaScript&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;powering your operating system kernel! &lt;span class=&quot;sidenote-wrapper&quot;&gt;&lt;label for=&quot;sn-0&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-0&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;This might sound daunting, but sometimes it can be useful. A good thing to keep in mind: every &lt;strong&gt;system call&lt;/strong&gt; like &lt;code&gt;open(2)&lt;/code&gt; or &lt;code&gt;write(2)&lt;/code&gt; or &lt;code&gt;select(2)&lt;/code&gt; (and every other function from section 2 of the man pages) is really just a way for your program to request that the operating system do something; knowing that can be a decent place to start traipsing through code in the operating system.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me, I‚Äôve already noticed it help save me time and give me more context when I‚Äôm debugging.&lt;/p&gt;
&lt;!-- vim:tw=72
--&gt;
&lt;/main&gt;</content><author><name>Jake Zimmerman</name></author><category term="fragment" /><category term="linux" /><category term="debugging" /><summary type="html">‚Üê Return home I‚Äôve found it useful to search though the source code of things lower in the stack lately. For example I saw an error something like this at work recently:</summary></entry></feed>