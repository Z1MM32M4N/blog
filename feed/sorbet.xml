<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://blog.jez.io/feed/sorbet.xml" rel="self" type="application/atom+xml" /><link href="https://blog.jez.io/" rel="alternate" type="text/html" /><updated>2023-09-15T18:58:33-04:00</updated><id>https://blog.jez.io/feed/sorbet.xml</id><title type="html">Jake Zimmerman | Sorbet</title><subtitle>A collection of blog posts about programming, software, types, programming languages, Sorbet, Vim, Markdown, and more.</subtitle><author><name>Jake Zimmerman</name></author><entry><title type="html">Only return nil if given nil</title><link href="https://blog.jez.io/sorbet-nil-if-nil/" rel="alternate" type="text/html" title="Only return nil if given nil" /><published>2023-09-15T18:28:50-04:00</published><updated>2023-09-15T18:28:50-04:00</updated><id>https://blog.jez.io/sorbet-nil-if-nil</id><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="ruby" /><summary type="html"><![CDATA[A quick post showing how to write a type that people commonly want to be able to write, where the return type is only nil if the input was nilable.]]></summary></entry><entry><title type="html">Why Sorbet needs T.let(…, T::Boolean)</title><link href="https://blog.jez.io/t-let-boolean/" rel="alternate" type="text/html" title="Why Sorbet needs T.let(…, T::Boolean)" /><published>2023-05-13T19:31:29-04:00</published><updated>2023-05-13T19:31:29-04:00</updated><id>https://blog.jez.io/t-let-boolean</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="types" /><summary type="html"><![CDATA[A short explanation of why Sorbet sometimes requires an explicit type annotation when initializing a variable whose type is changed in a loop.]]></summary></entry><entry><title type="html">Typing klass.new in Ruby with Sorbet</title><link href="https://blog.jez.io/typing-klass-new/" rel="alternate" type="text/html" title="Typing klass.new in Ruby with Sorbet" /><published>2023-02-19T22:34:27-05:00</published><updated>2023-02-19T22:34:27-05:00</updated><id>https://blog.jez.io/typing-klass-new</id><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="ruby" /><category term="types" /><summary type="html"><![CDATA[The straightforward attempt at writing a Sorbet signature for a method that calls `klass.new` doesn't work. The strategy that does work uses abstract methods, and so I'd like to walk through an extended example showing how to get such code to typecheck.]]></summary></entry><entry><title type="html">Problems typing equality in Ruby</title><link href="https://blog.jez.io/problems-typing-ruby-equality/" rel="alternate" type="text/html" title="Problems typing equality in Ruby" /><published>2023-01-24T16:12:15-05:00</published><updated>2023-01-24T16:12:15-05:00</updated><id>https://blog.jez.io/problems-typing-ruby-equality</id><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="types" /><category term="ruby" /><summary type="html"><![CDATA[TypeScript has this really handy error that flags when it looks like two values of unrelated types are getting compared. I would love to build the same error into Sorbet, but there are two features which make that hard: custom overrides of `==` and subtyping. Here are some heuristics we might consider building in Sorbet, and why they don't work.]]></summary></entry><entry><title type="html">Making Sorbet more incremental</title><link href="https://blog.jez.io/making-sorbet-more-incremental/" rel="alternate" type="text/html" title="Making Sorbet more incremental" /><published>2023-01-09T09:19:36-05:00</published><updated>2023-01-09T09:19:36-05:00</updated><id>https://blog.jez.io/making-sorbet-more-incremental</id><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="language-servers" /><summary type="html"><![CDATA[← Return home My main focus last year was improving the Sorbet editor experience: making Sorbet feel snappier while powering language-aware editor features. The biggest improvements came from making Sorbet more incremental. By being smarter about skipping redundant work, we slashed the time it takes for Sorbet to do things like update the list of errors, populate autocompletion suggestions, and jump between definitions and usages.]]></summary></entry><entry><title type="html">Runtime type checking is great</title><link href="https://blog.jez.io/runtime-type-checking/" rel="alternate" type="text/html" title="Runtime type checking is great" /><published>2023-01-03T13:15:03-05:00</published><updated>2023-01-03T13:15:03-05:00</updated><id>https://blog.jez.io/runtime-type-checking</id><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="types" /><summary type="html"><![CDATA[Checking type annotations at runtime—in addition to statically—is a net win in a gradual type system. In many cases runtime checking only _seems_ like it comes with more costs, when in fact they're the same costs, paid earlier. When there are net-new costs, there are ways to minimize them, and runtime-checked type annotations come with some key benefits that makes working in a gradually-typed codebase easier.]]></summary></entry><entry><title type="html">Some Old Sorbet Compiler Notes</title><link href="https://blog.jez.io/old-compiler-notes/" rel="alternate" type="text/html" title="Some Old Sorbet Compiler Notes" /><published>2022-12-10T17:38:00-05:00</published><updated>2022-12-10T17:38:00-05:00</updated><id>https://blog.jez.io/old-compiler-notes</id><author><name>Jake Zimmerman</name></author><category term="meta" /><category term="sorbet" /><category term="sorbet-compiler" /><summary type="html"><![CDATA[Today I'm publshing a few of my old, internal-facing notes about the Sorbet Compiler here to my blog.]]></summary></entry><entry><title type="html">Sorbet’s weird approach to exception handling</title><link href="https://blog.jez.io/sorbet-rescue-control-flow/" rel="alternate" type="text/html" title="Sorbet’s weird approach to exception handling" /><published>2022-09-04T23:12:12-04:00</published><updated>2022-09-04T23:12:12-04:00</updated><id>https://blog.jez.io/sorbet-rescue-control-flow</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="types" /><category term="in-pictures" /><summary type="html"><![CDATA[A quick post explaining why exception handling in Sorbet is weird, by way of a buggy program and some pretty pictures.]]></summary></entry><entry><title type="html">Control Flow in Sorbet is Syntactic</title><link href="https://blog.jez.io/syntactic-control-flow/" rel="alternate" type="text/html" title="Control Flow in Sorbet is Syntactic" /><published>2022-08-24T17:30:43-04:00</published><updated>2022-08-24T17:30:43-04:00</updated><id>https://blog.jez.io/syntactic-control-flow</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="types" /><summary type="html"><![CDATA[An exploration of why Sorbet lets control flow affect variables' types, but not methods' types.]]></summary></entry><entry><title type="html">Parse Error Recovery in Sorbet: Part 4</title><link href="https://blog.jez.io/error-recovery-part-4/" rel="alternate" type="text/html" title="Parse Error Recovery in Sorbet: Part 4" /><published>2022-06-06T01:56:49-04:00</published><updated>2022-06-06T01:56:49-04:00</updated><id>https://blog.jez.io/error-recovery-part-4</id><author><name>Jake Zimmerman</name></author><category term="sorbet" /><category term="parsing" /><summary type="html"><![CDATA[This is the fourth post in a series about things I've learned while making improvements to Sorbet's parser. With the last post, I talked about some tools and techniques that I've found useful while hacking on Sorbet's Bison-based parser. This post is going to continue that theme by explaining in a little more detail the primary tool Bison has for adding error recovery to a parser—the special `error` token.]]></summary></entry></feed>